(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.hushjs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (Buffer){
var bs58check = require('bs58check');
var secp256k1 = require('secp256k1');
var bigi = require('bigi');
var zcrypto = require('./crypto');
var zconfig = require('./config');

/*
 * Makes a private key
 * @param {String} phrase (Password phrase)
 * @return {Sting} Private key
 */
function mkPrivKey(phrase) {
  return zcrypto.sha256(Buffer.from(phrase, 'utf-8'));
}

/*
 * Converts a private key to WIF format
 * @param {String} privKey (private key)
 * @param {boolean} toCompressed (Convert to WIF compressed key or nah)
 * @param {string} wif (wif hashing bytes (default: 0x80))
 * @return {Sting} WIF format (uncompressed)
 */
function privKeyToWIF(privKey, toCompressed, wif) {
  toCompressed = toCompressed || false;
  wif = wif || zconfig.mainnet.wif;

  if (toCompressed) privKey = privKey + '01';

  return bs58check.encode(Buffer.from(wif + privKey, 'hex'));
}

/*
 * Returns private key's public Key
 * @param {String} privKey (private key)
 * @param {boolean} toCompressed (Convert to public key compressed key or nah)
 * @return {Sting} Public Key (default: uncompressed)
 */
function privKeyToPubKey(privKey, toCompressed) {
  toCompressed = toCompressed || false;

  const pkBuffer = Buffer.from(privKey, 'hex');
  var publicKey = secp256k1.publicKeyCreate(pkBuffer, toCompressed);
  return publicKey.toString('hex');
}

/*
 * Given a WIF format pk, convert it back to the original pk
 * @param {String} privKey (private key)
 * @return {Sting} Public Key (uncompressed)
 */
function WIFToPrivKey(wifPk) {
  var og = bs58check.decode(wifPk, 'hex').toString('hex');
  og = og.substr(2, og.length); // remove WIF format ('80')

  // remove the '01' at the end to 'compress it' during WIF conversion
  if (og.length > 64) {
    og = og.substr(0, 64);
  }

  return og;
}

/*
 * Converts public key to hush address
 * @param {String} pubKey (public key)
 * @param {String} pubKeyHash (public key hash (optional, else use defaul))
 * @return {Sting} hush address
 */
function pubKeyToAddr(pubKey, pubKeyHash) {
  pubKeyHash = pubKeyHash || zconfig.mainnet.pubKeyHash;

  const hash160 = zcrypto.hash160(Buffer.from(pubKey, 'hex'));
  return bs58check.encode(Buffer.from(pubKeyHash + hash160, 'hex')).toString('hex');
}

module.exports = {
  mkPrivKey: mkPrivKey,
  privKeyToWIF: privKeyToWIF,
  privKeyToPubKey: privKeyToPubKey,
  pubKeyToAddr: pubKeyToAddr,
  WIFToPrivKey: WIFToPrivKey
};
}).call(this,require("buffer").Buffer)
},{"./config":3,"./crypto":5,"bigi":31,"bs58check":69,"buffer":71,"secp256k1":173}],2:[function(require,module,exports){
(function (Buffer){


// https://github.com/bitcoinjs/bitcoinjs-lib/issues/14
function numToBytes(num, bytes) {
  if (bytes == 0) return [];else return [num % 256].concat(numToBytes(Math.floor(num / 256), bytes - 1));
}

function numToVarInt(num) {
  var b;
  if (num < 253) b = [num];else if (num < 65536) b = [253].concat(numToBytes(num, 2));else if (num < 4294967296) b = [254].concat(numToBytes(num, 4));else b = [253].concat(numToBytes(num, 8));
  return Buffer.from(b).toString('hex');
}

// https://github.com/feross/buffer/blob/master/index.js#L1127
function verifuint(value, max) {
  if (typeof value !== 'number') {
    throw new Error('cannot write a non-number as a number');
  }
  if (value < 0) {
    throw new Error('specified a negative value for writing an unsigned value');
  }
  if (value > max) throw new Error('RangeError: value out of range');
  if (Math.floor(value) !== value) {
    throw new Error('value has a fractional component');
  }
}

function readUInt64LE(buffer, offset) {
  var a = buffer.readUInt32LE(offset);
  var b = buffer.readUInt32LE(offset + 4);
  b *= 0x100000000;

  verifuint(b + a, 0x001fffffffffffff);

  return b + a;
}

function writeUInt64LE(buffer, value, offset) {
  verifuint(value, 0x001fffffffffffff);

  buffer.writeInt32LE(value & -1, offset);
  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);
  return offset + 8;
}

/*
 * Given a hex string, get the length of it in bytes
 * ** NOT string.length, but convert it into bytes
 *    and return the length of that in bytes in hex
 * @param {String} hexStr
 * return {String} Length of hexStr in bytes
 */
function getStringBufferLength(hexStr) {
  const _tmpBuf = Buffer.from(hexStr, 'hex').length;
  return Buffer.from([_tmpBuf]).toString('hex');
}

module.exports = {
  readUInt64LE: readUInt64LE,
  writeUInt64LE: writeUInt64LE,
  getStringBufferLength: getStringBufferLength,
  numToVarInt: numToVarInt,
  numToBytes: numToBytes
};
}).call(this,require("buffer").Buffer)
},{"buffer":71}],3:[function(require,module,exports){
/*
config.js - Configuration for Hush Coin
*/

module.exports = {
    mainnet: {
        messagePrefix: 'Hush mainnet',
        bip32: {
            public: '0488b21e',
            private: '0488ade4'
        },
        pubKeyHash: '1cb8',
        scriptHash: '1cbd',
        zcPaymentAddressHash: '169a',
        zcSpendingKeyHash: 'ab36',
        wif: '80'
    },
    testnet: {
        messagePrefix: 'Hush testnet',
        bip32: {
            public: '043587cf',
            private: '04358394'
        },
        pubKeyHash: '1d25',
        scriptHash: '1cba',
        zcPaymentAddressHash: '16b6',
        zcSpendingKeyHash: 'ac08',
        wif: 'ef'
    }
};
},{}],4:[function(require,module,exports){
module.exports = {
  /* SIGHASH Codes
   * Obtained from: https://github.com/MyHush/hush/blob/master/src/script/interpreter.h
   */
  SIGHASH_ALL: 1,
  SIGHASH_NONE: 2,
  SIGHASH_SINGLE: 3,
  SIGHASH_ANYONECANPAY: 0x80
};
},{}],5:[function(require,module,exports){
(function (Buffer){

/* 
 * Obtained from https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/crypto.js
 * 2017/07/25: No ripemd160 in SJCL, so resorted to this
 */

var createHash = require('create-hash');

function ripemd160(buffer) {
  return createHash('rmd160').update(buffer).digest('hex');
}

function sha1(buffer) {
  return createHash('sha1').update(buffer).digest('hex');
}

function sha256(buffer) {
  return createHash('sha256').update(buffer).digest('hex');
}

function sha256x2(buffer) {
  return sha256(Buffer.from(sha256(buffer), 'hex'));
}

function hash160(buffer) {
  const sha = sha256(buffer);
  const hash160 = ripemd160(Buffer.from(sha, 'hex'));
  return hash160;
}

module.exports = {
  hash160: hash160,
  ripemd160: ripemd160,
  sha1: sha1,
  sha256: sha256,
  sha256x2: sha256x2
};
}).call(this,require("buffer").Buffer)
},{"buffer":71,"create-hash":75}],6:[function(require,module,exports){
module.exports = {
  address: require('./address'),
  config: require('./config'),
  zaddress: require('./zaddress'),
  crypto: require('./crypto'),
  transaction: require('./transaction')
};
},{"./address":1,"./config":3,"./crypto":5,"./transaction":10,"./zaddress":11}],7:[function(require,module,exports){

/* Useful OP codes for the scripting language
 * Obtained from: https://github.com/MyHush/hush/blob/master/src/script/script.h
 */

module.exports = {
  OP_DUP: '76',
  OP_HASH160: 'a9',
  OP_EQUALVERIFY: '88',
  OP_CHECKSIG: 'ac',
  OP_CHECKBLOCKATHEIGHT: 'b4', // AKA OP_NOP5, from: https://github.com/ZencashOfficial/zen/blob/master/src/script/script.h
  OP_EQUAL: '87',
  OP_REVERSED: '89'
};
},{}],8:[function(require,module,exports){
(function (Buffer){
var SHA256Compress = require('./sha256compress');

function prf(a, b, c, d, x, y) {

  var blob = Buffer.alloc(64);

  x.copy(blob, 0);
  y.copy(blob, 32);

  blob[0] &= 0x0F;
  blob[0] |= (a ? 1 << 7 : 0) | (b ? 1 << 6 : 0) | (c ? 1 << 5 : 0) | (d ? 1 << 4 : 0);

  var hasher = new SHA256Compress();
  hasher.update(blob);
  return hasher.hash();
}

function prfAddr(aSk, t) {
  var y = Buffer.alloc(32);
  y.fill(0);
  y[0] = t;

  return prf(1, 1, 0, 0, aSk, y);
}

function prfAddrAPk(aSk) {
  return prfAddr(aSk, 0);
}

function prfAddrSkEnc(aSk) {
  return prfAddr(aSk, 1);
}

function prfNf(aSk, rho) {
  return prf(1, 1, 1, 0, aSk, rho);
}

function prfPk(aSk, i0, hSig) {
  if (i0 !== 0 && i0 !== 1) {
    throw new Error('PRF_pk invoked with index out of bounds');
  }

  return prf(0, i0, 0, 0, aSk, hSig);
}

function prfRho(phi, i0, hSig) {
  if (i0 !== 0 && i0 !== 1) {
    throw new Error('PRF_rho invoked with index out of bounds');
  }

  return prf(0, i0, 1, 0, phi, hSig);
}

module.exports = {
  PRF_addr_a_pk: prfAddrAPk,
  PRF_addr_sk_enc: prfAddrSkEnc,
  PRF_nf: prfNf,
  PRF_pk: prfPk,
  PRF_rho: prfRho
};
}).call(this,require("buffer").Buffer)
},{"./sha256compress":9,"buffer":71}],9:[function(require,module,exports){
(function (Buffer){
/**
 * Adapted from https://github.com/crypto-browserify/sha.js/blob/master/sha256.js
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];

var W = new Array(64);

function Sha256Compress() {
  this.init();

  this._w = W; // new Array(64)
}

Sha256Compress.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;

  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256Compress.prototype.update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
  for (; i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;

  for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
    var T2 = sigma0(a) + maj(a, b, c) | 0;

    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256Compress.prototype.hash = function () {
  var H = Buffer.alloc(32);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);

  return H;
};

module.exports = Sha256Compress;
}).call(this,require("buffer").Buffer)
},{"buffer":71}],10:[function(require,module,exports){
(function (Buffer){
var bs58check = require('bs58check');
var secp256k1 = require('secp256k1');
var int64buffer = require('int64-buffer');
var varuint = require('varuint-bitcoin');
var zconfig = require('./config');
var zbufferutils = require('./bufferutils');
var zcrypto = require('./crypto');
var zconstants = require('./constants');
var zaddress = require('./address');
var zopcodes = require('./opcodes');
var zbufferutils = require('./bufferutils');

/* More info: https://github.com/ZencashOfficial/zen/blob/master/src/script/standard.cpp#L377
 * Given an address, generates a pubkeyhash replay type script needed for the transaction
 * @param {String} address
 * @param {String} pubKeyHash (optional)
 * return {String} pubKeyScript
 */
function mkPubkeyHashReplayScript(address, pubKeyHash) {
  // Get lengh of pubKeyHash (so we know where to substr later on)
  pubKeyHash = pubKeyHash || zconfig.mainnet.pubKeyHash;

  var addrHex = bs58check.decode(address).toString('hex');

  // Cut out pubKeyHash
  var subAddrHex = addrHex.substring(pubKeyHash.length, addrHex.length);

  // '14' is the length of the subAddrHex (in bytes)
  return zopcodes.OP_DUP + zopcodes.OP_HASH160 + zbufferutils.getStringBufferLength(subAddrHex) + subAddrHex + zopcodes.OP_EQUALVERIFY + zopcodes.OP_CHECKSIG;
}

/*
 * Given an address, generates a script hash replay type script needed for the transaction
 * @param {String} address
 * return {String} scriptHash script
 */
function mkScriptHashReplayScript(address) {
  var addrHex = bs58check.decode(address).toString('hex');
  var subAddrHex = addrHex.substring(4, addrHex.length); // Cut out the '00' (we also only want 14 bytes instead of 16)

  // '14' is the length of the subAddrHex (in bytes)
  return zopcodes.OP_HASH160 + zbufferutils.getStringBufferLength(subAddrHex) + subAddrHex + zopcodes.OP_EQUAL;
}

/*
 * Given an address, generates an output script
 * @param {String} address
 * return {String} output script
 */
function addressToScript(address) {
  // P2SH replay starts with a 't3'
  if (address[1] === '3') {
    return mkScriptHashReplayScript(address);
  }
  // P2PKH-replay is a replacement for P2PKH
  // P2PKH-replay starts with a 0
  return mkPubkeyHashReplayScript(address);
}

/*
 * Signature hashing for TXOBJ
 * @param {String} address
 * @param {Number} i, which transaction input to sign
 * @param {String} hex string of script
 * @param {String} hash code (SIGHASH_ALL, SIGHASH_NONE...)
 * return {String} output script
 */
function signatureForm(txObj, i, script, hashcode) {
  // Copy object so we don't rewrite it
  var newTx = JSON.parse(JSON.stringify(txObj));

  for (var j = 0; j < newTx.ins.length; j++) {
    newTx.ins[j].script = '';
  }
  newTx.ins[i].script = script;

  if (hashcode === zconstants.SIGHASH_NONE) {
    newTx.outs = [];
  } else if (hashcode === zconstants.SIGHASH_SINGLE) {
    newTx.outs = newTx.outs.slice(0, newTx.ins.length);
    for (var j = 0; j < newTx.ins.length - 1; ++j) {
      newTx.outs[j].satoshis = Math.pow(2, 64) - 1;
      newTx.outs[j].script = '';
    }
  } else if (hashcode === zconstants.SIGHASH_ANYONECANPAY) {
    newTx.ins = [newTx.ins[i]];
  }

  return newTx;
}

/*
 * Deserializes a hex string into a TXOBJ
 * @param {String} hex string
 * @return {Object} txOBJ
 */
function deserializeTx(hexStr) {
  const buf = Buffer.from(hexStr, 'hex');
  var offset = 0;

  // Out txobj
  var txObj = {
    version: buf.readUInt32LE(offset),
    locktime: 0, ins: [], outs: []
  };
  offset += 4;

  // Vins
  var vinLen = varuint.decode(buf, offset);
  offset += varuint.decode.bytes;
  for (var i = 0; i < vinLen; i++) {
    const hash = buf.slice(offset, offset + 32);
    offset += 32;

    const vout = buf.readUInt32LE(offset);
    offset += 4;

    const scriptLen = varuint.decode(buf, offset);
    offset += varuint.decode.bytes;

    const script = buf.slice(offset, offset + scriptLen);
    offset += scriptLen;

    const sequence = buf.slice(offset, offset + 4).toString('hex');
    offset += 4;

    txObj.ins.push({
      output: { hash: hash.reverse().toString('hex'), vout: vout },
      script: script.toString('hex'),
      sequence: sequence,
      prevScriptPubKey: ''
    });
  }

  // Vouts
  var voutLen = varuint.decode(buf, offset);
  offset += varuint.decode.bytes;
  for (var i = 0; i < voutLen; i++) {
    const satoshis = zbufferutils.readUInt64LE(buf, offset);
    offset += 8;

    const scriptLen = varuint.decode(buf, offset);
    offset += varuint.decode.bytes;

    const script = buf.slice(offset, offset + scriptLen);
    offset += scriptLen;

    txObj.outs.push({
      satoshis: satoshis,
      script: script.toString('hex')
    });
  }

  // Locktime
  txObj.locktime = buf.readInt32LE(offset);
  offset += 4;

  return txObj;
}

/*
 * Serializes a TXOBJ into hex string
 * @param {Object} txObj
 * return {String} hex string of txObj
 */
function serializeTx(txObj) {
  var serializedTx = '';
  var _buf16 = Buffer.alloc(4);

  // Version
  _buf16.writeUInt16LE(txObj.version, 0);
  serializedTx += _buf16.toString('hex');

  // History
  serializedTx += zbufferutils.numToVarInt(txObj.ins.length);
  txObj.ins.map(function (i) {
    // Txids and vouts
    _buf16.writeUInt16LE(i.output.vout, 0);
    serializedTx += Buffer.from(i.output.hash, 'hex').reverse().toString('hex');
    serializedTx += _buf16.toString('hex');

    // Script
    serializedTx += zbufferutils.getStringBufferLength(i.script);
    serializedTx += i.script;

    // Sequence
    serializedTx += i.sequence;
  });

  // Outputs
  serializedTx += zbufferutils.numToVarInt(txObj.outs.length);
  txObj.outs.map(function (o) {
    // Write 64bit buffers
    // JS only supports 56 bit
    // https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/bufferutils.js#L25
    var _buf32 = Buffer.alloc(8);

    _buf32.writeInt32LE(o.satoshis & -1, 0);
    _buf32.writeUInt32LE(Math.floor(o.satoshis / 0x100000000), 4);

    serializedTx += _buf32.toString('hex');
    serializedTx += zbufferutils.getStringBufferLength(o.script);
    serializedTx += o.script;
  });

  // Locktime
  _buf16.writeUInt16LE(txObj.locktime, 0);
  serializedTx += _buf16.toString('hex');

  return serializedTx;
}

/*
 * Creates a raw transaction
 * @param {[HISTORY]} history type, array of transaction history
 * @param {[RECIPIENTS]} recipient type, array of address on where to send coins to
  * @return {TXOBJ} Transction Object (see TXOBJ type for info about structure)
 */
function createRawTx(history, recipients) {
  var txObj = { locktime: 0, version: 1, ins: [], outs: [] };

  txObj.ins = history.map(function (h) {
    return {
      output: { hash: h.txid, vout: h.vout },
      script: '',
      prevScriptPubKey: h.scriptPubKey,
      sequence: 'ffffffff'
    };
  });
  txObj.outs = recipients.map(function (o) {
    return {
      script: addressToScript(o.address),
      satoshis: o.satoshis
    };
  });

  return txObj;
}

/*
 * Signs the raw transaction
 * @param {String} rawTx raw transaction
 * @param {Int} i
 * @param {privKey} privKey (not WIF format)
 * @param {compressPubKey} compress public key before appending to scriptSig? (default false)
 * @param {hashcode} hashcode (default SIGHASH_ALL)
 * return {String} signed transaction
 */
function signTx(_txObj, i, privKey, compressPubKey, hashcode) {
  hashcode = hashcode || zconstants.SIGHASH_ALL;
  compressPubKey = compressPubKey || false;

  // Make a copy
  var txObj = JSON.parse(JSON.stringify(_txObj));

  // Buffer
  var _buf16 = Buffer.alloc(4);
  _buf16.writeUInt16LE(hashcode, 0);

  // Prepare signing
  const script = txObj.ins[i].prevScriptPubKey;

  // Prepare our signature
  const signingTx = signatureForm(txObj, i, script, hashcode);
  const signingTxHex = serializeTx(signingTx);
  const signingTxWithHashcode = signingTxHex + _buf16.toString('hex');

  // Sha256 it twice, according to spec
  const msg = zcrypto.sha256x2(Buffer.from(signingTxWithHashcode, 'hex'));

  // Signing it
  const rawsig = secp256k1.sign(Buffer.from(msg, 'hex'), Buffer.from(privKey, 'hex')).signature;

  // Convert it to DER format
  // Appending 01 to it cause
  // ScriptSig = <varint of total sig length> <SIG from code, including appended 01 SIGNHASH> <length of pubkey (0x21 or 0x41)> <pubkey>
  // https://bitcoin.stackexchange.com/a/36481
  const signatureDER = secp256k1.signatureExport(rawsig).toString('hex') + '01';

  // Chuck it back into txObj and add pubkey
  // WHAT? If it fails, uncompress/compress it and it should work...
  const pubKey = zaddress.privKeyToPubKey(privKey, compressPubKey);

  txObj.ins[i].script = zbufferutils.getStringBufferLength(signatureDER) + signatureDER + zbufferutils.getStringBufferLength(pubKey) + pubKey;

  return txObj;
}

module.exports = {
  addressToScript: addressToScript,
  createRawTx: createRawTx,
  mkPubkeyHashReplayScript: mkPubkeyHashReplayScript,
  mkScriptHashReplayScript: mkScriptHashReplayScript,
  signatureForm: signatureForm,
  serializeTx: serializeTx,
  deserializeTx: deserializeTx,
  signTx: signTx
};
}).call(this,require("buffer").Buffer)
},{"./address":1,"./bufferutils":2,"./config":3,"./constants":4,"./crypto":5,"./opcodes":7,"bs58check":69,"buffer":71,"int64-buffer":125,"secp256k1":173,"varuint-bitcoin":193}],11:[function(require,module,exports){
(function (Buffer){
var prf = require('./prf');
var address = require('./address');
var bs58check = require('bs58check');
var sodium = require('libsodium-wrappers-sumo');
var zconfig = require('./config');

/*
 * Creates a Z secret key (a_sk)
 * @param {String} phrase (Password phrase)
 * @return {Sting} Z secret key (a_sk)
 */
function mkZSecretKey(phrase) {
  const a_sk = address.mkPrivKey(phrase);
  var baddr = Buffer.from(a_sk, 'hex');
  baddr[0] &= 0x0f;
  return baddr.toString('hex');
}

/*
 * Converts the secret key to a spending key
 * @param {String} a_sk (secret key)
 * @param {String} zcSpendingKeyHash (secret key hash,optional)
 * @return {Sting} sk (spending key)
 */
function zSecretKeyToSpendingKey(a_sk, zcSpendingKeyHash) {
  zcSpendingKeyHash = zcSpendingKeyHash || zconfig.mainnet.zcSpendingKeyHash;

  const buf = Buffer.from(zcSpendingKeyHash + a_sk, 'hex');
  return bs58check.encode(buf).toString('hex');
}

/*
 * Converts a Z secret key to a paying key
 * @param {String} a_sk (secret key)
 * @return {Sting} a_pk key (paying key)
 */
function zSecretKeyToPayingKey(a_sk) {
  return prf.PRF_addr_a_pk(Buffer.from(a_sk, 'hex')).toString('hex');
}

/*
 * Converts a Z secret key to a transmission key
 * @param {String} a_sk (secret key)
 * @return {Sting} pk_enc key (transmisison key)
 */
function zSecretKeyToTransmissionKey(a_sk) {
  var sk_enc = prf.PRF_addr_sk_enc(Buffer.from(a_sk, 'hex'));

  // Curve 25519 clamping
  sk_enc[0] &= 248;
  sk_enc[32] &= 127;
  sk_enc[31] |= 64;

  return Buffer.from(sodium.crypto_scalarmult_base(sk_enc)).toString('hex');
}

/*
 * Makes a Z address given:
 * @param {String} a_pk (paying key)
 * @param {String} pk_enc key (transmission key)
 * @param {String} zcPaymentAddressHash (hash for payment address, optional)
 * @return {String} Zaddress
 */
function mkZAddress(a_pk, pk_enc, zcPaymentAddressHash) {
  zcPaymentAddressHash = zcPaymentAddressHash || zconfig.mainnet.zcPaymentAddressHash;

  const buf = Buffer.from(zcPaymentAddressHash + a_pk + pk_enc, 'hex');
  return bs58check.encode(buf).toString('hex');
}

module.exports = {
  mkZSecretKey: mkZSecretKey,
  zSecretKeyToTransmissionKey: zSecretKeyToTransmissionKey,
  zSecretKeyToPayingKey: zSecretKeyToPayingKey,
  zSecretKeyToSpendingKey: zSecretKeyToSpendingKey,
  mkZAddress: mkZAddress
};
}).call(this,require("buffer").Buffer)
},{"./address":1,"./config":3,"./prf":8,"bs58check":69,"buffer":71,"libsodium-wrappers-sumo":129}],12:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":13,"./asn1/base":15,"./asn1/constants":19,"./asn1/decoders":21,"./asn1/encoders":24,"bn.js":34}],13:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":12,"inherits":124,"vm":194}],14:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":15,"buffer":71,"inherits":124}],15:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":14,"./node":16,"./reporter":17}],16:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":15,"minimalistic-assert":132}],17:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":124}],18:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":19}],19:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":18}],20:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":12,"inherits":124}],21:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":20,"./pem":22}],22:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":20,"buffer":71,"inherits":124}],23:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":12,"buffer":71,"inherits":124}],24:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":23,"./pem":25}],25:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":23,"inherits":124}],26:[function(require,module,exports){
(function (global){
'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"util/":192}],27:[function(require,module,exports){
// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

var Buffer = require('safe-buffer').Buffer

module.exports = function base (ALPHABET) {
  var ALPHABET_MAP = {}
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)

  // pre-compute lookup table
  for (var z = 0; z < ALPHABET.length; z++) {
    var x = ALPHABET.charAt(z)

    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
    ALPHABET_MAP[x] = z
  }

  function encode (source) {
    if (source.length === 0) return ''

    var digits = [0]
    for (var i = 0; i < source.length; ++i) {
      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
        carry += digits[j] << 8
        digits[j] = carry % BASE
        carry = (carry / BASE) | 0
      }

      while (carry > 0) {
        digits.push(carry % BASE)
        carry = (carry / BASE) | 0
      }
    }

    var string = ''

    // deal with leading zeros
    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += ALPHABET[0]
    // convert digits to a string
    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]

    return string
  }

  function decodeUnsafe (string) {
    if (string.length === 0) return Buffer.allocUnsafe(0)

    var bytes = [0]
    for (var i = 0; i < string.length; i++) {
      var value = ALPHABET_MAP[string[i]]
      if (value === undefined) return

      for (var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * BASE
        bytes[j] = carry & 0xff
        carry >>= 8
      }

      while (carry > 0) {
        bytes.push(carry & 0xff)
        carry >>= 8
      }
    }

    // deal with leading zeros
    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
      bytes.push(0)
    }

    return Buffer.from(bytes.reverse())
  }

  function decode (string) {
    var buffer = decodeUnsafe(string)
    if (buffer) return buffer

    throw new Error('Non-base' + BASE + ' character')
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}

},{"safe-buffer":172}],28:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],29:[function(require,module,exports){
// (public) Constructor
function BigInteger(a, b, c) {
  if (!(this instanceof BigInteger))
    return new BigInteger(a, b, c)

  if (a != null) {
    if ("number" == typeof a) this.fromNumber(a, b, c)
    else if (b == null && "string" != typeof a) this.fromString(a, 256)
    else this.fromString(a, b)
  }
}

var proto = BigInteger.prototype

// duck-typed isBigInteger
proto.__bigi = require('../package.json').version
BigInteger.isBigInteger = function (obj, check_ver) {
  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
}

// Bits per digit
var dbits

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    var v = x * this[i++] + w[j] + c
    c = Math.floor(v / 0x4000000)
    w[j++] = v & 0x3ffffff
  }
  return c
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
  var xl = x & 0x7fff,
    xh = x >> 15
  while (--n >= 0) {
    var l = this[i] & 0x7fff
    var h = this[i++] >> 15
    var m = xh * l + h * xl
    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
    w[j++] = l & 0x3fffffff
  }
  return c
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
  var xl = x & 0x3fff,
    xh = x >> 14
  while (--n >= 0) {
    var l = this[i] & 0x3fff
    var h = this[i++] >> 14
    var m = xh * l + h * xl
    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
    c = (l >> 28) + (m >> 14) + xh * h
    w[j++] = l & 0xfffffff
  }
  return c
}

// wtf?
BigInteger.prototype.am = am1
dbits = 26

BigInteger.prototype.DB = dbits
BigInteger.prototype.DM = ((1 << dbits) - 1)
var DV = BigInteger.prototype.DV = (1 << dbits)

var BI_FP = 52
BigInteger.prototype.FV = Math.pow(2, BI_FP)
BigInteger.prototype.F1 = BI_FP - dbits
BigInteger.prototype.F2 = 2 * dbits - BI_FP

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz"
var BI_RC = new Array()
var rr, vv
rr = "0".charCodeAt(0)
for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
rr = "a".charCodeAt(0)
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
rr = "A".charCodeAt(0)
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv

function int2char(n) {
  return BI_RM.charAt(n)
}

function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)]
  return (c == null) ? -1 : c
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
  r.t = this.t
  r.s = this.s
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1
  this.s = (x < 0) ? -1 : 0
  if (x > 0) this[0] = x
  else if (x < -1) this[0] = x + DV
  else this.t = 0
}

// return bigint initialized to value
function nbv(i) {
  var r = new BigInteger()
  r.fromInt(i)
  return r
}

// (protected) set from string and radix
function bnpFromString(s, b) {
  var self = this

  var k
  if (b == 16) k = 4
  else if (b == 8) k = 3
  else if (b == 256) k = 8; // byte array
  else if (b == 2) k = 1
  else if (b == 32) k = 5
  else if (b == 4) k = 2
  else {
    self.fromRadix(s, b)
    return
  }
  self.t = 0
  self.s = 0
  var i = s.length,
    mi = false,
    sh = 0
  while (--i >= 0) {
    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)
    if (x < 0) {
      if (s.charAt(i) == "-") mi = true
      continue
    }
    mi = false
    if (sh == 0)
      self[self.t++] = x
    else if (sh + k > self.DB) {
      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh
      self[self.t++] = (x >> (self.DB - sh))
    } else
      self[self.t - 1] |= x << sh
    sh += k
    if (sh >= self.DB) sh -= self.DB
  }
  if (k == 8 && (s[0] & 0x80) != 0) {
    self.s = -1
    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh
  }
  self.clamp()
  if (mi) BigInteger.ZERO.subTo(self, self)
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s & this.DM
  while (this.t > 0 && this[this.t - 1] == c)--this.t
}

// (public) return string representation in given radix
function bnToString(b) {
  var self = this
  if (self.s < 0) return "-" + self.negate()
    .toString(b)
  var k
  if (b == 16) k = 4
  else if (b == 8) k = 3
  else if (b == 2) k = 1
  else if (b == 32) k = 5
  else if (b == 4) k = 2
  else return self.toRadix(b)
  var km = (1 << k) - 1,
    d, m = false,
    r = "",
    i = self.t
  var p = self.DB - (i * self.DB) % k
  if (i-- > 0) {
    if (p < self.DB && (d = self[i] >> p) > 0) {
      m = true
      r = int2char(d)
    }
    while (i >= 0) {
      if (p < k) {
        d = (self[i] & ((1 << p) - 1)) << (k - p)
        d |= self[--i] >> (p += self.DB - k)
      } else {
        d = (self[i] >> (p -= k)) & km
        if (p <= 0) {
          p += self.DB
          --i
        }
      }
      if (d > 0) m = true
      if (m) r += int2char(d)
    }
  }
  return m ? r : "0"
}

// (public) -this
function bnNegate() {
  var r = new BigInteger()
  BigInteger.ZERO.subTo(this, r)
  return r
}

// (public) |this|
function bnAbs() {
  return (this.s < 0) ? this.negate() : this
}

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s - a.s
  if (r != 0) return r
  var i = this.t
  r = i - a.t
  if (r != 0) return (this.s < 0) ? -r : r
  while (--i >= 0)
    if ((r = this[i] - a[i]) != 0) return r
  return 0
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1,
    t
  if ((t = x >>> 16) != 0) {
    x = t
    r += 16
  }
  if ((t = x >> 8) != 0) {
    x = t
    r += 8
  }
  if ((t = x >> 4) != 0) {
    x = t
    r += 4
  }
  if ((t = x >> 2) != 0) {
    x = t
    r += 2
  }
  if ((t = x >> 1) != 0) {
    x = t
    r += 1
  }
  return r
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if (this.t <= 0) return 0
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
}

// (public) return the number of bytes in "this"
function bnByteLength() {
  return this.bitLength() >> 3
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
  var i
  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
  for (i = n - 1; i >= 0; --i) r[i] = 0
  r.t = this.t + n
  r.s = this.s
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r[i - n] = this[i]
  r.t = Math.max(this.t - n, 0)
  r.s = this.s
}

// (protected) r = this << n
function bnpLShiftTo(n, r) {
  var self = this
  var bs = n % self.DB
  var cbs = self.DB - bs
  var bm = (1 << cbs) - 1
  var ds = Math.floor(n / self.DB),
    c = (self.s << bs) & self.DM,
    i
  for (i = self.t - 1; i >= 0; --i) {
    r[i + ds + 1] = (self[i] >> cbs) | c
    c = (self[i] & bm) << bs
  }
  for (i = ds - 1; i >= 0; --i) r[i] = 0
  r[ds] = c
  r.t = self.t + ds + 1
  r.s = self.s
  r.clamp()
}

// (protected) r = this >> n
function bnpRShiftTo(n, r) {
  var self = this
  r.s = self.s
  var ds = Math.floor(n / self.DB)
  if (ds >= self.t) {
    r.t = 0
    return
  }
  var bs = n % self.DB
  var cbs = self.DB - bs
  var bm = (1 << bs) - 1
  r[0] = self[ds] >> bs
  for (var i = ds + 1; i < self.t; ++i) {
    r[i - ds - 1] |= (self[i] & bm) << cbs
    r[i - ds] = self[i] >> bs
  }
  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs
  r.t = self.t - ds
  r.clamp()
}

// (protected) r = this - a
function bnpSubTo(a, r) {
  var self = this
  var i = 0,
    c = 0,
    m = Math.min(a.t, self.t)
  while (i < m) {
    c += self[i] - a[i]
    r[i++] = c & self.DM
    c >>= self.DB
  }
  if (a.t < self.t) {
    c -= a.s
    while (i < self.t) {
      c += self[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += self.s
  } else {
    c += self.s
    while (i < a.t) {
      c -= a[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c -= a.s
  }
  r.s = (c < 0) ? -1 : 0
  if (c < -1) r[i++] = self.DV + c
  else if (c > 0) r[i++] = c
  r.t = i
  r.clamp()
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
  var x = this.abs(),
    y = a.abs()
  var i = x.t
  r.t = i + y.t
  while (--i >= 0) r[i] = 0
  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
  r.s = 0
  r.clamp()
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs()
  var i = r.t = 2 * x.t
  while (--i >= 0) r[i] = 0
  for (i = 0; i < x.t - 1; ++i) {
    var c = x.am(i, x[i], r, 2 * i, 0, 1)
    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r[i + x.t] -= x.DV
      r[i + x.t + 1] = 1
    }
  }
  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
  r.s = 0
  r.clamp()
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
  var self = this
  var pm = m.abs()
  if (pm.t <= 0) return
  var pt = self.abs()
  if (pt.t < pm.t) {
    if (q != null) q.fromInt(0)
    if (r != null) self.copyTo(r)
    return
  }
  if (r == null) r = new BigInteger()
  var y = new BigInteger(),
    ts = self.s,
    ms = m.s
  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
  if (nsh > 0) {
    pm.lShiftTo(nsh, y)
    pt.lShiftTo(nsh, r)
  } else {
    pm.copyTo(y)
    pt.copyTo(r)
  }
  var ys = y.t
  var y0 = y[ys - 1]
  if (y0 == 0) return
  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)
  var d1 = self.FV / yt,
    d2 = (1 << self.F1) / yt,
    e = 1 << self.F2
  var i = r.t,
    j = i - ys,
    t = (q == null) ? new BigInteger() : q
  y.dlShiftTo(j, t)
  if (r.compareTo(t) >= 0) {
    r[r.t++] = 1
    r.subTo(t, r)
  }
  BigInteger.ONE.dlShiftTo(ys, t)
  t.subTo(y, y); // "negative" y so we can replace sub with am later
  while (y.t < ys) y[y.t++] = 0
  while (--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
      y.dlShiftTo(j, t)
      r.subTo(t, r)
      while (r[i] < --qd) r.subTo(t, r)
    }
  }
  if (q != null) {
    r.drShiftTo(ys, q)
    if (ts != ms) BigInteger.ZERO.subTo(q, q)
  }
  r.t = ys
  r.clamp()
  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
  if (ts < 0) BigInteger.ZERO.subTo(r, r)
}

// (public) this mod a
function bnMod(a) {
  var r = new BigInteger()
  this.abs()
    .divRemTo(a, null, r)
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
  return r
}

// Modular reduction using "classic" algorithm
function Classic(m) {
  this.m = m
}

function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
  else return x
}

function cRevert(x) {
  return x
}

function cReduce(x) {
  x.divRemTo(this.m, null, x)
}

function cMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

function cSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

Classic.prototype.convert = cConvert
Classic.prototype.revert = cRevert
Classic.prototype.reduce = cReduce
Classic.prototype.mulTo = cMulTo
Classic.prototype.sqrTo = cSqrTo

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if (this.t < 1) return 0
  var x = this[0]
  if ((x & 1) == 0) return 0
  var y = x & 3; // y == 1/x mod 2^2
  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y > 0) ? this.DV - y : -y
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m
  this.mp = m.invDigit()
  this.mpl = this.mp & 0x7fff
  this.mph = this.mp >> 15
  this.um = (1 << (m.DB - 15)) - 1
  this.mt2 = 2 * m.t
}

// xR mod m
function montConvert(x) {
  var r = new BigInteger()
  x.abs()
    .dlShiftTo(this.m.t, r)
  r.divRemTo(this.m, null, r)
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
  return r
}

// x/R mod m
function montRevert(x) {
  var r = new BigInteger()
  x.copyTo(r)
  this.reduce(r)
  return r
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while (x.t <= this.mt2) // pad x so am has enough room later
    x[x.t++] = 0
  for (var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i] & 0x7fff
    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM
    // use am to combine the multiply-shift-add into one call
    j = i + this.m.t
    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
    // propagate carry
    while (x[j] >= x.DV) {
      x[j] -= x.DV
      x[++j]++
    }
  }
  x.clamp()
  x.drShiftTo(this.m.t, x)
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

Montgomery.prototype.convert = montConvert
Montgomery.prototype.revert = montRevert
Montgomery.prototype.reduce = montReduce
Montgomery.prototype.mulTo = montMulTo
Montgomery.prototype.sqrTo = montSqrTo

// (protected) true iff this is even
function bnpIsEven() {
  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
}

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
  if (e > 0xffffffff || e < 1) return BigInteger.ONE
  var r = new BigInteger(),
    r2 = new BigInteger(),
    g = z.convert(this),
    i = nbits(e) - 1
  g.copyTo(r)
  while (--i >= 0) {
    z.sqrTo(r, r2)
    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)
    else {
      var t = r
      r = r2
      r2 = t
    }
  }
  return z.revert(r)
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e, m) {
  var z
  if (e < 256 || m.isEven()) z = new Classic(m)
  else z = new Montgomery(m)
  return this.exp(e, z)
}

// protected
proto.copyTo = bnpCopyTo
proto.fromInt = bnpFromInt
proto.fromString = bnpFromString
proto.clamp = bnpClamp
proto.dlShiftTo = bnpDLShiftTo
proto.drShiftTo = bnpDRShiftTo
proto.lShiftTo = bnpLShiftTo
proto.rShiftTo = bnpRShiftTo
proto.subTo = bnpSubTo
proto.multiplyTo = bnpMultiplyTo
proto.squareTo = bnpSquareTo
proto.divRemTo = bnpDivRemTo
proto.invDigit = bnpInvDigit
proto.isEven = bnpIsEven
proto.exp = bnpExp

// public
proto.toString = bnToString
proto.negate = bnNegate
proto.abs = bnAbs
proto.compareTo = bnCompareTo
proto.bitLength = bnBitLength
proto.byteLength = bnByteLength
proto.mod = bnMod
proto.modPowInt = bnModPowInt

// (public)
function bnClone() {
  var r = new BigInteger()
  this.copyTo(r)
  return r
}

// (public) return value as integer
function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) return this[0] - this.DV
    else if (this.t == 0) return -1
  } else if (this.t == 1) return this[0]
  else if (this.t == 0) return 0
  // assumes 16 < DB < 32
  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
}

// (public) return value as byte
function bnByteValue() {
  return (this.t == 0) ? this.s : (this[0] << 24) >> 24
}

// (public) return value as short (assumes DB>=16)
function bnShortValue() {
  return (this.t == 0) ? this.s : (this[0] << 16) >> 16
}

// (protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r))
}

// (public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
  if (this.s < 0) return -1
  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0
  else return 1
}

// (protected) convert to radix string
function bnpToRadix(b) {
  if (b == null) b = 10
  if (this.signum() == 0 || b < 2 || b > 36) return "0"
  var cs = this.chunkSize(b)
  var a = Math.pow(b, cs)
  var d = nbv(a),
    y = new BigInteger(),
    z = new BigInteger(),
    r = ""
  this.divRemTo(d, y, z)
  while (y.signum() > 0) {
    r = (a + z.intValue())
      .toString(b)
      .substr(1) + r
    y.divRemTo(d, y, z)
  }
  return z.intValue()
    .toString(b) + r
}

// (protected) convert from radix string
function bnpFromRadix(s, b) {
  var self = this
  self.fromInt(0)
  if (b == null) b = 10
  var cs = self.chunkSize(b)
  var d = Math.pow(b, cs),
    mi = false,
    j = 0,
    w = 0
  for (var i = 0; i < s.length; ++i) {
    var x = intAt(s, i)
    if (x < 0) {
      if (s.charAt(i) == "-" && self.signum() == 0) mi = true
      continue
    }
    w = b * w + x
    if (++j >= cs) {
      self.dMultiply(d)
      self.dAddOffset(w, 0)
      j = 0
      w = 0
    }
  }
  if (j > 0) {
    self.dMultiply(Math.pow(b, j))
    self.dAddOffset(w, 0)
  }
  if (mi) BigInteger.ZERO.subTo(self, self)
}

// (protected) alternate constructor
function bnpFromNumber(a, b, c) {
  var self = this
  if ("number" == typeof b) {
    // new BigInteger(int,int,RNG)
    if (a < 2) self.fromInt(1)
    else {
      self.fromNumber(a, c)
      if (!self.testBit(a - 1)) // force MSB set
        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)
      if (self.isEven()) self.dAddOffset(1, 0); // force odd
      while (!self.isProbablePrime(b)) {
        self.dAddOffset(2, 0)
        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)
      }
    }
  } else {
    // new BigInteger(int,RNG)
    var x = new Array(),
      t = a & 7
    x.length = (a >> 3) + 1
    b.nextBytes(x)
    if (t > 0) x[0] &= ((1 << t) - 1)
    else x[0] = 0
    self.fromString(x, 256)
  }
}

// (public) convert to bigendian byte array
function bnToByteArray() {
  var self = this
  var i = self.t,
    r = new Array()
  r[0] = self.s
  var p = self.DB - (i * self.DB) % 8,
    d, k = 0
  if (i-- > 0) {
    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
      r[k++] = d | (self.s << (self.DB - p))
    while (i >= 0) {
      if (p < 8) {
        d = (self[i] & ((1 << p) - 1)) << (8 - p)
        d |= self[--i] >> (p += self.DB - 8)
      } else {
        d = (self[i] >> (p -= 8)) & 0xff
        if (p <= 0) {
          p += self.DB
          --i
        }
      }
      if ((d & 0x80) != 0) d |= -256
      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k
      if (k > 0 || d != self.s) r[k++] = d
    }
  }
  return r
}

function bnEquals(a) {
  return (this.compareTo(a) == 0)
}

function bnMin(a) {
  return (this.compareTo(a) < 0) ? this : a
}

function bnMax(a) {
  return (this.compareTo(a) > 0) ? this : a
}

// (protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
  var self = this
  var i, f, m = Math.min(a.t, self.t)
  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])
  if (a.t < self.t) {
    f = a.s & self.DM
    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)
    r.t = self.t
  } else {
    f = self.s & self.DM
    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])
    r.t = a.t
  }
  r.s = op(self.s, a.s)
  r.clamp()
}

// (public) this & a
function op_and(x, y) {
  return x & y
}

function bnAnd(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_and, r)
  return r
}

// (public) this | a
function op_or(x, y) {
  return x | y
}

function bnOr(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_or, r)
  return r
}

// (public) this ^ a
function op_xor(x, y) {
  return x ^ y
}

function bnXor(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_xor, r)
  return r
}

// (public) this & ~a
function op_andnot(x, y) {
  return x & ~y
}

function bnAndNot(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_andnot, r)
  return r
}

// (public) ~this
function bnNot() {
  var r = new BigInteger()
  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]
  r.t = this.t
  r.s = ~this.s
  return r
}

// (public) this << n
function bnShiftLeft(n) {
  var r = new BigInteger()
  if (n < 0) this.rShiftTo(-n, r)
  else this.lShiftTo(n, r)
  return r
}

// (public) this >> n
function bnShiftRight(n) {
  var r = new BigInteger()
  if (n < 0) this.lShiftTo(-n, r)
  else this.rShiftTo(n, r)
  return r
}

// return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
  if (x == 0) return -1
  var r = 0
  if ((x & 0xffff) == 0) {
    x >>= 16
    r += 16
  }
  if ((x & 0xff) == 0) {
    x >>= 8
    r += 8
  }
  if ((x & 0xf) == 0) {
    x >>= 4
    r += 4
  }
  if ((x & 3) == 0) {
    x >>= 2
    r += 2
  }
  if ((x & 1) == 0)++r
  return r
}

// (public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
  for (var i = 0; i < this.t; ++i)
    if (this[i] != 0) return i * this.DB + lbit(this[i])
  if (this.s < 0) return this.t * this.DB
  return -1
}

// return number of 1 bits in x
function cbit(x) {
  var r = 0
  while (x != 0) {
    x &= x - 1
    ++r
  }
  return r
}

// (public) return number of set bits
function bnBitCount() {
  var r = 0,
    x = this.s & this.DM
  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)
  return r
}

// (public) true iff nth bit is set
function bnTestBit(n) {
  var j = Math.floor(n / this.DB)
  if (j >= this.t) return (this.s != 0)
  return ((this[j] & (1 << (n % this.DB))) != 0)
}

// (protected) this op (1<<n)
function bnpChangeBit(n, op) {
  var r = BigInteger.ONE.shiftLeft(n)
  this.bitwiseTo(r, op, r)
  return r
}

// (public) this | (1<<n)
function bnSetBit(n) {
  return this.changeBit(n, op_or)
}

// (public) this & ~(1<<n)
function bnClearBit(n) {
  return this.changeBit(n, op_andnot)
}

// (public) this ^ (1<<n)
function bnFlipBit(n) {
  return this.changeBit(n, op_xor)
}

// (protected) r = this + a
function bnpAddTo(a, r) {
  var self = this

  var i = 0,
    c = 0,
    m = Math.min(a.t, self.t)
  while (i < m) {
    c += self[i] + a[i]
    r[i++] = c & self.DM
    c >>= self.DB
  }
  if (a.t < self.t) {
    c += a.s
    while (i < self.t) {
      c += self[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += self.s
  } else {
    c += self.s
    while (i < a.t) {
      c += a[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += a.s
  }
  r.s = (c < 0) ? -1 : 0
  if (c > 0) r[i++] = c
  else if (c < -1) r[i++] = self.DV + c
  r.t = i
  r.clamp()
}

// (public) this + a
function bnAdd(a) {
  var r = new BigInteger()
  this.addTo(a, r)
  return r
}

// (public) this - a
function bnSubtract(a) {
  var r = new BigInteger()
  this.subTo(a, r)
  return r
}

// (public) this * a
function bnMultiply(a) {
  var r = new BigInteger()
  this.multiplyTo(a, r)
  return r
}

// (public) this^2
function bnSquare() {
  var r = new BigInteger()
  this.squareTo(r)
  return r
}

// (public) this / a
function bnDivide(a) {
  var r = new BigInteger()
  this.divRemTo(a, r, null)
  return r
}

// (public) this % a
function bnRemainder(a) {
  var r = new BigInteger()
  this.divRemTo(a, null, r)
  return r
}

// (public) [this/a,this%a]
function bnDivideAndRemainder(a) {
  var q = new BigInteger(),
    r = new BigInteger()
  this.divRemTo(a, q, r)
  return new Array(q, r)
}

// (protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
  ++this.t
  this.clamp()
}

// (protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
  if (n == 0) return
  while (this.t <= w) this[this.t++] = 0
  this[w] += n
  while (this[w] >= this.DV) {
    this[w] -= this.DV
    if (++w >= this.t) this[this.t++] = 0
    ++this[w]
  }
}

// A "null" reducer
function NullExp() {}

function nNop(x) {
  return x
}

function nMulTo(x, y, r) {
  x.multiplyTo(y, r)
}

function nSqrTo(x, r) {
  x.squareTo(r)
}

NullExp.prototype.convert = nNop
NullExp.prototype.revert = nNop
NullExp.prototype.mulTo = nMulTo
NullExp.prototype.sqrTo = nSqrTo

// (public) this^e
function bnPow(e) {
  return this.exp(e, new NullExp())
}

// (protected) r = lower n words of "this * a", a.t <= n
// "this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
  var i = Math.min(this.t + a.t, n)
  r.s = 0; // assumes a,this >= 0
  r.t = i
  while (i > 0) r[--i] = 0
  var j
  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)
  r.clamp()
}

// (protected) r = "this * a" without lower n words, n > 0
// "this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
  --n
  var i = r.t = this.t + a.t - n
  r.s = 0; // assumes a,this >= 0
  while (--i >= 0) r[i] = 0
  for (i = Math.max(n - this.t, 0); i < a.t; ++i)
    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
  r.clamp()
  r.drShiftTo(1, r)
}

// Barrett modular reduction
function Barrett(m) {
  // setup Barrett
  this.r2 = new BigInteger()
  this.q3 = new BigInteger()
  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
  this.mu = this.r2.divide(m)
  this.m = m
}

function barrettConvert(x) {
  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)
  else if (x.compareTo(this.m) < 0) return x
  else {
    var r = new BigInteger()
    x.copyTo(r)
    this.reduce(r)
    return r
  }
}

function barrettRevert(x) {
  return x
}

// x = x mod m (HAC 14.42)
function barrettReduce(x) {
  var self = this
  x.drShiftTo(self.m.t - 1, self.r2)
  if (x.t > self.m.t + 1) {
    x.t = self.m.t + 1
    x.clamp()
  }
  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)
  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)
  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)
  x.subTo(self.r2, x)
  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)
}

// r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

// r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

Barrett.prototype.convert = barrettConvert
Barrett.prototype.revert = barrettRevert
Barrett.prototype.reduce = barrettReduce
Barrett.prototype.mulTo = barrettMulTo
Barrett.prototype.sqrTo = barrettSqrTo

// (public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
  var i = e.bitLength(),
    k, r = nbv(1),
    z
  if (i <= 0) return r
  else if (i < 18) k = 1
  else if (i < 48) k = 3
  else if (i < 144) k = 4
  else if (i < 768) k = 5
  else k = 6
  if (i < 8)
    z = new Classic(m)
  else if (m.isEven())
    z = new Barrett(m)
  else
    z = new Montgomery(m)

  // precomputation
  var g = new Array(),
    n = 3,
    k1 = k - 1,
    km = (1 << k) - 1
  g[1] = z.convert(this)
  if (k > 1) {
    var g2 = new BigInteger()
    z.sqrTo(g[1], g2)
    while (n <= km) {
      g[n] = new BigInteger()
      z.mulTo(g2, g[n - 2], g[n])
      n += 2
    }
  }

  var j = e.t - 1,
    w, is1 = true,
    r2 = new BigInteger(),
    t
  i = nbits(e[j]) - 1
  while (j >= 0) {
    if (i >= k1) w = (e[j] >> (i - k1)) & km
    else {
      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)
    }

    n = k
    while ((w & 1) == 0) {
      w >>= 1
      --n
    }
    if ((i -= n) < 0) {
      i += this.DB
      --j
    }
    if (is1) { // ret == 1, don't bother squaring or multiplying it
      g[w].copyTo(r)
      is1 = false
    } else {
      while (n > 1) {
        z.sqrTo(r, r2)
        z.sqrTo(r2, r)
        n -= 2
      }
      if (n > 0) z.sqrTo(r, r2)
      else {
        t = r
        r = r2
        r2 = t
      }
      z.mulTo(r2, g[w], r)
    }

    while (j >= 0 && (e[j] & (1 << i)) == 0) {
      z.sqrTo(r, r2)
      t = r
      r = r2
      r2 = t
      if (--i < 0) {
        i = this.DB - 1
        --j
      }
    }
  }
  return z.revert(r)
}

// (public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
  var x = (this.s < 0) ? this.negate() : this.clone()
  var y = (a.s < 0) ? a.negate() : a.clone()
  if (x.compareTo(y) < 0) {
    var t = x
    x = y
    y = t
  }
  var i = x.getLowestSetBit(),
    g = y.getLowestSetBit()
  if (g < 0) return x
  if (i < g) g = i
  if (g > 0) {
    x.rShiftTo(g, x)
    y.rShiftTo(g, y)
  }
  while (x.signum() > 0) {
    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)
    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)
    if (x.compareTo(y) >= 0) {
      x.subTo(y, x)
      x.rShiftTo(1, x)
    } else {
      y.subTo(x, y)
      y.rShiftTo(1, y)
    }
  }
  if (g > 0) y.lShiftTo(g, y)
  return y
}

// (protected) this % n, n < 2^26
function bnpModInt(n) {
  if (n <= 0) return 0
  var d = this.DV % n,
    r = (this.s < 0) ? n - 1 : 0
  if (this.t > 0)
    if (d == 0) r = this[0] % n
    else
      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
  return r
}

// (public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
  var ac = m.isEven()
  if (this.signum() === 0) throw new Error('division by zero')
  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO
  var u = m.clone(),
    v = this.clone()
  var a = nbv(1),
    b = nbv(0),
    c = nbv(0),
    d = nbv(1)
  while (u.signum() != 0) {
    while (u.isEven()) {
      u.rShiftTo(1, u)
      if (ac) {
        if (!a.isEven() || !b.isEven()) {
          a.addTo(this, a)
          b.subTo(m, b)
        }
        a.rShiftTo(1, a)
      } else if (!b.isEven()) b.subTo(m, b)
      b.rShiftTo(1, b)
    }
    while (v.isEven()) {
      v.rShiftTo(1, v)
      if (ac) {
        if (!c.isEven() || !d.isEven()) {
          c.addTo(this, c)
          d.subTo(m, d)
        }
        c.rShiftTo(1, c)
      } else if (!d.isEven()) d.subTo(m, d)
      d.rShiftTo(1, d)
    }
    if (u.compareTo(v) >= 0) {
      u.subTo(v, u)
      if (ac) a.subTo(c, a)
      b.subTo(d, b)
    } else {
      v.subTo(u, v)
      if (ac) c.subTo(a, c)
      d.subTo(b, d)
    }
  }
  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO
  while (d.compareTo(m) >= 0) d.subTo(m, d)
  while (d.signum() < 0) d.addTo(m, d)
  return d
}

var lowprimes = [
  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
]

var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]

// (public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
  var i, x = this.abs()
  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
    for (i = 0; i < lowprimes.length; ++i)
      if (x[0] == lowprimes[i]) return true
    return false
  }
  if (x.isEven()) return false
  i = 1
  while (i < lowprimes.length) {
    var m = lowprimes[i],
      j = i + 1
    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]
    m = x.modInt(m)
    while (i < j) if (m % lowprimes[i++] == 0) return false
  }
  return x.millerRabin(t)
}

// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger.ONE)
  var k = n1.getLowestSetBit()
  if (k <= 0) return false
  var r = n1.shiftRight(k)
  t = (t + 1) >> 1
  if (t > lowprimes.length) t = lowprimes.length
  var a = new BigInteger(null)
  var j, bases = []
  for (var i = 0; i < t; ++i) {
    for (;;) {
      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]
      if (bases.indexOf(j) == -1) break
    }
    bases.push(j)
    a.fromInt(j)
    var y = a.modPow(r, this)
    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
      var j = 1
      while (j++ < k && y.compareTo(n1) != 0) {
        y = y.modPowInt(2, this)
        if (y.compareTo(BigInteger.ONE) == 0) return false
      }
      if (y.compareTo(n1) != 0) return false
    }
  }
  return true
}

// protected
proto.chunkSize = bnpChunkSize
proto.toRadix = bnpToRadix
proto.fromRadix = bnpFromRadix
proto.fromNumber = bnpFromNumber
proto.bitwiseTo = bnpBitwiseTo
proto.changeBit = bnpChangeBit
proto.addTo = bnpAddTo
proto.dMultiply = bnpDMultiply
proto.dAddOffset = bnpDAddOffset
proto.multiplyLowerTo = bnpMultiplyLowerTo
proto.multiplyUpperTo = bnpMultiplyUpperTo
proto.modInt = bnpModInt
proto.millerRabin = bnpMillerRabin

// public
proto.clone = bnClone
proto.intValue = bnIntValue
proto.byteValue = bnByteValue
proto.shortValue = bnShortValue
proto.signum = bnSigNum
proto.toByteArray = bnToByteArray
proto.equals = bnEquals
proto.min = bnMin
proto.max = bnMax
proto.and = bnAnd
proto.or = bnOr
proto.xor = bnXor
proto.andNot = bnAndNot
proto.not = bnNot
proto.shiftLeft = bnShiftLeft
proto.shiftRight = bnShiftRight
proto.getLowestSetBit = bnGetLowestSetBit
proto.bitCount = bnBitCount
proto.testBit = bnTestBit
proto.setBit = bnSetBit
proto.clearBit = bnClearBit
proto.flipBit = bnFlipBit
proto.add = bnAdd
proto.subtract = bnSubtract
proto.multiply = bnMultiply
proto.divide = bnDivide
proto.remainder = bnRemainder
proto.divideAndRemainder = bnDivideAndRemainder
proto.modPow = bnModPow
proto.modInverse = bnModInverse
proto.pow = bnPow
proto.gcd = bnGCD
proto.isProbablePrime = bnIsProbablePrime

// JSBN-specific extension
proto.square = bnSquare

// constants
BigInteger.ZERO = nbv(0)
BigInteger.ONE = nbv(1)
BigInteger.valueOf = nbv

module.exports = BigInteger

},{"../package.json":32}],30:[function(require,module,exports){
(function (Buffer){
// FIXME: Kind of a weird way to throw exceptions, consider removing
var assert = require('assert')
var BigInteger = require('./bigi')

/**
 * Turns a byte array into a big integer.
 *
 * This function will interpret a byte array as a big integer in big
 * endian notation.
 */
BigInteger.fromByteArrayUnsigned = function(byteArray) {
  // BigInteger expects a DER integer conformant byte array
  if (byteArray[0] & 0x80) {
    return new BigInteger([0].concat(byteArray))
  }

  return new BigInteger(byteArray)
}

/**
 * Returns a byte array representation of the big integer.
 *
 * This returns the absolute of the contained value in big endian
 * form. A value of zero results in an empty array.
 */
BigInteger.prototype.toByteArrayUnsigned = function() {
  var byteArray = this.toByteArray()
  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
}

BigInteger.fromDERInteger = function(byteArray) {
  return new BigInteger(byteArray)
}

/*
 * Converts BigInteger to a DER integer representation.
 *
 * The format for this value uses the most significant bit as a sign
 * bit.  If the most significant bit is already set and the integer is
 * positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray

BigInteger.fromBuffer = function(buffer) {
  // BigInteger expects a DER integer conformant byte array
  if (buffer[0] & 0x80) {
    var byteArray = Array.prototype.slice.call(buffer)

    return new BigInteger([0].concat(byteArray))
  }

  return new BigInteger(buffer)
}

BigInteger.fromHex = function(hex) {
  if (hex === '') return BigInteger.ZERO

  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
  assert.equal(hex.length % 2, 0, 'Incomplete hex')
  return new BigInteger(hex, 16)
}

BigInteger.prototype.toBuffer = function(size) {
  var byteArray = this.toByteArrayUnsigned()
  var zeros = []

  var padding = size - byteArray.length
  while (zeros.length < padding) zeros.push(0)

  return new Buffer(zeros.concat(byteArray))
}

BigInteger.prototype.toHex = function(size) {
  return this.toBuffer(size).toString('hex')
}

}).call(this,require("buffer").Buffer)
},{"./bigi":29,"assert":26,"buffer":71}],31:[function(require,module,exports){
var BigInteger = require('./bigi')

//addons
require('./convert')

module.exports = BigInteger
},{"./bigi":29,"./convert":30}],32:[function(require,module,exports){
module.exports={
  "name": "bigi",
  "version": "1.4.2",
  "description": "Big integers.",
  "keywords": [
    "cryptography",
    "math",
    "bitcoin",
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "integer",
    "int",
    "number",
    "biginteger",
    "bigint",
    "bignumber",
    "decimal",
    "float"
  ],
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "jshint": "^2.5.1",
    "mocha": "^2.1.0",
    "mochify": "^2.1.0"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/bigi",
    "type": "git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "browser-test": "./node_modules/.bin/mochify --wd -R spec",
    "test": "./node_modules/.bin/_mocha -- test/*.js",
    "jshint": "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
    "unit": "./node_modules/.bin/mocha",
    "coverage": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
  },
  "dependencies": {},
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/latest",
      "chrome/latest",
      "safari/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  }
}

},{}],33:[function(require,module,exports){
// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use

var Buffer = require('safe-buffer').Buffer

function check (buffer) {
  if (buffer.length < 8) return false
  if (buffer.length > 72) return false
  if (buffer[0] !== 0x30) return false
  if (buffer[1] !== buffer.length - 2) return false
  if (buffer[2] !== 0x02) return false

  var lenR = buffer[3]
  if (lenR === 0) return false
  if (5 + lenR >= buffer.length) return false
  if (buffer[4 + lenR] !== 0x02) return false

  var lenS = buffer[5 + lenR]
  if (lenS === 0) return false
  if ((6 + lenR + lenS) !== buffer.length) return false

  if (buffer[4] & 0x80) return false
  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

  if (buffer[lenR + 6] & 0x80) return false
  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
  return true
}

function decode (buffer) {
  if (buffer.length < 8) throw new Error('DER sequence length is too short')
  if (buffer.length > 72) throw new Error('DER sequence length is too long')
  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

  var lenR = buffer[3]
  if (lenR === 0) throw new Error('R length is zero')
  if (5 + lenR >= buffer.length) throw new Error('R length is too long')
  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

  var lenS = buffer[5 + lenR]
  if (lenS === 0) throw new Error('S length is zero')
  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

  if (buffer[4] & 0x80) throw new Error('R value is negative')
  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

  // non-BIP66 - extract R, S values
  return {
    r: buffer.slice(4, 4 + lenR),
    s: buffer.slice(6 + lenR)
  }
}

/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
function encode (r, s) {
  var lenR = r.length
  var lenS = s.length
  if (lenR === 0) throw new Error('R length is zero')
  if (lenS === 0) throw new Error('S length is zero')
  if (lenR > 33) throw new Error('R length is too long')
  if (lenS > 33) throw new Error('S length is too long')
  if (r[0] & 0x80) throw new Error('R value is negative')
  if (s[0] & 0x80) throw new Error('S value is negative')
  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

  var signature = Buffer.allocUnsafe(6 + lenR + lenS)

  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  signature[0] = 0x30
  signature[1] = signature.length - 2
  signature[2] = 0x02
  signature[3] = r.length
  r.copy(signature, 4)
  signature[4 + lenR] = 0x02
  signature[5 + lenR] = s.length
  s.copy(signature, 6 + lenR)

  return signature
}

module.exports = {
  check: check,
  decode: decode,
  encode: encode
}

},{"safe-buffer":172}],34:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":36}],35:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":36}],36:[function(require,module,exports){

},{}],37:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":172}],38:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":37,"./ghash":42,"./incr32":43,"buffer-xor":70,"cipher-base":72,"inherits":124,"safe-buffer":172}],39:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":40,"./encrypter":41,"./modes/list.json":51}],40:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":37,"./authCipher":38,"./modes":50,"./streamCipher":53,"cipher-base":72,"evp_bytestokey":108,"inherits":124,"safe-buffer":172}],41:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":37,"./authCipher":38,"./modes":50,"./streamCipher":53,"cipher-base":72,"evp_bytestokey":108,"inherits":124,"safe-buffer":172}],42:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":172}],43:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],44:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":70}],45:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":70,"safe-buffer":172}],46:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":172}],47:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":172}],48:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":43,"buffer-xor":70,"safe-buffer":172}],49:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],50:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":44,"./cfb":45,"./cfb1":46,"./cfb8":47,"./ctr":48,"./ecb":49,"./list.json":51,"./ofb":52}],51:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],52:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":71,"buffer-xor":70}],53:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":37,"cipher-base":72,"inherits":124,"safe-buffer":172}],54:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":39,"browserify-aes/modes":50,"browserify-des":55,"browserify-des/modes":56,"evp_bytestokey":108}],55:[function(require,module,exports){
(function (Buffer){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

}).call(this,require("buffer").Buffer)
},{"buffer":71,"cipher-base":72,"des.js":81,"inherits":124}],56:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],57:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":34,"buffer":71,"randombytes":154}],58:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":59}],59:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],60:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],61:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash')
var stream = require('stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
},{"./algorithms.json":59,"./sign":62,"./verify":63,"buffer":71,"create-hash":75,"inherits":124,"stream":187}],62:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
},{"./curves.json":60,"bn.js":34,"browserify-rsa":57,"buffer":71,"create-hmac":64,"elliptic":91,"parse-asn1":138}],63:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

}).call(this,require("buffer").Buffer)
},{"./curves.json":60,"bn.js":34,"buffer":71,"elliptic":91,"parse-asn1":138}],64:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":65,"cipher-base":72,"create-hash/md5":77,"inherits":124,"ripemd160":170,"safe-buffer":172,"sha.js":180}],65:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":72,"inherits":124,"safe-buffer":172}],66:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"dup":36}],67:[function(require,module,exports){
var basex = require('base-x')
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

module.exports = basex(ALPHABET)

},{"base-x":27}],68:[function(require,module,exports){
(function (Buffer){
'use strict'

var base58 = require('bs58')

module.exports = function (checksumFn) {
  // Encode a buffer as a base58-check encoded string
  function encode (payload) {
    var checksum = checksumFn(payload)

    return base58.encode(Buffer.concat([
      payload,
      checksum
    ], payload.length + 4))
  }

  function decodeRaw (buffer) {
    var payload = buffer.slice(0, -4)
    var checksum = buffer.slice(-4)
    var newChecksum = checksumFn(payload)

    if (checksum[0] ^ newChecksum[0] |
        checksum[1] ^ newChecksum[1] |
        checksum[2] ^ newChecksum[2] |
        checksum[3] ^ newChecksum[3]) return

    return payload
  }

  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
  function decodeUnsafe (string) {
    var buffer = base58.decodeUnsafe(string)
    if (!buffer) return

    return decodeRaw(buffer)
  }

  function decode (string) {
    var buffer = base58.decode(string)
    var payload = decodeRaw(buffer, checksumFn)
    if (!payload) throw new Error('Invalid checksum')
    return payload
  }

  return {
    encode: encode,
    decode: decode,
    decodeUnsafe: decodeUnsafe
  }
}

}).call(this,require("buffer").Buffer)
},{"bs58":67,"buffer":71}],69:[function(require,module,exports){
'use strict'

var createHash = require('create-hash')
var bs58checkBase = require('./base')

// SHA256(SHA256(buffer))
function sha256x2 (buffer) {
  var tmp = createHash('sha256').update(buffer).digest()
  return createHash('sha256').update(tmp).digest()
}

module.exports = bs58checkBase(sha256x2)

},{"./base":68,"create-hash":75}],70:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":71}],71:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":28,"ieee754":123}],72:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":124,"safe-buffer":172,"stream":187,"string_decoder":188}],73:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":126}],74:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":34,"buffer":71,"elliptic":91}],75:[function(require,module,exports){
(function (Buffer){
'use strict'
var inherits = require('inherits')
var md5 = require('./md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor (hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new HashNoConstructor(md5)
  if (alg === 'rmd160' || alg === 'ripemd160') return new Hash(new RIPEMD160())

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":77,"buffer":71,"cipher-base":72,"inherits":124,"ripemd160":170,"sha.js":180}],76:[function(require,module,exports){
(function (Buffer){
'use strict'
var intSize = 4
var zeroBuffer = new Buffer(intSize)
zeroBuffer.fill(0)

var charSize = 8
var hashSize = 16

function toArray (buf) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize))
    buf = Buffer.concat([buf, zeroBuffer], len)
  }

  var arr = new Array(buf.length >>> 2)
  for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
    arr[j] = buf.readInt32LE(i)
  }

  return arr
}

module.exports = function hash (buf, fn) {
  var arr = fn(toArray(buf), buf.length * charSize)
  buf = new Buffer(hashSize)
  for (var i = 0; i < arr.length; i++) {
    buf.writeInt32LE(arr[i], i << 2, true)
  }
  return buf
}

}).call(this,require("buffer").Buffer)
},{"buffer":71}],77:[function(require,module,exports){
'use strict'
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var makeHash = require('./make-hash')

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5 (x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32)
  x[(((len + 64) >>> 9) << 4) + 14] = len

  var a = 1732584193
  var b = -271733879
  var c = -1732584194
  var d = 271733878

  for (var i = 0; i < x.length; i += 16) {
    var olda = a
    var oldb = b
    var oldc = c
    var oldd = d

    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936)
    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586)
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819)
    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330)
    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897)
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426)
    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341)
    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983)
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416)
    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417)
    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063)
    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162)
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682)
    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101)
    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290)
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329)

    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510)
    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632)
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713)
    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302)
    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691)
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083)
    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335)
    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848)
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438)
    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690)
    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961)
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501)
    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467)
    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784)
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473)
    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734)

    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558)
    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463)
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562)
    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556)
    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060)
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353)
    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632)
    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640)
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174)
    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222)
    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979)
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189)
    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487)
    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835)
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520)
    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651)

    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844)
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415)
    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905)
    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055)
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571)
    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606)
    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523)
    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799)
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359)
    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744)
    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380)
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649)
    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070)
    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379)
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259)
    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551)

    a = safe_add(a, olda)
    b = safe_add(b, oldb)
    c = safe_add(c, oldc)
    d = safe_add(d, oldd)
  }

  return [a, b, c, d]
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn (q, a, b, x, s, t) {
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)
}

function md5_ff (a, b, c, d, x, s, t) {
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)
}

function md5_gg (a, b, c, d, x, s, t) {
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)
}

function md5_hh (a, b, c, d, x, s, t) {
  return md5_cmn(b ^ c ^ d, a, b, x, s, t)
}

function md5_ii (a, b, c, d, x, s, t) {
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add (x, y) {
  var lsw = (x & 0xFFFF) + (y & 0xFFFF)
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16)
  return (msw << 16) | (lsw & 0xFFFF)
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

module.exports = function md5 (buf) {
  return makeHash(buf, core_md5)
}

},{"./make-hash":76}],78:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":54,"browserify-sign":61,"browserify-sign/algos":58,"create-ecdh":74,"create-hash":75,"create-hmac":79,"diffie-hellman":87,"pbkdf2":140,"public-encrypt":148,"randombytes":154,"randomfill":155}],79:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"./legacy":80,"cipher-base":72,"create-hash/md5":77,"dup":64,"inherits":124,"ripemd160":170,"safe-buffer":172,"sha.js":180}],80:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"cipher-base":72,"dup":65,"inherits":124,"safe-buffer":172}],81:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":82,"./des/cipher":83,"./des/des":84,"./des/ede":85,"./des/utils":86}],82:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":124,"minimalistic-assert":132}],83:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":132}],84:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":81,"inherits":124,"minimalistic-assert":132}],85:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":81,"inherits":124,"minimalistic-assert":132}],86:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],87:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)
},{"./lib/dh":88,"./lib/generatePrime":89,"./lib/primes.json":90,"buffer":71}],88:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":89,"bn.js":34,"buffer":71,"miller-rabin":131,"randombytes":154}],89:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":34,"miller-rabin":131,"randombytes":154}],90:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],91:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":106,"./elliptic/curve":94,"./elliptic/curves":97,"./elliptic/ec":98,"./elliptic/eddsa":101,"./elliptic/utils":105,"brorand":35}],92:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":91,"bn.js":34}],93:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":91,"../curve":94,"bn.js":34,"inherits":124}],94:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":92,"./edwards":93,"./mont":95,"./short":96}],95:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":91,"../curve":94,"bn.js":34,"inherits":124}],96:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":91,"../curve":94,"bn.js":34,"inherits":124}],97:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":91,"./precomputed/secp256k1":104,"hash.js":110}],98:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":91,"./key":99,"./signature":100,"bn.js":34,"hmac-drbg":122}],99:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":91,"bn.js":34}],100:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":91,"bn.js":34}],101:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":91,"./key":102,"./signature":103,"hash.js":110}],102:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":91}],103:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":91,"bn.js":34}],104:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],105:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":34,"minimalistic-assert":132,"minimalistic-crypto-utils":133}],106:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.4.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  }
}

},{}],107:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;

  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === 'function')
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners(evlistener);
  }

  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],108:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":130,"safe-buffer":172}],109:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":124,"safe-buffer":172,"stream":187}],110:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":111,"./hash/hmac":112,"./hash/ripemd":113,"./hash/sha":114,"./hash/utils":121}],111:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":121,"minimalistic-assert":132}],112:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":121,"minimalistic-assert":132}],113:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":111,"./utils":121}],114:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":115,"./sha/224":116,"./sha/256":117,"./sha/384":118,"./sha/512":119}],115:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":111,"../utils":121,"./common":120}],116:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":121,"./256":117}],117:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":111,"../utils":121,"./common":120,"minimalistic-assert":132}],118:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":121,"./512":119}],119:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":111,"../utils":121,"minimalistic-assert":132}],120:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":121}],121:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":124,"minimalistic-assert":132}],122:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":110,"minimalistic-assert":132,"minimalistic-crypto-utils":133}],123:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],124:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],125:[function(require,module,exports){
(function (Buffer){
// int64-buffer.js

/*jshint -W018 */ // Confusing use of '!'.
/*jshint -W030 */ // Expected an assignment or function call and instead saw an expression.
/*jshint -W093 */ // Did you mean to return a conditional instead of an assignment?

var Uint64BE, Int64BE, Uint64LE, Int64LE;

!function(exports) {
  // constants

  var UNDEFINED = "undefined";
  var BUFFER = (UNDEFINED !== typeof Buffer) && Buffer;
  var UINT8ARRAY = (UNDEFINED !== typeof Uint8Array) && Uint8Array;
  var ARRAYBUFFER = (UNDEFINED !== typeof ArrayBuffer) && ArrayBuffer;
  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];
  var isArray = Array.isArray || _isArray;
  var BIT32 = 4294967296;
  var BIT24 = 16777216;

  // storage class

  var storage; // Array;

  // generate classes

  Uint64BE = factory("Uint64BE", true, true);
  Int64BE = factory("Int64BE", true, false);
  Uint64LE = factory("Uint64LE", false, true);
  Int64LE = factory("Int64LE", false, false);

  // class factory

  function factory(name, bigendian, unsigned) {
    var posH = bigendian ? 0 : 4;
    var posL = bigendian ? 4 : 0;
    var pos0 = bigendian ? 0 : 3;
    var pos1 = bigendian ? 1 : 2;
    var pos2 = bigendian ? 2 : 1;
    var pos3 = bigendian ? 3 : 0;
    var fromPositive = bigendian ? fromPositiveBE : fromPositiveLE;
    var fromNegative = bigendian ? fromNegativeBE : fromNegativeLE;
    var proto = Int64.prototype;
    var isName = "is" + name;
    var _isInt64 = "_" + isName;

    // properties
    proto.buffer = void 0;
    proto.offset = 0;
    proto[_isInt64] = true;

    // methods
    proto.toNumber = toNumber;
    proto.toString = toString;
    proto.toJSON = toNumber;
    proto.toArray = toArray;

    // add .toBuffer() method only when Buffer available
    if (BUFFER) proto.toBuffer = toBuffer;

    // add .toArrayBuffer() method only when Uint8Array available
    if (UINT8ARRAY) proto.toArrayBuffer = toArrayBuffer;

    // isUint64BE, isInt64BE
    Int64[isName] = isInt64;

    // CommonJS
    exports[name] = Int64;

    return Int64;

    // constructor
    function Int64(buffer, offset, value, raddix) {
      if (!(this instanceof Int64)) return new Int64(buffer, offset, value, raddix);
      return init(this, buffer, offset, value, raddix);
    }

    // isUint64BE, isInt64BE
    function isInt64(b) {
      return !!(b && b[_isInt64]);
    }

    // initializer
    function init(that, buffer, offset, value, raddix) {
      if (UINT8ARRAY && ARRAYBUFFER) {
        if (buffer instanceof ARRAYBUFFER) buffer = new UINT8ARRAY(buffer);
        if (value instanceof ARRAYBUFFER) value = new UINT8ARRAY(value);
      }

      // Int64BE() style
      if (!buffer && !offset && !value && !storage) {
        // shortcut to initialize with zero
        that.buffer = newArray(ZERO, 0);
        return;
      }

      // Int64BE(value, raddix) style
      if (!isValidBuffer(buffer, offset)) {
        var _storage = storage || Array;
        raddix = offset;
        value = buffer;
        offset = 0;
        buffer = new _storage(8);
      }

      that.buffer = buffer;
      that.offset = offset |= 0;

      // Int64BE(buffer, offset) style
      if (UNDEFINED === typeof value) return;

      // Int64BE(buffer, offset, value, raddix) style
      if ("string" === typeof value) {
        fromString(buffer, offset, value, raddix || 10);
      } else if (isValidBuffer(value, raddix)) {
        fromArray(buffer, offset, value, raddix);
      } else if ("number" === typeof raddix) {
        writeInt32(buffer, offset + posH, value); // high
        writeInt32(buffer, offset + posL, raddix); // low
      } else if (value > 0) {
        fromPositive(buffer, offset, value); // positive
      } else if (value < 0) {
        fromNegative(buffer, offset, value); // negative
      } else {
        fromArray(buffer, offset, ZERO, 0); // zero, NaN and others
      }
    }

    function fromString(buffer, offset, str, raddix) {
      var pos = 0;
      var len = str.length;
      var high = 0;
      var low = 0;
      if (str[0] === "-") pos++;
      var sign = pos;
      while (pos < len) {
        var chr = parseInt(str[pos++], raddix);
        if (!(chr >= 0)) break; // NaN
        low = low * raddix + chr;
        high = high * raddix + Math.floor(low / BIT32);
        low %= BIT32;
      }
      if (sign) {
        high = ~high;
        if (low) {
          low = BIT32 - low;
        } else {
          high++;
        }
      }
      writeInt32(buffer, offset + posH, high);
      writeInt32(buffer, offset + posL, low);
    }

    function toNumber() {
      var buffer = this.buffer;
      var offset = this.offset;
      var high = readInt32(buffer, offset + posH);
      var low = readInt32(buffer, offset + posL);
      if (!unsigned) high |= 0; // a trick to get signed
      return high ? (high * BIT32 + low) : low;
    }

    function toString(radix) {
      var buffer = this.buffer;
      var offset = this.offset;
      var high = readInt32(buffer, offset + posH);
      var low = readInt32(buffer, offset + posL);
      var str = "";
      var sign = !unsigned && (high & 0x80000000);
      if (sign) {
        high = ~high;
        low = BIT32 - low;
      }
      radix = radix || 10;
      while (1) {
        var mod = (high % radix) * BIT32 + low;
        high = Math.floor(high / radix);
        low = Math.floor(mod / radix);
        str = (mod % radix).toString(radix) + str;
        if (!high && !low) break;
      }
      if (sign) {
        str = "-" + str;
      }
      return str;
    }

    function writeInt32(buffer, offset, value) {
      buffer[offset + pos3] = value & 255;
      value = value >> 8;
      buffer[offset + pos2] = value & 255;
      value = value >> 8;
      buffer[offset + pos1] = value & 255;
      value = value >> 8;
      buffer[offset + pos0] = value & 255;
    }

    function readInt32(buffer, offset) {
      return (buffer[offset + pos0] * BIT24) +
        (buffer[offset + pos1] << 16) +
        (buffer[offset + pos2] << 8) +
        buffer[offset + pos3];
    }
  }

  function toArray(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    storage = null; // Array
    if (raw !== false && offset === 0 && buffer.length === 8 && isArray(buffer)) return buffer;
    return newArray(buffer, offset);
  }

  function toBuffer(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    storage = BUFFER;
    if (raw !== false && offset === 0 && buffer.length === 8 && Buffer.isBuffer(buffer)) return buffer;
    var dest = new BUFFER(8);
    fromArray(dest, 0, buffer, offset);
    return dest;
  }

  function toArrayBuffer(raw) {
    var buffer = this.buffer;
    var offset = this.offset;
    var arrbuf = buffer.buffer;
    storage = UINT8ARRAY;
    if (raw !== false && offset === 0 && (arrbuf instanceof ARRAYBUFFER) && arrbuf.byteLength === 8) return arrbuf;
    var dest = new UINT8ARRAY(8);
    fromArray(dest, 0, buffer, offset);
    return dest.buffer;
  }

  function isValidBuffer(buffer, offset) {
    var len = buffer && buffer.length;
    offset |= 0;
    return len && (offset + 8 <= len) && ("string" !== typeof buffer[offset]);
  }

  function fromArray(destbuf, destoff, srcbuf, srcoff) {
    destoff |= 0;
    srcoff |= 0;
    for (var i = 0; i < 8; i++) {
      destbuf[destoff++] = srcbuf[srcoff++] & 255;
    }
  }

  function newArray(buffer, offset) {
    return Array.prototype.slice.call(buffer, offset, offset + 8);
  }

  function fromPositiveBE(buffer, offset, value) {
    var pos = offset + 8;
    while (pos > offset) {
      buffer[--pos] = value & 255;
      value /= 256;
    }
  }

  function fromNegativeBE(buffer, offset, value) {
    var pos = offset + 8;
    value++;
    while (pos > offset) {
      buffer[--pos] = ((-value) & 255) ^ 255;
      value /= 256;
    }
  }

  function fromPositiveLE(buffer, offset, value) {
    var end = offset + 8;
    while (offset < end) {
      buffer[offset++] = value & 255;
      value /= 256;
    }
  }

  function fromNegativeLE(buffer, offset, value) {
    var end = offset + 8;
    value++;
    while (offset < end) {
      buffer[offset++] = ((-value) & 255) ^ 255;
      value /= 256;
    }
  }

  // https://github.com/retrofox/is-array
  function _isArray(val) {
    return !!val && "[object Array]" == Object.prototype.toString.call(val);
  }

}(typeof exports === 'object' && typeof exports.nodeName !== 'string' ? exports : (this || {}));

}).call(this,require("buffer").Buffer)
},{"buffer":71}],126:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],127:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],128:[function(require,module,exports){
(function (process){
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports"], factory);
    } else if (typeof exports === 'object' &&
               typeof exports.nodeName !== 'string') {
        factory(exports);
    } else {
        factory(root.libsodium = {});
    }
})(this, (function (exports) {
    var Module = exports;
var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=console.log;if(!Module["printErr"])Module["printErr"]=console.warn;var nodeFS;var nodePath;Module["read"]=function shell_read(filename,binary){if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function shell_read(){throw"no read() available"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof quit==="function"){Module["quit"]=(function(status,toThrow){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function shell_print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function shell_printErr(x){console.warn(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){abort("NO_DYNAMIC_EXECUTION=1 was set, cannot eval")}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}if(!Module["quit"]){Module["quit"]=(function(status,toThrow){throw toThrow})}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var Runtime={setTempRet0:(function(value){tempRet0=value;return value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[null,null,null,null,null,null,null,null],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 1*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-1)/1]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){if(sig.length===1){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func)}}else if(sig.length===2){sigCache[func]=function dynCall_wrapper(arg){return Runtime.dynCall(sig,func,[arg])}}else{sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,Array.prototype.slice.call(arguments))}}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=(ret+size+15|0)&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];if(!func){abort("NO_DYNAMIC_EXECUTION=1 was set, cannot eval")}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=Runtime.stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};cwrap=function cwrap(ident,returnType,argTypes){return(function(){return ccall(ident,returnType,argTypes,arguments)})}}))();Module["ccall"]=ccall;Module["cwrap"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:Runtime.staticAlloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function demangle(func){var __cxa_demangle_func=Module["___cxa_demangle"]||Module["__cxa_demangle"];if(__cxa_demangle_func){try{var s=func.substr(1);var len=lengthBytesUTF8(s)+1;var buf=_malloc(len);stringToUTF8(s,buf,len);var status=_malloc(4);var ret=__cxa_demangle_func(buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}return func}Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return func}function demangleAll(text){var regex=/__Z[\w\d_]+/g;return text.replace(regex,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}Module["stackTrace"]=stackTrace;var PAGE_SIZE=16384;var HEAP,buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||67108864;if(TOTAL_MEMORY<TOTAL_STACK)Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{{buffer=new ArrayBuffer(TOTAL_MEMORY)}}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){Runtime.warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");var lastChar,end;if(dontAddNull){end=buffer+lengthBytesUTF8(string);lastChar=HEAP8[end]}stringToUTF8(string,buffer,Infinity);if(dontAddNull)HEAP8[end]=lastChar}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];if(!Math["trunc"])Math["trunc"]=(function(x){return x<0?Math.ceil(x):Math.floor(x)});Math.trunc=Math["trunc"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_round=Math.round;var Math_min=Math.min;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var ASM_CONSTS=[(function(){{return Module.getRandomValue()}}),(function(){{if(Module.getRandomValue===undefined){try{var window_="object"===typeof window?window:self,crypto_=typeof window_.crypto!=="undefined"?window_.crypto:window_.msCrypto,randomValuesStandard=(function(){var buf=new Uint32Array(1);crypto_.getRandomValues(buf);return buf[0]>>>0});randomValuesStandard();Module.getRandomValue=randomValuesStandard}catch(e){try{var crypto=require("crypto"),randomValueNodeJS=(function(){var buf=crypto.randomBytes(4);return(buf[0]<<24|buf[1]<<16|buf[2]<<8|buf[3])>>>0});randomValueNodeJS();Module.getRandomValue=randomValueNodeJS}catch(e){throw"No secure random number generator found"}}}}})];function _emscripten_asm_const_i(code){return ASM_CONSTS[code]()}function _emscripten_asm_const_v(code){return ASM_CONSTS[code]()}STATIC_BASE=Runtime.GLOBAL_BASE;STATICTOP=STATIC_BASE+36032;__ATINIT__.push();allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,232,149,143,194,178,39,176,69,195,244,137,242,239,152,240,213,223,172,5,211,198,51,57,177,56,2,136,109,83,252,5,199,23,106,112,61,77,216,79,186,60,11,118,13,16,103,15,42,32,83,250,44,57,204,198,78,199,253,119,146,172,3,122,19,232,149,143,194,178,39,176,69,195,244,137,242,239,152,240,213,223,172,5,211,198,51,57,177,56,2,136,109,83,252,133,180,23,106,112,61,77,216,79,186,60,11,118,13,16,103,15,42,32,83,250,44,57,204,198,78,199,253,119,146,172,3,250,236,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,237,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,238,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,217,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,218,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,219,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,8,201,188,243,103,230,9,106,59,167,202,132,133,174,103,187,43,248,148,254,114,243,110,60,241,54,29,95,58,245,79,165,209,130,230,173,127,82,14,81,31,108,62,43,140,104,5,155,107,189,65,251,171,217,131,31,121,33,126,19,25,205,224,91,34,174,40,215,152,47,138,66,205,101,239,35,145,68,55,113,47,59,77,236,207,251,192,181,188,219,137,129,165,219,181,233,56,181,72,243,91,194,86,57,25,208,5,182,241,17,241,89,155,79,25,175,164,130,63,146,24,129,109,218,213,94,28,171,66,2,3,163,152,170,7,216,190,111,112,69,1,91,131,18,140,178,228,78,190,133,49,36,226,180,255,213,195,125,12,85,111,137,123,242,116,93,190,114,177,150,22,59,254,177,222,128,53,18,199,37,167,6,220,155,148,38,105,207,116,241,155,193,210,74,241,158,193,105,155,228,227,37,79,56,134,71,190,239,181,213,140,139,198,157,193,15,101,156,172,119,204,161,12,36,117,2,43,89,111,44,233,45,131,228,166,110,170,132,116,74,212,251,65,189,220,169,176,92,181,83,17,131,218,136,249,118,171,223,102,238,82,81,62,152,16,50,180,45,109,198,49,168,63,33,251,152,200,39,3,176,228,14,239,190,199,127,89,191,194,143,168,61,243,11,224,198,37,167,10,147,71,145,167,213,111,130,3,224,81,99,202,6,112,110,14,10,103,41,41,20,252,47,210,70,133,10,183,39,38,201,38,92,56,33,27,46,237,42,196,90,252,109,44,77,223,179,149,157,19,13,56,83,222,99,175,139,84,115,10,101,168,178,119,60,187,10,106,118,230,174,237,71,46,201,194,129,59,53,130,20,133,44,114,146,100,3,241,76,161,232,191,162,1,48,66,188,75,102,26,168,145,151,248,208,112,139,75,194,48,190,84,6,163,81,108,199,24,82,239,214,25,232,146,209,16,169,101,85,36,6,153,214,42,32,113,87,133,53,14,244,184,209,187,50,112,160,106,16,200,208,210,184,22,193,164,25,83,171,65,81,8,108,55,30,153,235,142,223,76,119,72,39,168,72,155,225,181,188,176,52,99,90,201,197,179,12,28,57,203,138,65,227,74,170,216,78,115,227,99,119,79,202,156,91,163,184,178,214,243,111,46,104,252,178,239,93,238,130,143,116,96,47,23,67,111,99,165,120,114,171,240,161,20,120,200,132,236,57,100,26,8,2,199,140,40,30,99,35,250,255,190,144,233,189,130,222,235,108,80,164,21,121,198,178,247,163,249,190,43,83,114,227,242,120,113,198,156,97,38,234,206,62,39,202,7,194,192,33,199,184,134,209,30,235,224,205,214,125,218,234,120,209,110,238,127,79,125,245,186,111,23,114,170,103,240,6,166,152,200,162,197,125,99,10,174,13,249,190,4,152,63,17,27,71,28,19,53,11,113,27,132,125,4,35,245,119,219,40,147,36,199,64,123,171,202,50,188,190,201,21,10,190,158,60,76,13,16,156,196,103,29,67,182,66,62,203,190,212,197,76,42,126,101,252,156,41,127,89,236,250,214,58,171,111,203,95,23,88,71,74,140,25,68,108,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,182,120,89,255,133,114,211,0,189,110,21,255,15,10,106,0,41,192,1,0,152,232,121,255,188,60,160,255,153,113,206,255,0,183,226,254,180,13,72,255,176,160,14,254,211,201,134,255,158,24,143,0,127,105,53,0,96,12,189,0,167,215,251,255,159,76,128,254,106,101,225,255,30,252,4,0,146,12,174,0,89,241,178,254,10,229,166,255,123,221,42,254,30,20,212,0,82,128,3,0,48,209,243,0,119,121,64,255,50,227,156,255,0,110,197,1,103,27,144,0,133,59,140,1,189,241,36,255,248,37,195,1,96,220,55,0,183,76,62,255,195,66,61,0,50,76,164,1,225,164,76,255,76,61,163,255,117,62,31,0,81,145,64,255,118,65,14,0,162,115,214,255,6,138,46,0,124,230,244,255,10,138,143,0,52,26,194,0,184,244,76,0,129,143,41,1,190,244,19,255,123,170,122,255,98,129,68,0,121,213,147,0,86,101,30,255,161,103,155,0,140,89,67,255,239,229,190,1,67,11,181,0,198,240,137,254,238,69,188,255,67,151,238,0,19,42,108,255,229,85,113,1,50,68,135,255,17,106,9,0,50,103,1,255,80,1,168,1,35,152,30,255,16,168,185,1,56,89,232,255,101,210,252,0,41,250,71,0,204,170,79,255,14,46,239,255,80,77,239,0,189,214,75,255,17,141,249,0,38,80,76,255,190,85,117,0,86,228,170,0,156,216,208,1,195,207,164,255,150,66,76,255,175,225,16,255,141,80,98,1,76,219,242,0,198,162,114,0,46,218,152,0,155,43,241,254,155,160,104,255,51,187,165,0,2,17,175,0,66,84,160,1,247,58,30,0,35,65,53,254,69,236,191,0,45,134,245,1,163,123,221,0,32,110,20,255,52,23,165,0,186,214,71,0,233,176,96,0,242,239,54,1,57,89,138,0,83,0,84,255,136,160,100,0,92,142,120,254,104,124,190,0,181,177,62,255,250,41,85,0,152,130,42,1,96,252,246,0,151,151,63,254,239,133,62,0,32,56,156,0,45,167,189,255,142,133,179,1,131,86,211,0,187,179,150,254,250,170,14,255,210,163,78,0,37,52,151,0,99,77,26,0,238,156,213,255,213,192,209,1,73,46,84,0,20,65,41,1,54,206,79,0,201,131,146,254,170,111,24,255,177,33,50,254,171,38,203,255,78,247,116,0,209,221,153,0,133,128,178,1,58,44,25,0,201,39,59,1,189,19,252,0,49,229,210,1,117,187,117,0,181,179,184,1,0,114,219,0,48,94,147,0,245,41,56,0,125,13,204,254,244,173,119,0,44,221,32,254,84,234,20,0,249,160,198,1,236,126,234,255,47,99,168,254,170,226,153,255,102,179,216,0,226,141,122,255,122,66,153,254,182,245,134,0,227,228,25,1,214,57,235,255,216,173,56,255,181,231,210,0,119,128,157,255,129,95,136,255,110,126,51,0,2,169,183,255,7,130,98,254,69,176,94,255,116,4,227,1,217,242,145,255,202,173,31,1,105,1,39,255,46,175,69,0,228,47,58,255,215,224,69,254,207,56,69,255,16,254,139,255,23,207,212,255,202,20,126,255,95,213,96,255,9,176,33,0,200,5,207,255,241,42,128,254,35,33,192,255,248,229,196,1,129,17,120,0,251,103,151,255,7,52,112,255,140,56,66,255,40,226,245,255,217,70,37,254,172,214,9,255,72,67,134,1,146,192,214,255,44,38,112,0,68,184,75,255,206,90,251,0,149,235,141,0,181,170,58,0,116,244,239,0,92,157,2,0,102,173,98,0,233,137,96,1,127,49,203,0,5,155,148,0,23,148,9,255,211,122,12,0,34,134,26,255,219,204,136,0,134,8,41,255,224,83,43,254,85,25,247,0,109,127,0,254,169,136,48,0,238,119,219,255,231,173,213,0,206,18,254,254,8,186,7,255,126,9,7,1,111,42,72,0,111,52,236,254,96,63,141,0,147,191,127,254,205,78,192,255,14,106,237,1,187,219,76,0,175,243,187,254,105,89,173,0,85,25,89,1,162,243,148,0,2,118,209,254,33,158,9,0,139,163,46,255,93,70,40,0,108,42,142,254,111,252,142,255,155,223,144,0,51,229,167,255,73,252,155,255,94,116,12,255,152,160,218,255,156,238,37,255,179,234,207,255,197,0,179,255,154,164,141,0,225,196,104,0,10,35,25,254,209,212,242,255,97,253,222,254,184,101,229,0,222,18,127,1,164,136,135,255,30,207,140,254,146,97,243,0,129,192,26,254,201,84,33,255,111,10,78,255,147,81,178,255,4,4,24,0,161,238,215,255,6,141,33,0,53,215,14,255,41,181,208,255,231,139,157,0,179,203,221,255,255,185,113,0,189,226,172,255,113,66,214,255,202,62,45,255,102,64,8,255,78,174,16,254,133,117,68,255,133,59,140,1,189,241,36,255,248,37,195,1,96,220,55,0,183,76,62,255,195,66,61,0,50,76,164,1,225,164,76,255,76,61,163,255,117,62,31,0,81,145,64,255,118,65,14,0,162,115,214,255,6,138,46,0,124,230,244,255,10,138,143,0,52,26,194,0,184,244,76,0,129,143,41,1,190,244,19,255,123,170,122,255,98,129,68,0,121,213,147,0,86,101,30,255,161,103,155,0,140,89,67,255,239,229,190,1,67,11,181,0,198,240,137,254,238,69,188,255,234,113,60,255,37,255,57,255,69,178,182,254,128,208,179,0,118,26,125,254,3,7,214,255,241,50,77,255,85,203,197,255,211,135,250,255,25,48,100,255,187,213,180,254,17,88,105,0,83,209,158,1,5,115,98,0,4,174,60,254,171,55,110,255,217,181,17,255,20,188,170,0,146,156,102,254,87,214,174,255,114,122,155,1,233,44,170,0,127,8,239,1,214,236,234,0,175,5,219,0,49,106,61,255,6,66,208,255,2,106,110,255,81,234,19,255,215,107,192,255,67,151,238,0,19,42,108,255,229,85,113,1,50,68,135,255,17,106,9,0,50,103,1,255,80,1,168,1,35,152,30,255,16,168,185,1,56,89,232,255,101,210,252,0,41,250,71,0,204,170,79,255,14,46,239,255,80,77,239,0,189,214,75,255,17,141,249,0,38,80,76,255,190,85,117,0,86,228,170,0,156,216,208,1,195,207,164,255,150,66,76,255,175,225,16,255,141,80,98,1,76,219,242,0,198,162,114,0,46,218,152,0,155,43,241,254,155,160,104,255,178,9,252,254,100,110,212,0,14,5,167,0,233,239,163,255,28,151,157,1,101,146,10,255,254,158,70,254,71,249,228,0,88,30,50,0,68,58,160,255,191,24,104,1,129,66,129,255,192,50,85,255,8,179,138,255,38,250,201,0,115,80,160,0,131,230,113,0,125,88,147,0,90,68,199,0,253,76,158,0,28,255,118,0,113,250,254,0,66,75,46,0,230,218,43,0,229,120,186,1,148,68,43,0,136,124,238,1,187,107,197,255,84,53,246,255,51,116,254,255,51,187,165,0,2,17,175,0,66,84,160,1,247,58,30,0,35,65,53,254,69,236,191,0,45,134,245,1,163,123,221,0,32,110,20,255,52,23,165,0,186,214,71,0,233,176,96,0,242,239,54,1,57,89,138,0,83,0,84,255,136,160,100,0,92,142,120,254,104,124,190,0,181,177,62,255,250,41,85,0,152,130,42,1,96,252,246,0,151,151,63,254,239,133,62,0,32,56,156,0,45,167,189,255,142,133,179,1,131,86,211,0,187,179,150,254,250,170,14,255,68,113,21,255,222,186,59,255,66,7,241,1,69,6,72,0,86,156,108,254,55,167,89,0,109,52,219,254,13,176,23,255,196,44,106,255,239,149,71,255,164,140,125,255,159,173,1,0,51,41,231,0,145,62,33,0,138,111,93,1,185,83,69,0,144,115,46,0,97,151,16,255,24,228,26,0,49,217,226,0,113,75,234,254,193,153,12,255,182,48,96,255,14,13,26,0,128,195,249,254,69,193,59,0,132,37,81,254,125,106,60,0,214,240,169,1,164,227,66,0,210,163,78,0,37,52,151,0,99,77,26,0,238,156,213,255,213,192,209,1,73,46,84,0,20,65,41,1,54,206,79,0,201,131,146,254,170,111,24,255,177,33,50,254,171,38,203,255,78,247,116,0,209,221,153,0,133,128,178,1,58,44,25,0,201,39,59,1,189,19,252,0,49,229,210,1,117,187,117,0,181,179,184,1,0,114,219,0,48,94,147,0,245,41,56,0,125,13,204,254,244,173,119,0,44,221,32,254,84,234,20,0,249,160,198,1,236,126,234,255,143,62,221,0,129,89,214,255,55,139,5,254,68,20,191,255,14,204,178,1,35,195,217,0,47,51,206,1,38,246,165,0,206,27,6,254,158,87,36,0,217,52,146,255,125,123,215,255,85,60,31,255,171,13,7,0,218,245,88,254,252,35,60,0,55,214,160,255,133,101,56,0,224,32,19,254,147,64,234,0,26,145,162,1,114,118,125,0,248,252,250,0,101,94,196,255,198,141,226,254,51,42,182,0,135,12,9,254,109,172,210,255,197,236,194,1,241,65,154,0,48,156,47,255,153,67,55,255,218,165,34,254,74,180,179,0,218,66,71,1,88,122,99,0,212,181,219,255,92,42,231,255,239,0,154,0,245,77,183,255,94,81,170,1,18,213,216,0,171,93,71,0,52,94,248,0,18,151,161,254,197,209,66,255,174,244,15,254,162,48,183,0,49,61,240,254,182,93,195,0,199,228,6,1,200,5,17,255,137,45,237,255,108,148,4,0,90,79,237,255,39,63,77,255,53,82,207,1,142,22,118,255,101,232,18,1,92,26,67,0,5,200,88,255,33,168,138,255,149,225,72,0,2,209,27,255,44,245,168,1,220,237,17,255,30,211,105,254,141,238,221,0,128,80,245,254,111,254,14,0,222,95,190,1,223,9,241,0,146,76,212,255,108,205,104,255,63,117,153,0,144,69,48,0,35,228,111,0,192,33,193,255,112,214,190,254,115,152,151,0,23,102,88,0,51,74,248,0,226,199,143,254,204,162,101,255,208,97,189,1,245,104,18,0,230,246,30,255,23,148,69,0,110,88,52,254,226,181,89,255,208,47,90,254,114,161,80,255,33,116,248,0,179,152,87,255,69,144,177,1,88,238,26,255,58,32,113,1,1,77,69,0,59,121,52,255,152,238,83,0,52,8,193,0,231,39,233,255,199,34,138,0,222,68,173,0,91,57,242,254,220,210,127,255,192,7,246,254,151,35,187,0,195,236,165,0,111,93,206,0,212,247,133,1,154,133,209,255,155,231,10,0,64,78,38,0,122,249,100,1,30,19,97,255,62,91,249,1,248,133,77,0,197,63,168,254,116,10,82,0,184,236,113,254,212,203,194,255,61,100,252,254,36,5,202,255,119,91,153,255,129,79,29,0,103,103,171,254,237,215,111,255,216,53,69,0,239,240,23,0,194,149,221,255,38,225,222,0,232,255,180,254,118,82,133,255,57,209,177,1,139,232,133,0,158,176,46,254,194,115,46,0,88,247,229,1,28,103,191,0,221,222,175,254,149,235,44,0,151,228,25,254,218,105,103,0,142,85,210,0,149,129,190,255,213,65,94,254,117,134,224,255,82,198,117,0,157,221,220,0,163,101,36,0,197,114,37,0,104,172,166,254,11,182,0,0,81,72,188,255,97,188,16,255,69,6,10,0,199,147,145,255,8,9,115,1,65,214,175,255,217,173,209,0,80,127,166,0,247,229,4,254,167,183,124,255,90,28,204,254,175,59,240,255,11,41,248,1,108,40,51,255,144,177,195,254,150,250,126,0,138,91,65,1,120,60,222,255,245,193,239,0,29,214,189,255,128,2,25,0,80,154,162,0,77,220,107,1,234,205,74,255,54,166,103,255,116,72,9,0,228,94,47,255,30,200,25,255,35,214,89,255,61,176,140,255,83,226,163,255,75,130,172,0,128,38,17,0,95,137,152,255,215,124,159,1,79,93,0,0,148,82,157,254,195,130,251,255,40,202,76,255,251,126,224,0,157,99,62,254,207,7,225,255,96,68,195,0,140,186,157,255,131,19,231,255,42,128,254,0,52,219,61,254,102,203,72,0,141,7,11,255,186,164,213,0,31,122,119,0,133,242,145,0,208,252,232,255,91,213,182,255,143,4,250,254,249,215,74,0,165,30,111,1,171,9,223,0,229,123,34,1,92,130,26,255,77,155,45,1,195,139,28,255,59,224,78,0,136,17,247,0,108,121,32,0,79,250,189,255,96,227,252,254,38,241,62,0,62,174,125,255,155,111,93,255,10,230,206,1,97,197,40,255,0,49,57,254,65,250,13,0,18,251,150,255,220,109,210,255,5,174,166,254,44,129,189,0,235,35,147,255,37,247,141,255,72,141,4,255,103,107,255,0,247,90,4,0,53,44,42,0,2,30,240,0,4,59,63,0,88,78,36,0,113,167,180,0,190,71,193,255,199,158,164,255,58,8,172,0,77,33,12,0,65,63,3,0,153,77,33,255,172,254,102,1,228,221,4,255,87,30,254,1,146,41,86,255,138,204,239,254,108,141,17,255,187,242,135,0,210,208,127,0,68,45,14,254,73,96,62,0,81,60,24,255,170,6,36,255,3,249,26,0,35,213,109,0,22,129,54,255,21,35,225,255,234,61,56,255,58,217,6,0,143,124,88,0,236,126,66,0,209,38,183,255,34,238,6,255,174,145,102,0,95,22,211,0,196,15,153,254,46,84,232,255,117,34,146,1,231,250,74,255,27,134,100,1,92,187,195,255,170,198,112,0,120,28,42,0,209,70,67,0,29,81,31,0,29,168,100,1,169,173,160,0,107,35,117,0,62,96,59,255,81,12,69,1,135,239,190,255,220,252,18,0,163,220,58,255,137,137,188,255,83,102,109,0,96,6,76,0,234,222,210,255,185,174,205,1,60,158,213,255,13,241,214,0,172,129,140,0,93,104,242,0,192,156,251,0,43,117,30,0,225,81,158,0,127,232,218,0,226,28,203,0,233,27,151,255,117,43,5,255,242,14,47,255,33,20,6,0,137,251,44,254,27,31,245,255,183,214,125,254,40,121,149,0,186,158,213,255,89,8,227,0,69,88,0,254,203,135,225,0,201,174,203,0,147,71,184,0,18,121,41,254,94,5,78,0,224,214,240,254,36,5,180,0,251,135,231,1,163,138,212,0,210,249,116,254,88,129,187,0,19,8,49,254,62,14,144,255,159,76,211,0,214,51,82,0,109,117,228,254,103,223,203,255,75,252,15,1,154,71,220,255,23,13,91,1,141,168,96,255,181,182,133,0,250,51,55,0,234,234,212,254,175,63,158,0,39,240,52,1,158,189,36,255,213,40,85,1,32,180,247,255,19,102,26,1,84,24,97,255,69,21,222,0,148,139,122,255,220,213,235,1,232,203,255,0,121,57,147,0,227,7,154,0,53,22,147,1,72,1,225,0,82,134,48,254,83,60,157,255,145,72,169,0,34,103,239,0,198,233,47,0,116,19,4,255,184,106,9,255,183,129,83,0,36,176,230,1,34,103,72,0,219,162,134,0,245,42,158,0,32,149,96,254,165,44,144,0,202,239,72,254,215,150,5,0,42,66,36,1,132,215,175,0,86,174,86,255,26,197,156,255,49,232,135,254,103,182,82,0,253,128,176,1,153,178,122,0,245,250,10,0,236,24,178,0,137,106,132,0,40,29,41,0,50,30,152,255,124,105,38,0,230,191,75,0,143,43,170,0,44,131,20,255,44,13,23,255,237,255,155,1,159,109,100,255,112,181,24,255,104,220,108,0,55,211,131,0,99,12,213,255,152,151,145,255,238,5,159,0,97,155,8,0,33,108,81,0,1,3,103,0,62,109,34,255,250,155,180,0,32,71,195,255,38,70,145,1,159,95,245,0,69,229,101,1,136,28,240,0,79,224,25,0,78,110,121,255,248,168,124,0,187,128,247,0,2,147,235,254,79,11,132,0,70,58,12,1,181,8,163,255,79,137,133,255,37,170,11,255,141,243,85,255,176,231,215,255,204,150,164,255,239,215,39,255,46,87,156,254,8,163,88,255,172,34,232,0,66,44,102,255,27,54,41,254,236,99,87,255,41,123,169,1,52,114,43,0,117,134,40,0,155,134,26,0,231,207,91,254,35,132,38,255,19,102,125,254,36,227,133,255,118,3,113,255,29,13,124,0,152,96,74,1,88,146,206,255,167,191,220,254,162,18,88,255,182,100,23,0,31,117,52,0,81,46,106,1,12,2,7,0,69,80,201,1,209,246,172,0,12,48,141,1,224,211,88,0,116,226,159,0,122,98,130,0,65,236,234,1,225,226,9,255,207,226,123,1,89,214,59,0,112,135,88,1,90,244,203,255,49,11,38,1,129,108,186,0,89,112,15,1,101,46,204,255,127,204,45,254,79,255,221,255,51,73,18,255,127,42,101,255,241,21,202,0,160,227,7,0,105,50,236,0,79,52,197,255,104,202,208,1,180,15,16,0,101,197,78,255,98,77,203,0,41,185,241,1,35,193,124,0,35,155,23,255,207,53,192,0,11,125,163,1,249,158,185,255,4,131,48,0,21,93,111,255,61,121,231,1,69,200,36,255,185,48,185,255,111,238,21,255,39,50,25,255,99,215,163,255,87,212,30,255,164,147,5,255,128,6,35,1,108,223,110,255,194,76,178,0,74,101,180,0,243,47,48,0,174,25,43,255,82,173,253,1,54,114,192,255,40,55,91,0,215,108,176,255,11,56,7,0,224,233,76,0,209,98,202,254,242,25,125,0,44,193,93,254,203,8,177,0,135,176,19,0,112,71,213,255,206,59,176,1,4,67,26,0,14,143,213,254,42,55,208,255,60,67,120,0,193,21,163,0,99,164,115,0,10,20,118,0,156,212,222,254,160,7,217,255,114,245,76,1,117,59,123,0,176,194,86,254,213,15,176,0,78,206,207,254,213,129,59,0,233,251,22,1,96,55,152,255,236,255,15,255,197,89,84,255,93,149,133,0,174,160,113,0,234,99,169,255,152,116,88,0,144,164,83,255,95,29,198,255,34,47,15,255,99,120,134,255,5,236,193,0,249,247,126,255,147,187,30,0,50,230,117,255,108,217,219,255,163,81,166,255,72,25,169,254,155,121,79,255,28,155,89,254,7,126,17,0,147,65,33,1,47,234,253,0,26,51,18,0,105,83,199,255,163,196,230,0,113,248,164,0,226,254,218,0,189,209,203,255,164,247,222,254,255,35,165,0,4,188,243,1,127,179,71,0,37,237,254,255,100,186,240,0,5,57,71,254,103,72,73,255,244,18,81,254,229,210,132,255,238,6,180,255,11,229,174,255,227,221,192,1,17,49,28,0,163,215,196,254,9,118,4,255,51,240,71,0,113,129,109,255,76,240,231,0,188,177,127,0,125,71,44,1,26,175,243,0,94,169,25,254,27,230,29,0,15,139,119,1,168,170,186,255,172,197,76,255,252,75,188,0,137,124,196,0,72,22,96,255,45,151,249,1,220,145,100,0,64,192,159,255,120,239,226,0,129,178,146,0,0,192,125,0,235,138,234,0,183,157,146,0,83,199,192,255,184,172,72,255,73,225,128,0,77,6,250,255,186,65,67,0,104,246,207,0,188,32,138,255,218,24,242,0,67,138,81,254,237,129,121,255,20,207,150,1,41,199,16,255,6,20,128,0,159,118,5,0,181,16,143,255,220,38,15,0,23,64,147,254,73,26,13,0,87,228,57,1,204,124,128,0,43,24,223,0,219,99,199,0,22,75,20,255,19,27,126,0,157,62,215,0,110,29,230,0,179,167,255,1,54,252,190,0,221,204,182,254,179,158,65,255,81,157,3,0,194,218,159,0,170,223,0,0,224,11,32,255,38,197,98,0,168,164,37,0,23,88,7,1,164,186,110,0,96,36,134,0,234,242,229,0,250,121,19,0,242,254,112,255,3,47,94,1,9,239,6,255,81,134,153,254,214,253,168,255,67,124,224,0,245,95,74,0,28,30,44,254,1,109,220,255,178,89,89,0,252,36,76,0,24,198,46,255,76,77,111,0,134,234,136,255,39,94,29,0,185,72,234,255,70,68,135,255,231,102,7,254,77,231,140,0,167,47,58,1,148,97,118,255,16,27,225,1,166,206,143,255,110,178,214,255,180,131,162,0,143,141,225,1,13,218,78,255,114,153,33,1,98,104,204,0,175,114,117,1,167,206,75,0,202,196,83,1,58,64,67,0,138,47,111,1,196,247,128,255,137,224,224,254,158,112,207,0,154,100,255,1,134,37,107,0,198,128,79,255,127,209,155,255,163,254,185,254,60,14,243,0,31,219,112,254,29,217,65,0,200,13,116,254,123,60,196,255,224,59,184,254,242,89,196,0,123,16,75,254,149,16,206,0,69,254,48,1,231,116,223,255,209,160,65,1,200,80,98,0,37,194,184,254,148,63,34,0,139,240,65,255,217,144,132,255,56,38,45,254,199,120,210,0,108,177,166,255,160,222,4,0,220,126,119,254,165,107,160,255,82,220,248,1,241,175,136,0,144,141,23,255,169,138,84,0,160,137,78,255,226,118,80,255,52,27,132,255,63,96,139,255,152,250,39,0,188,155,15,0,232,51,150,254,40,15,232,255,240,229,9,255,137,175,27,255,75,73,97,1,218,212,11,0,135,5,162,1,107,185,213,0,2,249,107,255,40,242,70,0,219,200,25,0,25,157,13,0,67,82,80,255,196,249,23,255,145,20,149,0,50,72,146,0,94,76,148,1,24,251,65,0,31,192,23,0,184,212,201,255,123,233,162,1,247,173,72,0,162,87,219,254,126,134,89,0,159,11,12,254,166,105,29,0,73,27,228,1,113,120,183,255,66,163,109,1,212,143,11,255,159,231,168,1,255,128,90,0,57,14,58,254,89,52,10,255,253,8,163,1,0,145,210,255,10,129,85,1,46,181,27,0,103,136,160,254,126,188,209,255,34,35,111,0,215,219,24,255,212,11,214,254,101,5,118,0,232,197,133,255,223,167,109,255,237,80,86,255,70,139,94,0,158,193,191,1,155,15,51,255,15,190,115,0,78,135,207,255,249,10,27,1,181,125,233,0,95,172,13,254,170,213,161,255,39,236,138,255,95,93,87,255,190,128,95,0,125,15,206,0,166,150,159,0,227,15,158,255,206,158,120,255,42,141,128,0,101,178,120,1,156,109,131,0,218,14,44,254,247,168,206,255,212,112,28,0,112,17,228,255,90,16,37,1,197,222,108,0,254,207,83,255,9,90,243,255,243,244,172,0,26,88,115,255,205,116,122,0,191,230,193,0,180,100,11,1,217,37,96,255,154,78,156,0,235,234,31,255,206,178,178,255,149,192,251,0,182,250,135,0,246,22,105,0,124,193,109,255,2,210,149,255,169,17,170,0,0,96,110,255,117,9,8,1,50,123,40,255,193,189,99,0,34,227,160,0,48,80,70,254,211,51,236,0,45,122,245,254,44,174,8,0,173,37,233,255,158,65,171,0,122,69,215,255,90,80,2,255,131,106,96,254,227,114,135,0,205,49,119,254,176,62,64,255,82,51,17,255,241,20,243,255,130,13,8,254,128,217,243,255,162,27,1,254,90,118,241,0,246,198,246,255,55,16,118,255,200,159,157,0,163,17,1,0,140,107,121,0,85,161,118,255,38,0,149,0,156,47,238,0,9,166,166,1,75,98,181,255,50,74,25,0,66,15,47,0,139,225,159,0,76,3,142,255,14,238,184,0,11,207,53,255,183,192,186,1,171,32,174,255,191,76,221,1,247,170,219,0,25,172,50,254,217,9,233,0,203,126,68,255,183,92,48,0,127,167,183,1,65,49,254,0,16,63,127,1,254,21,170,255,59,224,127,254,22,48,63,255,27,78,130,254,40,195,29,0,250,132,112,254,35,203,144,0,104,169,168,0,207,253,30,255,104,40,38,254,94,228,88,0,206,16,128,255,212,55,122,255,223,22,234,0,223,197,127,0,253,181,181,1,145,102,118,0,236,153,36,255,212,217,72,255,20,38,24,254,138,62,62,0,152,140,4,0,230,220,99,255,1,21,212,255,148,201,231,0,244,123,9,254,0,171,210,0,51,58,37,255,1,255,14,255,244,183,145,254,0,242,166,0,22,74,132,0,121,216,41,0,95,195,114,254,133,24,151,255,156,226,231,255,247,5,77,255,246,148,115,254,225,92,81,255,222,80,246,254,170,123,89,255,74,199,141,0,29,20,8,255,138,136,70,255,93,75,92,0,221,147,49,254,52,126,226,0,229,124,23,0,46,9,181,0,205,64,52,1,131,254,28,0,151,158,212,0,131,64,78,0,206,25,171,0,0,230,139,0,191,253,110,254,103,247,167,0,64,40,40,1,42,165,241,255,59,75,228,254,124,243,189,255,196,92,178,255,130,140,86,255,141,89,56,1,147,198,5,255,203,248,158,254,144,162,141,0,11,172,226,0,130,42,21,255,1,167,143,255,144,36,36,255,48,88,164,254,168,170,220,0,98,71,214,0,91,208,79,0,159,76,201,1,166,42,214,255,69,255,0,255,6,128,125,255,190,1,140,0,146,83,218,255,215,238,72,1,122,127,53,0,189,116,165,255,84,8,66,255,214,3,208,255,213,110,133,0,195,168,44,1,158,231,69,0,162,64,200,254,91,58,104,0,182,58,187,254,249,228,136,0,203,134,76,254,99,221,233,0,75,254,214,254,80,69,154,0,64,152,248,254,236,136,202,255,157,105,153,254,149,175,20,0,22,35,19,255,124,121,233,0,186,250,198,254,132,229,139,0,137,80,174,255,165,125,68,0,144,202,148,254,235,239,248,0,135,184,118,0,101,94,17,255,122,72,70,254,69,130,146,0,127,222,248,1,69,127,118,255,30,82,215,254,188,74,19,255,229,167,194,254,117,25,66,255,65,234,56,254,213,22,156,0,151,59,93,254,45,28,27,255,186,126,164,255,32,6,239,0,127,114,99,1,219,52,2,255,99,96,166,254,62,190,126,255,108,222,168,1,75,226,174,0,230,226,199,0,60,117,218,255,252,248,20,1,214,188,204,0,31,194,134,254,123,69,192,255,169,173,36,254,55,98,91,0,223,42,102,254,137,1,102,0,157,90,25,0,239,122,64,255,252,6,233,0,7,54,20,255,82,116,174,0,135,37,54,255,15,186,125,0,227,112,175,255,100,180,225,255,42,237,244,255,244,173,226,254,248,18,33,0,171,99,150,255,74,235,50,255,117,82,32,254,106,168,237,0,207,109,208,1,228,9,186,0,135,60,169,254,179,92,143,0,244,170,104,255,235,45,124,255,70,99,186,0,117,137,183,0,224,31,215,0,40,9,100,0,26,16,95,1,68,217,87,0,8,151,20,255,26,100,58,255,176,165,203,1,52,118,70,0,7,32,254,254,244,254,245,255,167,144,194,255,125,113,23,255,176,121,181,0,136,84,209,0,138,6,30,255,89,48,28,0,33,155,14,255,25,240,154,0,141,205,109,1,70,115,62,255,20,40,107,254,138,154,199,255,94,223,226,255,157,171,38,0,163,177,25,254,45,118,3,255,14,222,23,1,209,190,81,255,118,123,232,1,13,213,101,255,123,55,123,254,27,246,165,0,50,99,76,255,140,214,32,255,97,65,67,255,24,12,28,0,174,86,78,1,64,247,96,0,160,135,67,0,66,55,243,255,147,204,96,255,26,6,33,255,98,51,83,1,153,213,208,255,2,184,54,255,25,218,11,0,49,67,246,254,18,149,72,255,13,25,72,0,42,79,214,0,42,4,38,1,27,139,144,255,149,187,23,0,18,164,132,0,245,84,184,254,120,198,104,255,126,218,96,0,56,117,234,255,13,29,214,254,68,47,10,255,167,154,132,254,152,38,198,0,66,178,89,255,200,46,171,255,13,99,83,255,210,187,253,255,170,45,42,1,138,209,124,0,214,162,141,0,12,230,156,0,102,36,112,254,3,147,67,0,52,215,123,255,233,171,54,255,98,137,62,0,247,218,39,255,231,218,236,0,247,191,127,0,195,146,84,0,165,176,92,255,19,212,94,255,17,74,227,0,88,40,153,1,198,147,1,255,206,67,245,254,240,3,218,255,61,141,213,255,97,183,106,0,195,232,235,254,95,86,154,0,209,48,205,254,118,209,241,255,240,120,223,1,213,29,159,0,163,127,147,255,13,218,93,0,85,24,68,254,70,20,80,255,189,5,140,1,82,97,254,255,99,99,191,255,132,84,133,255,107,218,116,255,112,122,46,0,105,17,32,0,194,160,63,255,68,222,39,1,216,253,92,0,177,105,205,255,149,201,195,0,42,225,11,255,40,162,115,0,9,7,81,0,165,218,219,0,180,22,0,254,29,146,252,255,146,207,225,1,180,135,96,0,31,163,112,0,177,11,219,255,133,12,193,254,43,78,50,0,65,113,121,1,59,217,6,255,110,94,24,1,112,172,111,0,7,15,96,0,36,85,123,0,71,150,21,255,208,73,188,0,192,11,167,1,213,245,34,0,9,230,92,0,162,142,39,255,215,90,27,0,98,97,89,0,94,79,211,0,90,157,240,0,95,220,126,1,102,176,226,0,36,30,224,254,35,31,127,0,231,232,115,1,85,83,130,0,210,73,245,255,47,143,114,255,68,65,197,0,59,72,62,255,183,133,173,254,93,121,118,255,59,177,81,255,234,69,173,255,205,128,177,0,220,244,51,0,26,244,209,1,73,222,77,255,163,8,96,254,150,149,211,0,158,254,203,1,54,127,139,0,161,224,59,0,4,109,22,255,222,42,45,255,208,146,102,255,236,142,187,0,50,205,245,255,10,74,89,254,48,79,142,0,222,76,130,255,30,166,63,0,236,12,13,255,49,184,244,0,187,113,102,0,218,101,253,0,153,57,182,254,32,150,42,0,25,198,146,1,237,241,56,0,140,68,5,0,91,164,172,255,78,145,186,254,67,52,205,0,219,207,129,1,109,115,17,0,54,143,58,1,21,248,120,255,179,255,30,0,193,236,66,255,1,255,7,255,253,192,48,255,19,69,217,1,3,214,0,255,64,101,146,1,223,125,35,255,235,73,179,255,249,167,226,0,225,175,10,1,97,162,58,0,106,112,171,1,84,172,5,255,133,140,178,255,134,245,142,0,97,90,125,255,186,203,185,255,223,77,23,255,192,92,106,0,15,198,115,255,217,152,248,0,171,178,120,255,228,134,53,0,176,54,193,1,250,251,53,0,213,10,100,1,34,199,106,0,151,31,244,254,172,224,87,255,14,237,23,255,253,85,26,255,127,39,116,255,172,104,100,0,251,14,70,255,212,208,138,255,253,211,250,0,176,49,165,0,15,76,123,255,37,218,160,255,92,135,16,1,10,126,114,255,70,5,224,255,247,249,141,0,68,20,60,1,241,210,189,255,195,217,187,1,151,3,113,0,151,92,174,0,231,62,178,255,219,183,225,0,23,23,33,255,205,181,80,0,57,184,248,255,67,180,1,255,90,123,93,255,39,0,162,255,96,248,52,255,84,66,140,0,34,127,228,255,194,138,7,1,166,110,188,0,21,17,155,1,154,190,198,255,214,80,59,255,18,7,143,0,72,29,226,1,199,217,249,0,232,161,71,1,149,190,201,0,217,175,95,254,113,147,67,255,138,143,199,255,127,204,1,0,29,182,83,1,206,230,155,255,186,204,60,0,10,125,85,255,232,96,25,255,255,89,247,255,213,254,175,1,232,193,81,0,28,43,156,254,12,69,8,0,147,24,248,0,18,198,49,0,134,60,35,0,118,246,18,255,49,88,254,254,228,21,186,255,182,65,112,1,219,22,1,255,22,126,52,255,189,53,49,255,112,25,143,0,38,127,55,255,226,101,163,254,208,133,61,255,137,69,174,1,190,118,145,255,60,98,219,255,217,13,245,255,250,136,10,0,84,254,226,0,201,31,125,1,240,51,251,255,31,131,130,255,2,138,50,255,215,215,177,1,223,12,238,255,252,149,56,255,124,91,68,255,72,126,170,254,119,255,100,0,130,135,232,255,14,79,178,0,250,131,197,0,138,198,208,0,121,216,139,254,119,18,36,255,29,193,122,0,16,42,45,255,213,240,235,1,230,190,169,255,198,35,228,254,110,173,72,0,214,221,241,255,56,148,135,0,192,117,78,254,141,93,207,255,143,65,149,0,21,18,98,255,95,44,244,1,106,191,77,0,254,85,8,254,214,110,176,255,73,173,19,254,160,196,199,255,237,90,144,0,193,172,113,255,200,155,136,254,228,90,221,0,137,49,74,1,164,221,215,255,209,189,5,255,105,236,55,255,42,31,129,1,193,255,236,0,46,217,60,0,138,88,187,255,226,82,236,255,81,69,151,255,142,190,16,1,13,134,8,0,127,122,48,255,81,64,156,0,171,243,139,0,237,35,246,0,122,143,193,254,212,122,146,0,95,41,255,1,87,132,77,0,4,212,31,0,17,31,78,0,39,45,173,254,24,142,217,255,95,9,6,255,227,83,6,0,98,59,130,254,62,30,33,0,8,115,211,1,162,97,128,255,7,184,23,254,116,28,168,255,248,138,151,255,98,244,240,0,186,118,130,0,114,248,235,255,105,173,200,1,160,124,71,255,94,36,164,1,175,65,146,255,238,241,170,254,202,198,197,0,228,71,138,254,45,246,109,255,194,52,158,0,133,187,176,0,83,252,154,254,89,189,221,255,170,73,252,0,148,58,125,0,36,68,51,254,42,69,177,255,168,76,86,255,38,100,204,255,38,53,35,0,175,19,97,0,225,238,253,255,81,81,135,0,210,27,255,254,235,73,107,0,8,207,115,0,82,127,136,0,84,99,21,254,207,19,136,0,100,164,101,0,80,208,77,255,132,207,237,255,15,3,15,255,33,166,110,0,156,95,85,255,37,185,111,1,150,106,35,255,166,151,76,0,114,87,135,255,159,194,64,0,12,122,31,255,232,7,101,254,173,119,98,0,154,71,220,254,191,57,53,255,168,232,160,255,224,32,99,255,218,156,165,0,151,153,163,0,217,13,148,1,197,113,89,0,149,28,161,254,207,23,30,0,105,132,227,255,54,230,94,255,133,173,204,255,92,183,157,255,88,144,252,254,102,33,90,0,159,97,3,0,181,218,155,255,240,114,119,0,106,214,53,255,165,190,115,1,152,91,225,255,88,106,44,255,208,61,113,0,151,52,124,0,191,27,156,255,110,54,236,1,14,30,166,255,39,127,207,1,229,199,28,0,188,228,188,254,100,157,235,0,246,218,183,1,107,22,193,255,206,160,95,0,76,239,147,0,207,161,117,0,51,166,2,255,52,117,10,254,73,56,227,255,152,193,225,0,132,94,136,255,101,191,209,0,32,107,229,255,198,43,180,1,100,210,118,0,114,67,153,255,23,88,26,255,89,154,92,1,220,120,140,255,144,114,207,255,252,115,250,255,34,206,72,0,138,133,127,255,8,178,124,1,87,75,97,0,15,229,92,254,240,67,131,255,118,123,227,254,146,120,104,255,145,213,255,1,129,187,70,255,219,119,54,0,1,19,173,0,45,150,148,1,248,83,72,0,203,233,169,1,142,107,56,0,247,249,38,1,45,242,80,255,30,233,103,0,96,82,70,0,23,201,111,0,81,39,30,255,161,183,78,255,194,234,33,255,68,227,140,254,216,206,116,0,70,27,235,255,104,144,79,0,164,230,93,254,214,135,156,0,154,187,242,254,188,20,131,255,36,109,174,0,159,112,241,0,5,110,149,1,36,165,218,0,166,29,19,1,178,46,73,0,93,43,32,254,248,189,237,0,102,155,141,0,201,93,195,255,241,139,253,255,15,111,98,255,108,65,163,254,155,79,190,255,73,174,193,254,246,40,48,255,107,88,11,254,202,97,85,255,253,204,18,255,113,242,66,0,110,160,194,254,208,18,186,0,81,21,60,0,188,104,167,255,124,166,97,254,210,133,142,0,56,242,137,254,41,111,130,0,111,151,58,1,111,213,141,255,183,172,241,255,38,6,196,255,185,7,123,255,46,11,246,0,245,105,119,1,15,2,161,255,8,206,45,255,18,202,74,255,83,124,115,1,212,141,157,0,83,8,209,254,139,15,232,255,172,54,173,254,50,247,132,0,214,189,213,0,144,184,105,0,223,254,248,0,255,147,240,255,23,188,72,0,7,51,54,0,188,25,180,254,220,180,0,255,83,160,20,0,163,189,243,255,58,209,194,255,87,73,60,0,106,24,49,0,245,249,220,0,22,173,167,0,118,11,195,255,19,126,237,0,110,159,37,255,59,82,47,0,180,187,86,0,188,148,208,1,100,37,133,255,7,112,193,0,129,188,156,255,84,106,129,255,133,225,202,0,14,236,111,255,40,20,101,0,172,172,49,254,51,54,74,255,251,185,184,255,93,155,224,255,180,249,224,1,230,178,146,0,72,57,54,254,178,62,184,0,119,205,72,0,185,239,253,255,61,15,218,0,196,67,56,255,234,32,171,1,46,219,228,0,208,108,234,255,20,63,232,255,165,53,199,1,133,228,5,255,52,205,107,0,74,238,140,255,150,156,219,254,239,172,178,255,251,189,223,254,32,142,211,255,218,15,138,1,241,196,80,0,28,36,98,254,22,234,199,0,61,237,220,255,246,57,37,0,142,17,142,255,157,62,26,0,43,238,95,254,3,217,6,255,213,25,240,1,39,220,174,255,154,205,48,254,19,13,192,255,244,34,54,254,140,16,155,0,240,181,5,254,155,193,60,0,166,128,4,255,36,145,56,255,150,240,219,0,120,51,145,0,82,153,42,1,140,236,146,0,107,92,248,1,189,10,3,0,63,136,242,0,211,39,24,0,19,202,161,1,173,27,186,255,210,204,239,254,41,209,162,255,182,254,159,255,172,116,52,0,195,103,222,254,205,69,59,0,53,22,41,1,218,48,194,0,80,210,242,0,210,188,207,0,187,161,161,254,216,17,1,0,136,225,113,0,250,184,63,0,223,30,98,254,77,168,162,0,59,53,175,0,19,201,10,255,139,224,194,0,147,193,154,255,212,189,12,254,1,200,174,255,50,133,113,1,94,179,90,0,173,182,135,0,94,177,113,0,43,89,215,255,136,252,106,255,123,134,83,254,5,245,66,255,82,49,39,1,220,2,224,0,97,129,177,0,77,59,89,0,61,29,155,1,203,171,220,255,92,78,139,0,145,33,181,255,169,24,141,1,55,150,179,0,139,60,80,255,218,39,97,0,2,147,107,255,60,248,72,0,173,230,47,1,6,83,182,255,16,105,162,254,137,212,81,255,180,184,134,1,39,222,164,255,221,105,251,1,239,112,125,0,63,7,97,0,63,104,227,255,148,58,12,0,90,60,224,255,84,212,252,0,79,215,168,0,248,221,199,1,115,121,1,0,36,172,120,0,32,162,187,255,57,107,49,255,147,42,21,0,106,198,43,1,57,74,87,0,126,203,81,255,129,135,195,0,140,31,177,0,221,139,194,0,3,222,215,0,131,68,231,0,177,86,178,254,124,151,180,0,184,124,38,1,70,163,17,0,249,251,181,1,42,55,227,0,226,161,44,0,23,236,110,0,51,149,142,1,93,5,236,0,218,183,106,254,67,24,77,0,40,245,209,255,222,121,153,0,165,57,30,0,83,125,60,0,70,38,82,1,229,6,188,0,109,222,157,255,55,118,63,255,205,151,186,0,227,33,149,255,254,176,246,1,227,177,227,0,34,106,163,254,176,43,79,0,106,95,78,1,185,241,122,255,185,14,61,0,36,1,202,0,13,178,162,255,247,11,132,0,161,230,92,1,65,1,185,255,212,50,165,1,141,146,64,255,158,242,218,0,21,164,125,0,213,139,122,1,67,71,87,0,203,158,178,1,151,92,43,0,152,111,5,255,39,3,239,255,217,255,250,255,176,63,71,255,74,245,77,1,250,174,18,255,34,49,227,255,246,46,251,255,154,35,48,1,125,157,61,255,106,36,78,255,97,236,153,0,136,187,120,255,113,134,171,255,19,213,217,254,216,94,209,255,252,5,61,0,94,3,202,0,3,26,183,255,64,191,43,255,30,23,21,0,129,141,77,255,102,120,7,1,194,76,140,0,188,175,52,255,17,81,148,0,232,86,55,1,225,48,172,0,134,42,42,255,238,50,47,0,169,18,254,0,20,147,87,255,14,195,239,255,69,247,23,0,238,229,128,255,177,49,112,0,168,98,251,255,121,71,248,0,243,8,145,254,246,227,153,255,219,169,177,254,251,139,165,255,12,163,185,255,164,40,171,255,153,159,27,254,243,109,91,255,222,24,112,1,18,214,231,0,107,157,181,254,195,147,0,255,194,99,104,255,89,140,190,255,177,66,126,254,106,185,66],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([49,218,31,0,252,174,158,0,188,79,230,1,238,41,224,0,212,234,8,1,136,11,181,0,166,117,83,255,68,195,94,0,46,132,201,0,240,152,88,0,164,57,69,254,160,224,42,255,59,215,67,255,119,195,141,255,36,180,121,254,207,47,8,255,174,210,223,0,101,197,68,255,255,82,141,1,250,137,233,0,97,86,133,1,16,80,69,0,132,131,159,0,116,93,100,0,45,141,139,0,152,172,157,255,90,43,91,0,71,153,46,0,39,16,112,255,217,136,97,255,220,198,25,254,177,53,49,0,222,88,134,255,128,15,60,0,207,192,169,255,192,116,209,255,106,78,211,1,200,213,183,255,7,12,122,254,222,203,60,255,33,110,199,254,251,106,117,0,228,225,4,1,120,58,7,255,221,193,84,254,112,133,27,0,189,200,201,255,139,135,150,0,234,55,176,255,61,50,65,0,152,108,169,255,220,85,1,255,112,135,227,0,162,26,186,0,207,96,185,254,244,136,107,0,93,153,50,1,198,97,151,0,110,11,86,255,143,117,174,255,115,212,200,0,5,202,183,0,237,164,10,254,185,239,62,0,236,120,18,254,98,123,99,255,168,201,194,254,46,234,214,0,191,133,49,255,99,169,119,0,190,187,35,1,115,21,45,255,249,131,72,0,112,6,123,255,214,49,181,254,166,233,34,0,92,197,102,254,253,228,205,255,3,59,201,1,42,98,46,0,219,37,35,255,169,195,38,0,94,124,193,1,156,43,223,0,95,72,133,254,120,206,191,0,122,197,239,255,177,187,79,255,254,46,2,1,250,167,190,0,84,129,19,0,203,113,166,255,249,31,189,254,72,157,202,255,208,71,73,255,207,24,72,0,10,16,18,1,210,81,76,255,88,208,192,255,126,243,107,255,238,141,120,255,199,121,234,255,137,12,59,255,36,220,123,255,148,179,60,254,240,12,29,0,66,0,97,1,36,30,38,255,115,1,93,255,96,103,231,255,197,158,59,1,192,164,240,0,202,202,57,255,24,174,48,0,89,77,155,1,42,76,215,0,244,151,233,0,23,48,81,0,239,127,52,254,227,130,37,255,248,116,93,1,124,132,118,0,173,254,192,1,6,235,83,255,110,175,231,1,251,28,182,0,129,249,93,254,84,184,128,0,76,181,62,0,175,128,186,0,100,53,136,254,109,29,226,0,221,233,58,1,20,99,74,0,0,22,160,0,134,13,21,0,9,52,55,255,17,89,140,0,175,34,59,0,84,165,119,255,224,226,234,255,7,72,166,255,123,115,255,1,18,214,246,0,250,7,71,1,217,220,185,0,212,35,76,255,38,125,175,0,189,97,210,0,114,238,44,255,41,188,169,254,45,186,154,0,81,92,22,0,132,160,193,0,121,208,98,255,13,81,44,255,203,156,82,0,71,58,21,255,208,114,191,254,50,38,147,0,154,216,195,0,101,25,18,0,60,250,215,255,233,132,235,255,103,175,142,1,16,14,92,0,141,31,110,254,238,241,45,255,153,217,239,1,97,168,47,255,249,85,16,1,28,175,62,255,57,254,54,0,222,231,126,0,166,45,117,254,18,189,96,255,228,76,50,0,200,244,94,0,198,152,120,1,68,34,69,255,12,65,160,254,101,19,90,0,167,197,120,255,68,54,185,255,41,218,188,0,113,168,48,0,88,105,189,1,26,82,32,255,185,93,164,1,228,240,237,255,66,182,53,0,171,197,92,255,107,9,233,1,199,120,144,255,78,49,10,255,109,170,105,255,90,4,31,255,28,244,113,255,74,58,11,0,62,220,246,255,121,154,200,254,144,210,178,255,126,57,129,1,43,250,14,255,101,111,28,1,47,86,241,255,61,70,150,255,53,73,5,255,30,26,158,0,209,26,86,0,138,237,74,0,164,95,188,0,142,60,29,254,162,116,248,255,187,175,160,0,151,18,16,0,209,111,65,254,203,134,39,255,88,108,49,255,131,26,71,255,221,27,215,254,104,105,93,255,31,236,31,254,135,0,211,255,143,127,110,1,212,73,229,0,233,67,167,254,195,1,208,255,132,17,221,255,51,217,90,0,67,235,50,255,223,210,143,0,179,53,130,1,233,106,198,0,217,173,220,255,112,229,24,255,175,154,93,254,71,203,246,255,48,66,133,255,3,136,230,255,23,221,113,254,235,111,213,0,170,120,95,254,251,221,2,0,45,130,158,254,105,94,217,255,242,52,180,254,213,68,45,255,104,38,28,0,244,158,76,0,161,200,96,255,207,53,13,255,187,67,148,0,170,54,248,0,119,162,178,255,83,20,11,0,42,42,192,1,146,159,163,255,183,232,111,0,77,229,21,255,71,53,143,0,27,76,34,0,246,136,47,255,219,39,182,255,92,224,201,1,19,142,14,255,69,182,241,255,163,118,245,0,9,109,106,1,170,181,247,255,78,47,238,255,84,210,176,255,213,107,139,0,39,38,11,0,72,21,150,0,72,130,69,0,205,77,155,254,142,133,21,0,71,111,172,254,226,42,59,255,179,0,215,1,33,128,241,0,234,252,13,1,184,79,8,0,110,30,73,255,246,141,189,0,170,207,218,1,74,154,69,255,138,246,49,255,155,32,100,0,125,74,105,255,90,85,61,255,35,229,177,255,62,125,193,255,153,86,188,1,73,120,212,0,209,123,246,254,135,209,38,255,151,58,44,1,92,69,214,255,14,12,88,255,252,153,166,255,253,207,112,255,60,78,83,255,227,124,110,0,180,96,252,255,53,117,33,254,164,220,82,255,41,1,27,255,38,164,166,255,164,99,169,254,61,144,70,255,192,166,18,0,107,250,66,0,197,65,50,0,1,179,18,255,255,104,1,255,43,153,35,255,80,111,168,0,110,175,168,0,41,105,45,255,219,14,205,255,164,233,140,254,43,1,118,0,233,67,195,0,178,82,159,255,138,87,122,255,212,238,90,255,144,35,124,254,25,140,164,0,251,215,44,254,133,70,107,255,101,227,80,254,92,169,55,0,215,42,49,0,114,180,85,255,33,232,27,1,172,213,25,0,62,176,123,254,32,133,24,255,225,191,62,0,93,70,153,0,181,42,104,1,22,191,224,255,200,200,140,255,249,234,37,0,149,57,141,0,195,56,208,255,254,130,70,255,32,173,240,255,29,220,199,0,110,100,115,255,132,229,249,0,228,233,223,255,37,216,209,254,178,177,209,255,183,45,165,254,224,97,114,0,137,97,168,255,225,222,172,0,165,13,49,1,210,235,204,255,252,4,28,254,70,160,151,0,232,190,52,254,83,248,93,255,62,215,77,1,175,175,179,255,160,50,66,0,121,48,208,0,63,169,209,255,0,210,200,0,224,187,44,1,73,162,82,0,9,176,143,255,19,76,193,255,29,59,167,1,24,43,154,0,28,190,190,0,141,188,129,0,232,235,203,255,234,0,109,255,54,65,159,0,60,88,232,255,121,253,150,254,252,233,131,255,198,110,41,1,83,77,71,255,200,22,59,254,106,253,242,255,21,12,207,255,237,66,189,0,90,198,202,1,225,172,127,0,53,22,202,0,56,230,132,0,1,86,183,0,109,190,42,0,243,68,174,1,109,228,154,0,200,177,122,1,35,160,183,255,177,48,85,255,90,218,169,255,248,152,78,0,202,254,110,0,6,52,43,0,142,98,65,255,63,145,22,0,70,106,93,0,232,138,107,1,110,179,61,255,211,129,218,1,242,209,92,0,35,90,217,1,182,143,106,255,116,101,217,255,114,250,221,255,173,204,6,0,60,150,163,0,73,172,44,255,239,110,80,255,237,76,153,254,161,140,249,0,149,232,229,0,133,31,40,255,174,164,119,0,113,51,214,0,129,228,2,254,64,34,243,0,107,227,244,255,174,106,200,255,84,153,70,1,50,35,16,0,250,74,216,254,236,189,66,255,153,249,13,0,230,178,4,255,221,41,238,0,118,227,121,255,94,87,140,254,254,119,92,0,73,239,246,254,117,87,128,0,19,211,145,255,177,46,252,0,229,91,246,1,69,128,247,255,202,77,54,1,8,11,9,255,153,96,166,0,217,214,173,255,134,192,2,1,0,207,0,0,189,174,107,1,140,134,100,0,158,193,243,1,182,102,171,0,235,154,51,0,142,5,123,255,60,168,89,1,217,14,92,255,19,214,5,1,211,167,254,0,44,6,202,254,120,18,236,255,15,113,184,255,184,223,139,0,40,177,119,254,182,123,90,255,176,165,176,0,247,77,194,0,27,234,120,0,231,0,214,255,59,39,30,0,125,99,145,255,150,68,68,1,141,222,248,0,153,123,210,255,110,127,152,255,229,33,214,1,135,221,197,0,137,97,2,0,12,143,204,255,81,41,188,0,115,79,130,255,94,3,132,0,152,175,187,255,124,141,10,255,126,192,179,255,11,103,198,0,149,6,45,0,219,85,187,1,230,18,178,255,72,182,152,0,3,198,184,255,128,112,224,1,97,161,230,0,254,99,38,255,58,159,197,0,151,66,219,0,59,69,143,255,185,112,249,0,119,136,47,255,123,130,132,0,168,71,95,255,113,176,40,1,232,185,173,0,207,93,117,1,68,157,108,255,102,5,147,254,49,97,33,0,89,65,111,254,247,30,163,255,124,217,221,1,102,250,216,0,198,174,75,254,57,55,18,0,227,5,236,1,229,213,173,0,201,109,218,1,49,233,239,0,30,55,158,1,25,178,106,0,155,111,188,1,94,126,140,0,215,31,238,1,77,240,16,0,213,242,25,1,38,71,168,0,205,186,93,254,49,211,140,255,219,0,180,255,134,118,165,0,160,147,134,255,110,186,35,255,198,243,42,0,243,146,119,0,134,235,163,1,4,241,135,255,193,46,193,254,103,180,79,255,225,4,184,254,242,118,130,0,146,135,176,1,234,111,30,0,69,66,213,254,41,96,123,0,121,94,42,255,178,191,195,255,46,130,42,0,117,84,8,255,233,49,214,254,238,122,109,0,6,71,89,1,236,211,123,0,244,13,48,254,119,148,14,0,114,28,86,255,75,237,25,255,145,229,16,254,129,100,53,255,134,150,120,254,168,157,50,0,23,72,104,255,224,49,14,0,255,123,22,255,151,185,151,255,170,80,184,1,134,182,20,0,41,100,101,1,153,33,16,0,76,154,111,1,86,206,234,255,192,160,164,254,165,123,93,255,1,216,164,254,67,17,175,255,169,11,59,255,158,41,61,255,73,188,14,255,195,6,137,255,22,147,29,255,20,103,3,255,246,130,227,255,122,40,128,0,226,47,24,254,35,36,32,0,152,186,183,255,69,202,20,0,195,133,195,0,222,51,247,0,169,171,94,1,183,0,160,255,64,205,18,1,156,83,15,255,197,58,249,254,251,89,110,255,50,10,88,254,51,43,216,0,98,242,198,1,245,151,113,0,171,236,194,1,197,31,199,255,229,81,38,1,41,59,20,0,253,104,230,0,152,93,14,255,246,242,146,254,214,169,240,255,240,102,108,254,160,167,236,0,154,218,188,0,150,233,202,255,27,19,250,1,2,71,133,255,175,12,63,1,145,183,198,0,104,120,115,255,130,251,247,0,17,212,167,255,62,123,132,255,247,100,189,0,155,223,152,0,143,197,33,0,155,59,44,255,150,93,240,1,127,3,87,255,95,71,207,1,167,85,1,255,188,152,116,255,10,23,23,0,137,195,93,1,54,98,97,0,240,0,168,255,148,188,127,0,134,107,151,0,76,253,171,0,90,132,192,0,146,22,54,0,224,66,54,254,230,186,229,255,39,182,196,0,148,251,130,255,65,131,108,254,128,1,160,0,169,49,167,254,199,254,148,255,251,6,131,0,187,254,129,255,85,82,62,0,178,23,58,255,254,132,5,0,164,213,39,0,134,252,146,254,37,53,81,255,155,134,82,0,205,167,238,255,94,45,180,255,132,40,161,0,254,111,112,1,54,75,217,0,179,230,221,1,235,94,191,255,23,243,48,1,202,145,203,255,39,118,42,255,117,141,253,0,254,0,222,0,43,251,50,0,54,169,234,1,80,68,208,0,148,203,243,254,145,7,135,0,6,254,0,0,252,185,127,0,98,8,129,255,38,35,72,255,211,36,220,1,40,26,89,0,168,64,197,254,3,222,239,255,2,83,215,254,180,159,105,0,58,115,194,0,186,116,106,255,229,247,219,255,129,118,193,0,202,174,183,1,166,161,72,0,201,107,147,254,237,136,74,0,233,230,106,1,105,111,168,0,64,224,30,1,1,229,3,0,102,151,175,255,194,238,228,255,254,250,212,0,187,237,121,0,67,251,96,1,197,30,11,0,183,95,204,0,205,89,138,0,64,221,37,1,255,223,30,255,178,48,211,255,241,200,90,255,167,209,96,255,57,130,221,0,46,114,200,255,61,184,66,0,55,182,24,254,110,182,33,0,171,190,232,255,114,94,31,0,18,221,8,0,47,231,254,0,255,112,83,0,118,15,215,255,173,25,40,254,192,193,31,255,238,21,146,255,171,193,118,255,101,234,53,254,131,212,112,0,89,192,107,1,8,208,27,0,181,217,15,255,231,149,232,0,140,236,126,0,144,9,199,255,12,79,181,254,147,182,202,255,19,109,182,255,49,212,225,0,74,163,203,0,175,233,148,0,26,112,51,0,193,193,9,255,15,135,249,0,150,227,130,0,204,0,219,1,24,242,205,0,238,208,117,255,22,244,112,0,26,229,34,0,37,80,188,255,38,45,206,254,240,90,225,255,29,3,47,255,42,224,76,0,186,243,167,0,32,132,15,255,5,51,125,0,139,135,24,0,6,241,219,0,172,229,133,255,246,214,50,0,231,11,207,255,191,126,83,1,180,163,170,255,245,56,24,1,178,164,211,255,3,16,202,1,98,57,118,255,141,131,89,254,33,51,24,0,243,149,91,255,253,52,14,0,35,169,67,254,49,30,88,255,179,27,36,255,165,140,183,0,58,189,151,0,88,31,0,0,75,169,66,0,66,101,199,255,24,216,199,1,121,196,26,255,14,79,203,254,240,226,81,255,94,28,10,255,83,193,240,255,204,193,131,255,94,15,86,0,218,40,157,0,51,193,209,0,0,242,177,0,102,185,247,0,158,109,116,0,38,135,91,0,223,175,149,0,220,66,1,255,86,60,232,0,25,96,37,255,225,122,162,1,215,187,168,255,158,157,46,0,56,171,162,0,232,240,101,1,122,22,9,0,51,9,21,255,53,25,238,255,217,30,232,254,125,169,148,0,13,232,102,0,148,9,37,0,165,97,141,1,228,131,41,0,222,15,243,255,254,18,17,0,6,60,237,1,106,3,113,0,59,132,189,0,92,112,30,0,105,208,213,0,48,84,179,255,187,121,231,254,27,216,109,255,162,221,107,254,73,239,195,255,250,31,57,255,149,135,89,255,185,23,115,1,3,163,157,255,18,112,250,0,25,57,187,255,161,96,164,0,47,16,243,0,12,141,251,254,67,234,184,255,41,18,161,0,175,6,96,255,160,172,52,254,24,176,183,255,198,193,85,1,124,121,137,255,151,50,114,255,220,203,60,255,207,239,5,1,0,38,107,255,55,238,94,254,70,152,94,0,213,220,77,1,120,17,69,255,85,164,190,255,203,234,81,0,38,49,37,254,61,144,124,0,137,78,49,254,168,247,48,0,95,164,252,0,105,169,135,0,253,228,134,0,64,166,75,0,81,73,20,255,207,210,10,0,234,106,150,255,94,34,90,255,254,159,57,254,220,133,99,0,139,147,180,254,24,23,185,0,41,57,30,255,189,97,76,0,65,187,223,255,224,172,37,255,34,62,95,1,231,144,240,0,77,106,126,254,64,152,91,0,29,98,155,0,226,251,53,255,234,211,5,255,144,203,222,255,164,176,221,254,5,231,24,0,179,122,205,0,36,1,134,255,125,70,151,254,97,228,252,0,172,129,23,254,48,90,209,255,150,224,82,1,84,134,30,0,241,196,46,0,103,113,234,255,46,101,121,254,40,124,250,255,135,45,242,254,9,249,168,255,140,108,131,255,143,163,171,0,50,173,199,255,88,222,142,255,200,95,158,0,142,192,163,255,7,117,135,0,111,124,22,0,236,12,65,254,68,38,65,255,227,174,254,0,244,245,38,0,240,50,208,255,161,63,250,0,60,209,239,0,122,35,19,0,14,33,230,254,2,159,113,0,106,20,127,255,228,205,96,0,137,210,174,254,180,212,144,255,89,98,154,1,34,88,139,0,167,162,112,1,65,110,197,0,241,37,169,0,66,56,131,255,10,201,83,254,133,253,187,255,177,112,45,254,196,251,0,0,196,250,151,255,238,232,214,255,150,209,205,0,28,240,118,0,71,76,83,1,236,99,91,0,42,250,131,1,96,18,64,255,118,222,35,0,113,214,203,255,122,119,184,255,66,19,36,0,204,64,249,0,146,89,139,0,134,62,135,1,104,233,101,0,188,84,26,0,49,249,129,0,208,214,75,255,207,130,77,255,115,175,235,0,171,2,137,255,175,145,186,1,55,245,135,255,154,86,181,1,100,58,246,255,109,199,60,255,82,204,134,255,215,49,230,1,140,229,192,255,222,193,251,255,81,136,15,255,179,149,162,255,23,39,29,255,7,95,75,254,191,81,222,0,241,81,90,255,107,49,201,255,244,211,157,0,222,140,149,255,65,219,56,254,189,246,90,255,178,59,157,1,48,219,52,0,98,34,215,0,28,17,187,255,175,169,24,0,92,79,161,255,236,200,194,1,147,143,234,0,229,225,7,1,197,168,14,0,235,51,53,1,253,120,174,0,197,6,168,255,202,117,171,0,163,21,206,0,114,85,90,255,15,41,10,255,194,19,99,0,65,55,216,254,162,146,116,0,50,206,212,255,64,146,29,255,158,158,131,1,100,165,130,255,172,23,129,255,125,53,9,255,15,193,18,1,26,49,11,255,181,174,201,1,135,201,14,255,100,19,149,0,219,98,79,0,42,99,143,254,96,0,48,255,197,249,83,254,104,149,79,255,235,110,136,254,82,128,44,255,65,41,36,254,88,211,10,0,187,121,187,0,98,134,199,0,171,188,179,254,210,11,238,255,66,123,130,254,52,234,61,0,48,113,23,254,6,86,120,255,119,178,245,0,87,129,201,0,242,141,209,0,202,114,85,0,148,22,161,0,103,195,48,0,25,49,171,255,138,67,130,0,182,73,122,254,148,24,130,0,211,229,154,0,32,155,158,0,84,105,61,0,177,194,9,255,166,89,86,1,54,83,187,0,249,40,117,255,109,3,215,255,53,146,44,1,63,47,179,0,194,216,3,254,14,84,136,0,136,177,13,255,72,243,186,255,117,17,125,255,211,58,211,255,93,79,223,0,90,88,245,255,139,209,111,255,70,222,47,0,10,246,79,255,198,217,178,0,227,225,11,1,78,126,179,255,62,43,126,0,103,148,35,0,129,8,165,254,245,240,148,0,61,51,142,0,81,208,134,0,15,137,115,255,211,119,236,255,159,245,248,255,2,134,136,255,230,139,58,1,160,164,254,0,114,85,141,255,49,166,182,255,144,70,84,1,85,182,7,0,46,53,93,0,9,166,161,255,55,162,178,255,45,184,188,0,146,28,44,254,169,90,49,0,120,178,241,1,14,123,127,255,7,241,199,1,189,66,50,255,198,143,101,254,189,243,135,255,141,24,24,254,75,97,87,0,118,251,154,1,237,54,156,0,171,146,207,255,131,196,246,255,136,64,113,1,151,232,57,0,240,218,115,0,49,61,27,255,64,129,73,1,252,169,27,255,40,132,10,1,90,201,193,255,252,121,240,1,186,206,41,0,43,198,97,0,145,100,183,0,204,216,80,254,172,150,65,0,249,229,196,254,104,123,73,255,77,104,96,254,130,180,8,0,104,123,57,0,220,202,229,255,102,249,211,0,86,14,232,255,182,78,209,0,239,225,164,0,106,13,32,255,120,73,17,255,134,67,233,0,83,254,181,0,183,236,112,1,48,64,131,255,241,216,243,255,65,193,226,0,206,241,100,254,100,134,166,255,237,202,197,0,55,13,81,0,32,124,102,255,40,228,177,0,118,181,31,1,231,160,134,255,119,187,202,0,0,142,60,255,128,38,189,255,166,201,150,0,207,120,26,1,54,184,172,0,12,242,204,254,133,66,230,0,34,38,31,1,184,112,80,0,32,51,165,254,191,243,55,0,58,73,146,254,155,167,205,255,100,104,152,255,197,254,207,255,173,19,247,0,238,10,202,0,239,151,242,0,94,59,39,255,240,29,102,255,10,92,154,255,229,84,219,255,161,129,80,0,208,90,204,1,240,219,174,255,158,102,145,1,53,178,76,255,52,108,168,1,83,222,107,0,211,36,109,0,118,58,56,0,8,29,22,0,237,160,199,0,170,209,157,0,137,71,47,0,143,86,32,0,198,242,2,0,212,48,136,1,92,172,186,0,230,151,105,1,96,191,229,0,138,80,191,254,240,216,130,255,98,43,6,254,168,196,49,0,253,18,91,1,144,73,121,0,61,146,39,1,63,104,24,255,184,165,112,254,126,235,98,0,80,213,98,255,123,60,87,255,82,140,245,1,223,120,173,255,15,198,134,1,206,60,239,0,231,234,92,255,33,238,19,255,165,113,142,1,176,119,38,0,160,43,166,254,239,91,105,0,107,61,194,1,25,4,68,0,15,139,51,0,164,132,106,255,34,116,46,254,168,95,197,0,137,212,23,0,72,156,58,0,137,112,69,254,150,105,154,255,236,201,157,0,23,212,154,255,136,82,227,254,226,59,221,255,95,149,192,0,81,118,52,255,33,43,215,1,14,147,75,255,89,156,121,254,14,18,79,0,147,208,139,1,151,218,62,255,156,88,8,1,210,184,98,255,20,175,123,255,102,83,229,0,220,65,116,1,150,250,4,255,92,142,220,255,34,247,66,255,204,225,179,254,151,81,151,0,71,40,236,255,138,63,62,0,6,79,240,255,183,185,181,0,118,50,27,0,63,227,192,0,123,99,58,1,50,224,155,255,17,225,223,254,220,224,77,255,14,44,123,1,141,128,175,0,248,212,200,0,150,59,183,255,147,97,29,0,150,204,181,0,253,37,71,0,145,85,119,0,154,200,186,0,2,128,249,255,83,24,124,0,14,87,143,0,168,51,245,1,124,151,231,255,208,240,197,1,124,190,185,0,48,58,246,0,20,233,232,0,125,18,98,255,13,254,31,255,245,177,130,255,108,142,35,0,171,125,242,254,140,12,34,255,165,161,162,0,206,205,101,0,247,25,34,1,100,145,57,0,39,70,57,0,118,204,203,255,242,0,162,0,165,244,30,0,198,116,226,0,128,111,153,255,140,54,182,1,60,122,15,255,155,58,57,1,54,50,198,0,171,211,29,255,107,138,167,255,173,107,199,255,109,161,193,0,89,72,242,255,206,115,89,255,250,254,142,254,177,202,94,255,81,89,50,0,7,105,66,255,25,254,255,254,203,64,23,255,79,222,108,255,39,249,75,0,241,124,50,0,239,152,133,0,221,241,105,0,147,151,98,0,213,161,121,254,242,49,137,0,233,37,249,254,42,183,27,0,184,119,230,255,217,32,163,255,208,251,228,1,137,62,131,255,79,64,9,254,94,48,113,0,17,138,50,254,193,255,22,0,247,18,197,1,67,55,104,0,16,205,95,255,48,37,66,0,55,156,63,1,64,82,74,255,200,53,71,254,239,67,125,0,26,224,222,0,223,137,93,255,30,224,202,255,9,220,132,0,198,38,235,1,102,141,86,0,60,43,81,1,136,28,26,0,233,36,8,254,207,242,148,0,164,162,63,0,51,46,224,255,114,48,79,255,9,175,226,0,222,3,193,255,47,160,232,255,255,93,105,254,14,42,230,0,26,138,82,1,208,43,244,0,27,39,38,255,98,208,127,255,64,149,182,255,5,250,209,0,187,60,28,254,49,25,218,255,169,116,205,255,119,18,120,0,156,116,147,255,132,53,109,255,13,10,202,0,110,83,167,0,157,219,137,255,6,3,130,255,50,167,30,255,60,159,47,255,129,128,157,254,94,3,189,0,3,166,68,0,83,223,215,0,150,90,194,1,15,168,65,0,227,83,51,255,205,171,66,255,54,187,60,1,152,102,45,255,119,154,225,0,240,247,136,0,100,197,178,255,139,71,223,255,204,82,16,1,41,206,42,255,156,192,221,255,216,123,244,255,218,218,185,255,187,186,239,255,252,172,160,255,195,52,22,0,144,174,181,254,187,100,115,255,211,78,176,255,27,7,193,0,147,213,104,255,90,201,10,255,80,123,66,1,22,33,186,0,1,7,99,254,30,206,10,0,229,234,5,0,53,30,210,0,138,8,220,254,71,55,167,0,72,225,86,1,118,190,188,0,254,193,101,1,171,249,172,255,94,158,183,254,93,2,108,255,176,93,76,255,73,99,79,255,74,64,129,254,246,46,65,0,99,241,127,254,246,151,102,255,44,53,208,254,59,102,234,0,154,175,164,255,88,242,32,0,111,38,1,0,255,182,190,255,115,176,15,254,169,60,129,0,122,237,241,0,90,76,63,0,62,74,120,255,122,195,110,0,119,4,178,0,222,242,210,0,130,33,46,254,156,40,41,0,167,146,112,1,49,163,111,255,121,176,235,0,76,207,14,255,3,25,198,1,41,235,213,0,85,36,214,1,49,92,109,255,200,24,30,254,168,236,195,0,145,39,124,1,236,195,149,0,90,36,184,255,67,85,170,255,38,35,26,254,131,124,68,255,239,155,35,255,54,201,164,0,196,22,117,255,49,15,205,0,24,224,29,1,126,113,144,0,117,21,182,0,203,159,141,0,223,135,77,0,176,230,176,255,190,229,215,255,99,37,181,255,51,21,138,255,25,189,89,255,49,48,165,254,152,45,247,0,170,108,222,0,80,202,5,0,27,69,103,254,204,22,129,255,180,252,62,254,210,1,91,255,146,110,254,255,219,162,28,0,223,252,213,1,59,8,33,0,206,16,244,0,129,211,48,0,107,160,208,0,112,59,209,0,109,77,216,254,34,21,185,255,246,99,56,255,179,139,19,255,185,29,50,255,84,89,19,0,74,250,98,255,225,42,200,255,192,217,205,255,210,16,167,0,99,132,95,1,43,230,57,0,254,11,203,255,99,188,63,255,119,193,251,254,80,105,54,0,232,181,189,1,183,69,112,255,208,171,165,255,47,109,180,255,123,83,165,0,146,162,52,255,154,11,4,255,151,227,90,255,146,137,97,254,61,233,41,255,94,42,55,255,108,164,236,0,152,68,254,0,10,140,131,255,10,106,79,254,243,158,137,0,67,178,66,254,177,123,198,255,15,62,34,0,197,88,42,255,149,95,177,255,152,0,198,255,149,254,113,255,225,90,163,255,125,217,247,0,18,17,224,0,128,66,120,254,192,25,9,255,50,221,205,0,49,212,70,0,233,255,164,0,2,209,9,0,221,52,219,254,172,224,244,255,94,56,206,1,242,179,2,255,31,91,164,1,230,46,138,255,189,230,220,0,57,47,61,255,111,11,157,0,177,91,152,0,28,230,98,0,97,87,126,0,198,89,145,255,167,79,107,0,249,77,160,1,29,233,230,255,150,21,86,254,60,11,193,0,151,37,36,254,185,150,243,255,228,212,83,1,172,151,180,0,201,169,155,0,244,60,234,0,142,235,4,1,67,218,60,0,192,113,75,1,116,243,207,255,65,172,155,0,81,30,156,255,80,72,33,254,18,231,109,255,142,107,21,254,125,26,132,255,176,16,59,255,150,201,58,0,206,169,201,0,208,121,226,0,40,172,14,255,150,61,94,255,56,57,156,255,141,60,145,255,45,108,149,255,238,145,155,255,209,85,31,254,192,12,210,0,99,98,93,254,152,16,151,0,225,185,220,0,141,235,44,255,160,172,21,254,71,26,31,255,13,64,93,254,28,56,198,0,177,62,248,1,182,8,241,0,166,101,148,255,78,81,133,255,129,222,215,1,188,169,129,255,232,7,97,0,49,112,60,255,217,229,251,0,119,108,138,0,39,19,123,254,131,49,235,0,132,84,145,0,130,230,148,255,25,74,187,0,5,245,54,255,185,219,241,1,18,194,228,255,241,202,102,0,105,113,202,0,155,235,79,0,21,9,178,255,156,1,239,0,200,148,61,0,115,247,210,255,49,221,135,0,58,189,8,1,35,46,9,0,81,65,5,255,52,158,185,255,125,116,46,255,74,140,13,255,210,92,172,254,147,23,71,0,217,224,253,254,115,108,180,255,145,58,48,254,219,177,24,255,156,255,60,1,154,147,242,0,253,134,87,0,53,75,229,0,48,195,222,255,31,175,50,255,156,210,120,255,208,35,222,255,18,248,179,1,2,10,101,255,157,194,248,255,158,204,101,255,104,254,197,255,79,62,4,0,178,172,101,1,96,146,251,255,65,10,156,0,2,137,165,255,116,4,231,0,242,215,1,0,19,35,29,255,43,161,79,0,59,149,246,1,251,66,176,0,200,33,3,255,80,110,142,255,195,161,17,1,228,56,66,255,123,47,145,254,132,4,164,0,67,174,172,0,25,253,114,0,87,97,87,1,250,220,84,0,96,91,200,255,37,125,59,0,19,65,118,0,161,52,241,255,237,172,6,255,176,191,255,255,1,65,130,254,223,190,230,0,101,253,231,255,146,35,109,0,250,29,77,1,49,0,19,0,123,90,155,1,22,86,32,255,218,213,65,0,111,93,127,0,60,93,169,255,8,127,182,0,17,186,14,254,253,137,246,255,213,25,48,254,76,238,0,255,248,92,70,255,99,224,139,0,184,9,255,1,7,164,208,0,205,131,198,1,87,214,199,0,130,214,95,0,221,149,222,0,23,38,171,254,197,110,213,0,43,115,140,254,215,177,118,0,96,52,66,1,117,158,237,0,14,64,182,255,46,63,174,255,158,95,190,255,225,205,177,255,43,5,142,255,172,99,212,255,244,187,147,0,29,51,153,255,228,116,24,254,30,101,207,0,19,246,150,255,134,231,5,0,125,134,226,1,77,65,98,0,236,130,33,255,5,110,62,0,69,108,127,255,7,113,22,0,145,20,83,254,194,161,231,255,131,181,60,0,217,209,177,255,229,148,212,254,3,131,184,0,117,177,187,1,28,14,31,255,176,102,80,0,50,84,151,255,125,31,54,255,21,157,133,255,19,179,139,1,224,232,26,0,34,117,170,255,167,252,171,255,73,141,206,254,129,250,35,0,72,79,236,1,220,229,20,255,41,202,173,255,99,76,238,255,198,22,224,255,108,198,195,255,36,141,96,1,236,158,59,255,106,100,87,0,110,226,2,0,227,234,222,0,154,93,119,255,74,112,164,255,67,91,2,255,21,145,33,255,102,214,137,255,175,230,103,254,163,246,166,0,93,247,116,254,167,224,28,255,220,2,57,1,171,206,84,0,123,228,17,255,27,120,119,0,119,11,147,1,180,47,225,255,104,200,185,254,165,2,114,0,77,78,212,0,45,154,177,255,24,196,121,254,82,157,182,0,90,16,190,1,12,147,197,0,95,239,152,255,11,235,71,0,86,146,119,255,172,134,214,0,60,131,196,0,161,225,129,0,31,130,120,254,95,200,51,0,105,231,210,255,58,9,148,255,43,168,221,255,124,237,142,0,198,211,50,254,46,245,103,0,164,248,84,0,152,70,208,255,180,117,177,0,70,79,185,0,243,74,32,0,149,156,207,0,197,196,161,1,245,53,239,0,15,93,246,254,139,240,49,255,196,88,36,255,162,38,123,0,128,200,157,1,174,76,103,255,173,169,34,254,216,1,171,255,114,51,17,0,136,228,194,0,110,150,56,254,106,246,159,0,19,184,79,255,150,77,240,255,155,80,162,0,0,53,169,255,29,151,86,0,68,94,16,0,92,7,110,254,98,117,149,255,249,77,230,255,253,10,140,0,214,124,92,254,35,118,235,0,89,48,57,1,22,53,166,0,184,144,61,255,179,255,194,0,214,248,61,254,59,110,246,0,121,21,81,254,166,3,228,0,106,64,26,255,69,232,134,255,242,220,53,254,46,220,85,0,113,149,247,255,97,179,103,255,190,127,11,0,135,209,182,0,95,52,129,1,170,144,206,255,122,200,204,255,168,100,146,0,60,144,149,254,70,60,40,0,122,52,177,255,246,211,101,255,174,237,8,0,7,51,120,0,19,31,173,0,126,239,156,255,143,189,203,0,196,128,88,255,233,133,226,255,30,125,173,255,201,108,50,0,123,100,59,255,254,163,3,1,221,148,181,255,214,136,57,254,222,180,137,255,207,88,54,255,28,33,251,255,67,214,52,1,210,208,100,0,81,170,94,0,145,40,53,0,224,111,231,254,35,28,244,255,226,199,195,254,238,17,230,0,217,217,164,254,169,157,221,0,218,46,162,1,199,207,163,255,108,115,162,1,14,96,187,255,118,60,76,0,184,159,152,0,209,231,71,254,42,164,186,255,186,153,51,254,221,171,182,255,162,142,173,0,235,47,193,0,7,139,16,1,95,164,64,255,16,221,166,0,219,197,16,0,132,29,44,255,100,69,117,255,60,235,88,254,40,81,173,0,71,190,61,255,187,88,157,0,231,11,23,0,237,117,164,0,225,168,223,255,154,114,116,255,163,152,242,1,24,32,170,0,125,98,113,254,168,19,76,0,17,157,220,254,155,52,5,0,19,111,161,255,71,90,252,255,173,110,240,0,10,198,121,255,253,255,240,255,66,123,210,0,221,194,215,254,121,163,17,255,225,7,99,0,190,49,182,0,115,9,133,1,232,26,138,255,213,68,132,0,44,119,122,255,179,98,51,0,149,90,106,0,71,50,230,255,10,153,118,255,177,70,25,0,165,87,205,0,55,138,234,0,238,30,97,0,113,155,207,0,98,153,127,0,34,107,219,254,117,114,172,255,76,180,255,254,242,57,179,255,221,34,172,254,56,162,49,255,83,3,255,255,113,221,189,255,188,25,228,254,16,88,89,255,71,28,198,254,22,17,149,255,243,121,254,255,107,202,99,255,9,206,14,1,220,47,153,0,107,137,39,1,97,49,194,255,149,51,197,254,186,58,11,255,107,43,232,1,200,6,14,255,181,133,65,254,221,228,171,255,123,62,231,1,227,234,179,255,34,189,212,254,244,187,249,0,190,13,80,1,130,89,1,0,223,133,173,0,9,222,198,255,66,127,74,0,167,216,93,255,155,168,198,1,66,145,0,0,68,102,46,1,172,90,154,0,216,128,75,255,160,40,51,0,158,17,27,1,124,240,49,0,236,202,176,255,151,124,192,255,38,193,190,0,95,182,61,0,163,147,124,255,255,165,51,255,28,40,17,254,215,96,78,0,86,145,218,254,31,36,202,255,86,9,5,0,111,41,200,255,237,108,97,0,57,62,44,0,117,184,15,1,45,241,116,0,152,1,220,255,157,165,188,0,250,15,131,1,60,44,125,255,65,220,251,255,75,50,184,0,53,90,128,255,231,80,194,255,136,129,127,1,21,18,187,255,45,58,161,255,71,147,34,0,174,249,11,254,35,141,29,0,239,68,177,255,115,110,58,0,238,190,177,1,87,245,166,255,190,49,247,255,146,83,184,255,173,14,39,255,146,215,104,0,142,223,120,0,149,200,155,255,212,207,145,1,16,181,217,0,173,32,87,255,255,35,181,0,119,223,161,1,200,223,94,255,70,6,186,255,192,67,85,255,50,169,152,0,144,26,123,255,56,243,179,254,20,68,136,0,39,140,188,254,253,208,5,255,200,115,135,1,43,172,229,255,156,104,187,0,151,251,167,0,52,135,23,0,151,153,72,0,147,197,107,254,148,158,5,255,238,143,206,0,126,153,137,255,88,152,197,254,7,68,167,0,252,159,165,255,239,78,54,255,24,63,55,255,38,222,94,0,237,183,12,255,206,204,210,0,19,39,246,254,30,74,231,0,135,108,29,1,179,115,0,0,117,118,116,1,132,6,252,255,145,129,161,1,105,67,141,0,82,37,226,255,238,226,228,255,204,214,129,254,162,123,100,255,185,121,234,0,45,108,231,0,66,8,56,255,132,136,128,0,172,224,66,254,175,157,188,0,230,223,226,254,242,219,69,0,184,14,119,1,82,162,56,0,114,123,20,0,162,103,85,255,49,239,99,254,156,135,215,0,111,255,167,254,39,196,214,0,144,38,79,1,249,168,125,0,155,97,156,255,23,52,219,255,150,22,144,0,44,149,165,255,40,127,183,0,196,77,233,255,118,129,210,255,170,135,230,255,214,119,198,0,233,240,35,0,253,52,7,255,117,102,48,255,21,204,154,255,179,136,177,255,23,2,3,1,149,130,89,255,252,17,159,1,70,60,26,0,144,107,17,0,180,190,60,255,56,182,59,255,110,71,54,255,198,18,129,255,149,224,87,255,223,21,152,255,138,22,182,255,250,156,205,0,236,45,208,255,79,148,242,1,101,70,209,0,103,78,174,0,101,144,172,255,152,136,237,1,191,194,136,0,113,80,125,1,152,4,141,0,155,150,53,255,196,116,245,0,239,114,73,254,19,82,17,255,124,125,234,255,40,52,191,0,42,210,158,255,155,132,165,0,178,5,42,1,64,92,40,255,36,85,77,255,178,228,118,0,137,66,96,254,115,226,66,0,110,240,69,254,151,111,80,0,167,174,236,255,227,108,107,255,188,242,65,255,183,81,255,0,57,206,181,255,47,34,181,255,213,240,158,1,71,75,95,0,156,40,24,255,102,210,81,0,171,199,228,255,154,34,41,0,227,175,75,0,21,239,195,0,138,229,95,1,76,192,49,0,117,123,87,1,227,225,130,0,125,62,63,255,2,198,171,0,254,36,13,254,145,186,206,0,148,255,244,255,35,0,166,0,30,150,219,1,92,228,212,0,92,198,60,254,62,133,200,255,201,41,59,0,125,238,109,255,180,163,238,1,140,122,82,0,9,22,88,255,197,157,47,255,153,94,57,0,88,30,182,0,84,161,85,0,178,146,124,0,166,166,7,255,21,208,223,0,156,182,242,0,155,121,185,0,83,156,174,254,154,16,118,255,186,83,232,1,223,58,121,255,29,23,88,0,35,125,127,255,170,5,149,254,164,12,130,255,155,196,29,0,161,96,136,0,7,35,29,1,162,37,251,0,3,46,242,255,0,217,188,0,57,174,226,1,206,233,2,0,57,187,136,254,123,189,9,255,201,117,127,255,186,36,204,0,231,25,216,0,80,78,105,0,19,134,129,255,148,203,68,0,141,81,125,254,248,165,200,255,214,144,135,0,151,55,166,255,38,235,91,0,21,46,154,0,223,254,150,255,35,153,180,255,125,176,29,1,43,98,30,255,216,122,230,255,233,160,12,0,57,185,12,254,240,113,7,255,5,9,16,254,26,91,108,0,109,198,203,0,8,147,40,0,129,134,228,255,124,186,40,255,114,98,132,254,166,132,23,0,99,69,44,0,9,242,238,255,184,53,59,0,132,129,102,255,52,32,243,254,147,223,200,255,123,83,179,254,135,144,201,255,141,37,56,1,151,60,227,255,90,73,156,1,203,172,187,0,80,151,47,255,94,137,231,255,36,191,59,255,225,209,181,255,74,215,213,254,6,118,179,255,153,54,193,1,50,0,231,0,104,157,72,1,140,227,154,255,182,226,16,254,96,225,92,255,115,20,170,254,6,250,78,0,248,75,173,255,53,89,6,255,0,180,118,0,72,173,1,0,64,8,206,1,174,133,223,0,185,62,133,255,214,11,98,0,197,31,208,0,171,167,244,255,22,231,181,1,150,218,185,0,247,169,97,1,165,139,247,255,47,120,149,1,103,248,51,0,60,69,28,254,25,179,196,0,124,7,218,254,58,107,81,0,184,233,156,255,252,74,36,0,118,188,67,0,141,95,53,255,222,94,165,254,46,61,53,0,206,59,115,255,47,236,250,255,74,5,32,1,129,154,238,255,106,32,226,0,121,187,61,255,3,166,241,254,67,170,172,255,29,216,178,255,23,201,252,0,253,110,243,0,200,125,57,0,109,192,96,255,52,115,238,0,38,121,243,255,201,56,33,0,194,118,130,0,75,96,25,255,170,30,230,254,39,63,253,0,36,45,250,255,251,1,239,0,160,212,92,1,45,209,237,0,243,33,87,254,237,84,201,255,212,18,157,254,212,99,127,255,217,98,16,254,139,172,239,0,168,201,130,255,143,193,169,255,238,151,193,1,215,104,41,0,239,61,165,254,2,3,242,0,22,203,177,254,177,204,22,0,149,129,213,254,31,11,41,255,0,159,121,254,160,25,114,255,162,80,200,0,157,151,11,0,154,134,78,1,216,54,252,0,48,103,133,0,105,220,197,0,253,168,77,254,53,179,23,0,24,121,240,1,255,46,96,255,107,60,135,254,98,205,249,255,63,249,119,255,120,59,211,255,114,180,55,254,91,85,237,0,149,212,77,1,56,73,49,0,86,198,150,0,93,209,160,0,69,205,182,255,244,90,43,0,20,36,176,0,122,116,221,0,51,167,39,1,231,1,63,255,13,197,134,0,3,209,34,255,135,59,202,0,167,100,78,0,47,223,76,0,185,60,62,0,178,166,123,1,132,12,161,255,61,174,43,0,195,69,144,0,127,47,191,1,34,44,78,0,57,234,52,1,255,22,40,255,246,94,146,0,83,228,128,0,60,78,224,255,0,96,210,255,153,175,236,0,159,21,73,0,180,115,196,254,131,225,106,0,255,167,134,0,159,8,112,255,120,68,194,255,176,196,198,255,118,48,168,255,93,169,1,0,112,200,102,1,74,24,254,0,19,141,4,254,142,62,63,0,131,179,187,255,77,156,155,255,119,86,164,0,170,208,146,255,208,133,154,255,148,155,58,255,162,120,232,254,252,213,155,0,241,13,42,0,94,50,131,0,179,170,112,0,140,83,151,255,55,119,84,1,140,35,239,255,153,45,67,1,236,175,39,0,54,151,103,255,158,42,65,255,196,239,135,254,86,53,203,0,149,97,47,254,216,35,17,255,70,3,70,1,103,36,90,255,40,26,173,0,184,48,13,0,163,219,217,255,81,6,1,255,221,170,108,254,233,208,93,0,100,201,249,254,86,36,35,255,209,154,30,1,227,201,251,255,2,189,167,254,100,57,3,0,13,128,41,0,197,100,75,0,150,204,235,255,145,174,59,0,120,248,149,255,85,55,225,0,114,210,53,254,199,204,119,0,14,247,74,1,63,251,129,0,67,104,151,1,135,130,80,0,79,89,55,255,117,230,157,255,25,96,143,0,213,145,5,0,69,241,120,1,149,243,95,255,114,42,20,0,131,72,2,0,154,53,20,255,73,62,109,0,196,102,152,0,41,12,204,255,122,38,11,1,250,10,145,0,207,125,148,0,246,244,222,255,41,32,85,1,112,213,126,0,162,249,86,1,71,198,127,255,81,9,21,1,98,39,4,255,204,71,45,1,75,111,137,0,234,59,231,0,32,48,95,255,204,31,114,1,29,196,181,255,51,241,167,254,93,109,142,0,104,144,45,0,235,12,181,255,52,112,164,0,76,254,202,255,174,14,162,0,61,235,147,255,43,64,185,254,233,125,217,0,243,88,167,254,74,49,8,0,156,204,66,0,124,214,123,0,38,221,118,1,146,112,236,0,114,98,177,0,151,89,199,0,87,197,112,0,185,149,161,0,44,96,165,0,248,179,20,255,188,219,216,254,40,62,13,0,243,142,141,0,229,227,206,255,172,202,35,255,117,176,225,255,82,110,38,1,42,245,14,255,20,83,97,0,49,171,10,0,242,119,120,0,25,232,61,0,212,240,147,255,4,115,56,255,145,17,239,254,202,17,251,255,249,18,245,255,99,117,239,0,184,4,179,255,246,237,51,255,37,239,137,255,166,112,166,255,81,188,33,255,185,250,142,255,54,187,173,0,208,112,201,0,246,43,228,1,104,184,88,255,212,52,196,255,51,117,108,255,254,117,155,0,46,91,15,255,87,14,144,255,87,227,204,0,83,26,83,1,159,76,227,0,159,27,213,1,24,151,108,0,117,144,179,254,137,209,82,0,38,159,10,0,115,133,201,0,223,182,156,1,110,196,93,255,57,60,233,0,5,167,105,255,154,197,164,0,96,34,186,255,147,133,37,1,220,99,190,0,1,167,84,255,20,145,171,0,194,197,251,254,95,78,133,255,252,248,243,255,225,93,131,255,187,134,196,255,216,153,170,0,20,118,158,254,140,1,118,0,86,158,15,1,45,211,41,255,147,1,100,254,113,116,76,255,211,127,108,1,103,15,48,0,193,16,102,1,69,51,95,255,107,128,157,0,137,171,233,0,90,124,144,1,106,161,182,0,175,76,236,1,200,141,172,255,163,58,104,0,233,180,52,255,240,253,14,255,162,113,254,255,38,239,138,254,52,46,166,0,241,101,33,254,131,186,156,0,111,208,62,255,124,94,160,255,31,172,254,0,112,174,56,255,188,99,27,255,67,138,251,0,125,58,128,1,156,152,174,255,178,12,247,255,252,84,158,0,82,197,14,254,172,200,83,255,37,39,46,1,106,207,167,0,24,189,34,0,131,178,144,0,206,213,4,0,161,226,210,0,72,51,105,255,97,45,187,255,78,184,223,255,176,29,251,0,79,160,86,255,116,37,178,0,82,77,213,1,82,84,141,255,226,101,212,1,175,88,199,255,245,94,247,1,172,118,109,255,166,185,190,0,131,181,120,0,87,254,93,255,134,240,73,255,32,245,143,255,139,162,103,255,179,98,18,254,217,204,112,0,147,223,120,255,53,10,243,0,166,140,150,0,125,80,200,255,14,109,219,255,91,218,1,255,252,252,47,254,109,156,116,255,115,49,127,1,204,87,211,255,148,202,217,255,26,85,249,255,14,245,134,1,76,89,169,255,242,45,230,0,59,98,172,255,114,73,132,254,78,155,49,255,158,126,84,0,49,175,43,255,16,182,84,255,157,103,35,0,104,193,109,255,67,221,154],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+10240);allocate([201,172,1,254,8,162,88,0,165,1,29,255,125,155,229,255,30,154,220,1,103,239,92,0,220,1,109,255,202,198,1,0,94,2,142,1,36,54,44,0,235,226,158,255,170,251,214,255,185,77,9,0,97,74,242,0,219,163,149,255,240,35,118,255,223,114,88,254,192,199,3,0,106,37,24,255,201,161,118,255,97,89,99,1,224,58,103,255,101,199,147,254,222,60,99,0,234,25,59,1,52,135,27,0,102,3,91,254,168,216,235,0,229,232,136,0,104,60,129,0,46,168,238,0,39,191,67,0,75,163,47,0,143,97,98,255,56,216,168,1,168,233,252,255,35,111,22,255,92,84,43,0,26,200,87,1,91,253,152,0,202,56,70,0,142,8,77,0,80,10,175,1,252,199,76,0,22,110,82,255,129,1,194,0,11,128,61,1,87,14,145,255,253,222,190,1,15,72,174,0,85,163,86,254,58,99,44,255,45,24,188,254,26,205,15,0,19,229,210,254,248,67,195,0,99,71,184,0,154,199,37,255,151,243,121,255,38,51,75,255,201,85,130,254,44,65,250,0,57,147,243,254,146,43,59,255,89,28,53,0,33,84,24,255,179,51,18,254,189,70,83,0,11,156,179,1,98,134,119,0,158,111,111,0,119,154,73,255,200,63,140,254,45,13,13,255,154,192,2,254,81,72,42,0,46,160,185,254,44,112,6,0,146,215,149,1,26,176,104,0,68,28,87,1,236,50,153,255,179,128,250,254,206,193,191,255,166,92,137,254,53,40,239,0,210,1,204,254,168,173,35,0,141,243,45,1,36,50,109,255,15,242,194,255,227,159,122,255,176,175,202,254,70,57,72,0,40,223,56,0,208,162,58,255,183,98,93,0,15,111,12,0,30,8,76,255,132,127,246,255,45,242,103,0,69,181,15,255,10,209,30,0,3,179,121,0,241,232,218,1,123,199,88,255,2,210,202,1,188,130,81,255,94,101,208,1,103,36,45,0,76,193,24,1,95,26,241,255,165,162,187,0,36,114,140,0,202,66,5,255,37,56,147,0,152,11,243,1,127,85,232,255,250,135,212,1,185,177,113,0,90,220,75,255,69,248,146,0,50,111,50,0,92,22,80,0,244,36,115,254,163,100,82,255,25,193,6,1,127,61,36,0,253,67,30,254,65,236,170,255,161,17,215,254,63,175,140,0,55,127,4,0,79,112,233,0,109,160,40,0,143,83,7,255,65,26,238,255,217,169,140,255,78,94,189,255,0,147,190,255,147,71,186,254,106,77,127,255,233,157,233,1,135,87,237,255,208,13,236,1,155,109,36,255,180,100,218,0,180,163,18,0,190,110,9,1,17,63,123,255,179,136,180,255,165,123,123,255,144,188,81,254,71,240,108,255,25,112,11,255,227,218,51,255,167,50,234,255,114,79,108,255,31,19,115,255,183,240,99,0,227,87,143,255,72,217,248,255,102,169,95,1,129,149,149,0,238,133,12,1,227,204,35,0,208,115,26,1,102,8,234,0,112,88,143,1,144,249,14,0,240,158,172,254,100,112,119,0,194,141,153,254,40,56,83,255,121,176,46,0,42,53,76,255,158,191,154,0,91,209,92,0,173,13,16,1,5,72,226,255,204,254,149,0,80,184,207,0,100,9,122,254,118,101,171,255,252,203,0,254,160,207,54,0,56,72,249,1,56,140,13,255,10,64,107,254,91,101,52,255,225,181,248,1,139,255,132,0,230,145,17,0,233,56,23,0,119,1,241,255,213,169,151,255,99,99,9,254,185,15,191,255,173,103,109,1,174,13,251,255,178,88,7,254,27,59,68,255,10,33,2,255,248,97,59,0,26,30,146,1,176,147,10,0,95,121,207,1,188,88,24,0,185,94,254,254,115,55,201,0,24,50,70,0,120,53,6,0,142,66,146,0,228,226,249,255,104,192,222,1,173,68,219,0,162,184,36,255,143,102,137,255,157,11,23,0,125,45,98,0,235,93,225,254,56,112,160,255,70,116,243,1,153,249,55,255,129,39,17,1,241,80,244,0,87,69,21,1,94,228,73,255,78,66,65,255,194,227,231,0,61,146,87,255,173,155,23,255,112,116,219,254,216,38,11,255,131,186,133,0,94,212,187,0,100,47,91,0,204,254,175,255,222,18,215,254,173,68,108,255,227,228,79,255,38,221,213,0,163,227,150,254,31,190,18,0,160,179,11,1,10,90,94,255,220,174,88,0,163,211,229,255,199,136,52,0,130,95,221,255,140,188,231,254,139,113,128,255,117,171,236,254,49,220,20,255,59,20,171,255,228,109,188,0,20,225,32,254,195,16,174,0,227,254,136,1,135,39,105,0,150,77,206,255,210,238,226,0,55,212,132,254,239,57,124,0,170,194,93,255,249,16,247,255,24,151,62,255,10,151,10,0,79,139,178,255,120,242,202,0,26,219,213,0,62,125,35,255,144,2,108,255,230,33,83,255,81,45,216,1,224,62,17,0,214,217,125,0,98,153,153,255,179,176,106,254,131,93,138,255,109,62,36,255,178,121,32,255,120,252,70,0,220,248,37,0,204,88,103,1,128,220,251,255,236,227,7,1,106,49,198,255,60,56,107,0,99,114,238,0,220,204,94,1,73,187,1,0,89,154,34,0,78,217,165,255,14,195,249,255,9,230,253,255,205,135,245,0,26,252,7,255,84,205,27,1,134,2,112,0,37,158,32,0,231,91,237,255,191,170,204,255,152,7,222,0,109,192,49,0,193,166,146,255,232,19,181,255,105,142,52,255,103,16,27,1,253,200,165,0,195,217,4,255,52,189,144,255,123,155,160,254,87,130,54,255,78,120,61,255,14,56,41,0,25,41,125,255,87,168,245,0,214,165,70,0,212,169,6,255,219,211,194,254,72,93,164,255,197,33,103,255,43,142,141,0,131,225,172,0,244,105,28,0,68,68,225,0,136,84,13,255,130,57,40,254,139,77,56,0,84,150,53,0,54,95,157,0,144,13,177,254,95,115,186,0,117,23,118,255,244,166,241,255,11,186,135,0,178,106,203,255,97,218,93,0,43,253,45,0,164,152,4,0,139,118,239,0,96,1,24,254,235,153,211,255,168,110,20,255,50,239,176,0,114,41,232,0,193,250,53,0,254,160,111,254,136,122,41,255,97,108,67,0,215,152,23,255,140,209,212,0,42,189,163,0,202,42,50,255,106,106,189,255,190,68,217,255,233,58,117,0,229,220,243,1,197,3,4,0,37,120,54,254,4,156,134,255,36,61,171,254,165,136,100,255,212,232,14,0,90,174,10,0,216,198,65,255,12,3,64,0,116,113,115,255,248,103,8,0,231,125,18,255,160,28,197,0,30,184,35,1,223,73,249,255,123,20,46,254,135,56,37,255,173,13,229,1,119,161,34,255,245,61,73,0,205,125,112,0,137,104,134,0,217,246,30,255,237,142,143,0,65,159,102,255,108,164,190,0,219,117,173,255,34,37,120,254,200,69,80,0,31,124,218,254,74,27,160,255,186,154,199,255,71,199,252,0,104,81,159,1,17,200,39,0,211,61,192,1,26,238,91,0,148,217,12,0,59,91,213,255,11,81,183,255,129,230,122,255,114,203,145,1,119,180,66,255,72,138,180,0,224,149,106,0,119,82,104,255,208,140,43,0,98,9,182,255,205,101,134,255,18,101,38,0,95,197,166,255,203,241,147,0,62,208,145,255,133,246,251,0,2,169,14,0,13,247,184,0,142,7,254,0,36,200,23,255,88,205,223,0,91,129,52,255,21,186,30,0,143,228,210,1,247,234,248,255,230,69,31,254,176,186,135,255,238,205,52,1,139,79,43,0,17,176,217,254,32,243,67,0,242,111,233,0,44,35,9,255,227,114,81,1,4,71,12,255,38,105,191,0,7,117,50,255,81,79,16,0,63,68,65,255,157,36,110,255,77,241,3,255,226,45,251,1,142,25,206,0,120,123,209,1,28,254,238,255,5,128,126,255,91,222,215,255,162,15,191,0,86,240,73,0,135,185,81,254,44,241,163,0,212,219,210,255,112,162,155,0,207,101,118,0,168,72,56,255,196,5,52,0,72,172,242,255,126,22,157,255,146,96,59,255,162,121,152,254,140,16,95,0,195,254,200,254,82,150,162,0,119,43,145,254,204,172,78,255,166,224,159,0,104,19,237,255,245,126,208,255,226,59,213,0,117,217,197,0,152,72,237,0,220,31,23,254,14,90,231,255,188,212,64,1,60,101,246,255,85,24,86,0,1,177,109,0,146,83,32,1,75,182,192,0,119,241,224,0,185,237,27,255,184,101,82,1,235,37,77,255,253,134,19,0,232,246,122,0,60,106,179,0,195,11,12,0,109,66,235,1,125,113,59,0,61,40,164,0,175,104,240,0,2,47,187,255,50,12,141,0,194,139,181,255,135,250,104,0,97,92,222,255,217,149,201,255,203,241,118,255,79,151,67,0,122,142,218,255,149,245,239,0,138,42,200,254,80,37,97,255,124,112,167,255,36,138,87,255,130,29,147,255,241,87,78,255,204,97,19,1,177,209,22,255,247,227,127,254,99,119,83,255,212,25,198,1,16,179,179,0,145,77,172,254,89,153,14,255,218,189,167,0,107,233,59,255,35,33,243,254,44,112,112,255,161,127,79,1,204,175,10,0,40,21,138,254,104,116,228,0,199,95,137,255,133,190,168,255,146,165,234,1,183,99,39,0,183,220,54,254,255,222,133,0,162,219,121,254,63,239,6,0,225,102,54,255,251,18,246,0,4,34,129,1,135,36,131,0,206,50,59,1,15,97,183,0,171,216,135,255,101,152,43,255,150,251,91,0,38,145,95,0,34,204,38,254,178,140,83,255,25,129,243,255,76,144,37,0,106,36,26,254,118,144,172,255,68,186,229,255,107,161,213,255,46,163,68,255,149,170,253,0,187,17,15,0,218,160,165,255,171,35,246,1,96,13,19,0,165,203,117,0,214,107,192,255,244,123,177,1,100,3,104,0,178,242,97,255,251,76,130,255,211,77,42,1,250,79,70,255,63,244,80,1,105,101,246,0,61,136,58,1,238,91,213,0,14,59,98,255,167,84,77,0,17,132,46,254,57,175,197,255,185,62,184,0,76,64,207,0,172,175,208,254,175,74,37,0,138,27,211,254,148,125,194,0,10,89,81,0,168,203,101,255,43,213,209,1,235,245,54,0,30,35,226,255,9,126,70,0,226,125,94,254,156,117,20,255,57,248,112,1,230,48,64,255,164,92,166,1,224,214,230,255,36,120,143,0,55,8,43,255,251,1,245,1,106,98,165,0,74,107,106,254,53,4,54,255,90,178,150,1,3,120,123,255,244,5,89,1,114,250,61,255,254,153,82,1,77,15,17,0,57,238,90,1,95,223,230,0,236,52,47,254,103,148,164,255,121,207,36,1,18,16,185,255,75,20,74,0,187,11,101,0,46,48,129,255,22,239,210,255,77,236,129,255,111,77,204,255,61,72,97,255,199,217,251,255,42,215,204,0,133,145,201,255,57,230,146,1,235,100,198,0,146,73,35,254,108,198,20,255,182,79,210,255,82,103,136,0,246,108,176,0,34,17,60,255,19,74,114,254,168,170,78,255,157,239,20,255,149,41,168,0,58,121,28,0,79,179,134,255,231,121,135,255,174,209,98,255,243,122,190,0,171,166,205,0,212,116,48,0,29,108,66,255,162,222,182,1,14,119,21,0,213,39,249,255,254,223,228,255,183,165,198,0,133,190,48,0,124,208,109,255,119,175,85,255,9,209,121,1,48,171,189,255,195,71,134,1,136,219,51,255,182,91,141,254,49,159,72,0,35,118,245,255,112,186,227,255,59,137,31,0,137,44,163,0,114,103,60,254,8,213,150,0,162,10,113,255,194,104,72,0,220,131,116,255,178,79,92,0,203,250,213,254,93,193,189,255,130,255,34,254,212,188,151,0,136,17,20,255,20,101,83,255,212,206,166,0,229,238,73,255,151,74,3,255,168,87,215,0,155,188,133,255,166,129,73,0,240,79,133,255,178,211,81,255,203,72,163,254,193,168,165,0,14,164,199,254,30,255,204,0,65,72,91,1,166,74,102,255,200,42,0,255,194,113,227,255,66,23,208,0,229,216,100,255,24,239,26,0,10,233,62,255,123,10,178,1,26,36,174,255,119,219,199,1,45,163,190,0,16,168,42,0,166,57,198,255,28,26,26,0,126,165,231,0,251,108,100,255,61,229,121,255,58,118,138,0,76,207,17,0,13,34,112,254,89,16,168,0,37,208,105,255,35,201,215,255,40,106,101,254,6,239,114,0,40,103,226,254,246,127,110,255,63,167,58,0,132,240,142,0,5,158,88,255,129,73,158,255,94,89,146,0,230,54,146,0,8,45,173,0,79,169,1,0,115,186,247,0,84,64,131,0,67,224,253,255,207,189,64,0,154,28,81,1,45,184,54,255,87,212,224,255,0,96,73,255,129,33,235,1,52,66,80,255,251,174,155,255,4,179,37,0,234,164,93,254,93,175,253,0,198,69,87,255,224,106,46,0,99,29,210,0,62,188,114,255,44,234,8,0,169,175,247,255,23,109,137,255,229,182,39,0,192,165,94,254,245,101,217,0,191,88,96,0,196,94,99,255,106,238,11,254,53,126,243,0,94,1,101,255,46,147,2,0,201,124,124,255,141,12,218,0,13,166,157,1,48,251,237,255,155,250,124,255,106,148,146,255,182,13,202,0,28,61,167,0,217,152,8,254,220,130,45,255,200,230,255,1,55,65,87,255,93,191,97,254,114,251,14,0,32,105,92,1,26,207,141,0,24,207,13,254,21,50,48,255,186,148,116,255,211,43,225,0,37,34,162,254,164,210,42,255,68,23,96,255,182,214,8,255,245,117,137,255,66,195,50,0,75,12,83,254,80,140,164,0,9,165,36,1,228,110,227,0,241,17,90,1,25,52,212,0,6,223,12,255,139,243,57,0,12,113,75,1,246,183,191,255,213,191,69,255,230,15,142,0,1,195,196,255,138,171,47,255,64,63,106,1,16,169,214,255,207,174,56,1,88,73,133,255,182,133,140,0,177,14,25,255,147,184,53,255,10,227,161,255,120,216,244,255,73,77,233,0,157,238,139,1,59,65,233,0,70,251,216,1,41,184,153,255,32,203,112,0,146,147,253,0,87,101,109,1,44,82,133,255,244,150,53,255,94,152,232,255,59,93,39,255,88,147,220,255,78,81,13,1,32,47,252,255,160,19,114,255,93,107,39,255,118,16,211,1,185,119,209,255,227,219,127,254,88,105,236,255,162,110,23,255,36,166,110,255,91,236,221,255,66,234,116,0,111,19,244,254,10,233,26,0,32,183,6,254,2,191,242,0,218,156,53,254,41,60,70,255,168,236,111,0,121,185,126,255,238,142,207,255,55,126,52,0,220,129,208,254,80,204,164,255,67,23,144,254,218,40,108,255,127,202,164,0,203,33,3,255,2,158,0,0,37,96,188,255,192,49,74,0,109,4,0,0,111,167,10,254,91,218,135,255,203,66,173,255,150,194,226,0,201,253,6,255,174,102,121,0,205,191,110,0,53,194,4,0,81,40,45,254,35,102,143,255,12,108,198,255,16,27,232,255,252,71,186,1,176,110,114,0,142,3,117,1,113,77,142,0,19,156,197,1,92,47,252,0,53,232,22,1,54,18,235,0,46,35,189,255,236,212,129,0,2,96,208,254,200,238,199,255,59,175,164,255,146,43,231,0,194,217,52,255,3,223,12,0,138,54,178,254,85,235,207,0,232,207,34,0,49,52,50,255,166,113,89,255,10,45,216,255,62,173,28,0,111,165,246,0,118,115,91,255,128,84,60,0,167,144,203,0,87,13,243,0,22,30,228,1,177,113,146,255,129,170,230,254,252,153,129,255,145,225,43,0,70,231,5,255,122,105,126,254,86,246,148,255,110,37,154,254,209,3,91,0,68,145,62,0,228,16,165,255,55,221,249,254,178,210,91,0,83,146,226,254,69,146,186,0,93,210,104,254,16,25,173,0,231,186,38,0,189,122,140,255,251,13,112,255,105,110,93,0,251,72,170,0,192,23,223,255,24,3,202,1,225,93,228,0,153,147,199,254,109,170,22,0,248,101,246,255,178,124,12,255,178,254,102,254,55,4,65,0,125,214,180,0,183,96,147,0,45,117,23,254,132,191,249,0,143,176,203,254,136,183,54,255,146,234,177,0,146,101,86,255,44,123,143,1,33,209,152,0,192,90,41,254,83,15,125,255,213,172,82,0,215,169,144,0,16,13,34,0,32,209,100,255,84,18,249,1,197,17,236,255,217,186,230,0,49,160,176,255,111,118,97,255,237,104,235,0,79,59,92,254,69,249,11,255,35,172,74,1,19,118,68,0,222,124,165,255,180,66,35,255,86,174,246,0,43,74,111,255,126,144,86,255,228,234,91,0,242,213,24,254,69,44,235,255,220,180,35,0,8,248,7,255,102,47,92,255,240,205,102,255,113,230,171,1,31,185,201,255,194,246,70,255,122,17,187,0,134,70,199,255,149,3,150,255,117,63,103,0,65,104,123,255,212,54,19,1,6,141,88,0,83,134,243,255,136,53,103,0,169,27,180,0,177,49,24,0,111,54,167,0,195,61,215,255,31,1,108,1,60,42,70,0,185,3,162,255,194,149,40,255,246,127,38,254,190,119,38,255,61,119,8,1,96,161,219,255,42,203,221,1,177,242,164,255,245,159,10,0,116,196,0,0,5,93,205,254,128,127,179,0,125,237,246,255,149,162,217,255,87,37,20,254,140,238,192,0,9,9,193,0,97,1,226,0,29,38,10,0,0,136,63,255,229,72,210,254,38,134,92,255,78,218,208,1,104,36,84,255,12,5,193,255,242,175,61,255,191,169,46,1,179,147,147,255,113,190,139,254,125,172,31,0,3,75,252,254,215,36,15,0,193,27,24,1,255,69,149,255,110,129,118,0,203,93,249,0,138,137,64,254,38,70,6,0,153,116,222,0,161,74,123,0,193,99,79,255,118,59,94,255,61,12,43,1,146,177,157,0,46,147,191,0,16,255,38,0,11,51,31,1,60,58,98,255,111,194,77,1,154,91,244,0,140,40,144,1,173,10,251,0,203,209,50,254,108,130,78,0,228,180,90,0,174,7,250,0,31,174,60,0,41,171,30,0,116,99,82,255,118,193,139,255,187,173,198,254,218,111,56,0,185,123,216,0,249,158,52,0,52,180,93,255,201,9,91,255,56,45,166,254,132,155,203,255,58,232,110,0,52,211,89,255,253,0,162,1,9,87,183,0,145,136,44,1,94,122,245,0,85,188,171,1,147,92,198,0,0,8,104,0,30,95,174,0,221,230,52,1,247,247,235,255,137,174,53,255,35,21,204,255,71,227,214,1,232,82,194,0,11,48,227,255,170,73,184,255,198,251,252,254,44,112,34,0,131,101,131,255,72,168,187,0,132,135,125,255,138,104,97,255,238,184,168,255,243,104,84,255,135,216,226,255,139,144,237,0,188,137,150,1,80,56,140,255,86,169,167,255,194,78,25,255,220,17,180,255,17,13,193,0,117,137,212,255,141,224,151,0,49,244,175,0,193,99,175,255,19,99,154,1,255,65,62,255,156,210,55,255,242,244,3,255,250,14,149,0,158,88,217,255,157,207,134,254,251,232,28,0,46,156,251,255,171,56,184,255,239,51,234,0,142,138,131,255,25,254,243,1,10,201,194,0,63,97,75,0,210,239,162,0,192,200,31,1,117,214,243,0,24,71,222,254,54,40,232,255,76,183,111,254,144,14,87,255,214,79,136,255,216,196,212,0,132,27,140,254,131,5,253,0,124,108,19,255,28,215,75,0,76,222,55,254,233,182,63,0,68,171,191,254,52,111,222,255,10,105,77,255,80,170,235,0,143,24,88,255,45,231,121,0,148,129,224,1,61,246,84,0,253,46,219,255,239,76,33,0,49,148,18,254,230,37,69,0,67,134,22,254,142,155,94,0,31,157,211,254,213,42,30,255,4,228,247,254,252,176,13,255,39,0,31,254,241,244,255,255,170,45,10,254,253,222,249,0,222,114,132,0,255,47,6,255,180,163,179,1,84,94,151,255,89,209,82,254,229,52,169,255,213,236,0,1,214,56,228,255,135,119,151,255,112,201,193,0,83,160,53,254,6,151,66,0,18,162,17,0,233,97,91,0,131,5,78,1,181,120,53,255,117,95,63,255,237,117,185,0,191,126,136,255,144,119,233,0,183,57,97,1,47,201,187,255,167,165,119,1,45,100,126,0,21,98,6,254,145,150,95,255,120,54,152,0,209,98,104,0,143,111,30,254,184,148,249,0,235,216,46,0,248,202,148,255,57,95,22,0,242,225,163,0,233,247,232,255,71,171,19,255,103,244,49,255,84,103,93,255,68,121,244,1,82,224,13,0,41,79,43,255,249,206,167,255,215,52,21,254,192,32,22,255,247,111,60,0,101,74,38,255,22,91,84,254,29,28,13,255,198,231,215,254,244,154,200,0,223,137,237,0,211,132,14,0,95,64,206,255,17,62,247,255,233,131,121,1,93,23,77,0,205,204,52,254,81,189,136,0,180,219,138,1,143,18,94,0,204,43,140,254,188,175,219,0,111,98,143,255,151,63,162,255,211,50,71,254,19,146,53,0,146,45,83,254,178,82,238,255,16,133,84,255,226,198,93,255,201,97,20,255,120,118,35,255,114,50,231,255,162,229,156,255,211,26,12,0,114,39,115,255,206,212,134,0,197,217,160,255,116,129,94,254,199,215,219,255,75,223,249,1,253,116,181,255,232,215,104,255,228,130,246,255,185,117,86,0,14,5,8,0,239,29,61,1,237,87,133,255,125,146,137,254,204,168,223,0,46,168,245,0,154,105,22,0,220,212,161,255,107,69,24,255,137,218,181,255,241,84,198,255,130,122,211,255,141,8,153,255,190,177,118,0,96,89,178,0,255,16,48,254,122,96,105,255,117,54,232,255,34,126,105,255,204,67,166,0,232,52,138,255,211,147,12,0,25,54,7,0,44,15,215,254,51,236,45,0,190,68,129,1,106,147,225,0,28,93,45,254,236,141,15,255,17,61,161,0,220,115,192,0,236,145,24,254,111,168,169,0,224,58,63,255,127,164,188,0,82,234,75,1,224,158,134,0,209,68,110,1,217,166,217,0,70,225,166,1,187,193,143,255,16,7,88,255,10,205,140,0,117,192,156,1,17,56,38,0,27,124,108,1,171,215,55,255,95,253,212,0,155,135,168,255,246,178,153,254,154,68,74,0,232,61,96,254,105,132,59,0,33,76,199,1,189,176,130,255,9,104,25,254,75,198,102,255,233,1,112,0,108,220,20,255,114,230,70,0,140,194,133,255,57,158,164,254,146,6,80,255,169,196,97,1,85,183,130,0,70,158,222,1,59,237,234,255,96,25,26,255,232,175,97,255,11,121,248,254,88,35,194,0,219,180,252,254,74,8,227,0,195,227,73,1,184,110,161,255,49,233,164,1,128,53,47,0,82,14,121,255,193,190,58,0,48,174,117,255,132,23,32,0,40,10,134,1,22,51,25,255,240,11,176,255,110,57,146,0,117,143,239,1,157,101,118,255,54,84,76,0,205,184,18,255,47,4,72,255,78,112,85,255,193,50,66,1,93,16,52,255,8,105,134,0,12,109,72,255,58,156,251,0,144,35,204,0,44,160,117,254,50,107,194,0,1,68,165,255,111,110,162,0,158,83,40,254,76,214,234,0,58,216,205,255,171,96,147,255,40,227,114,1,176,227,241,0,70,249,183,1,136,84,139,255,60,122,247,254,143,9,117,255,177,174,137,254,73,247,143,0,236,185,126,255,62,25,247,255,45,64,56,255,161,244,6,0,34,57,56,1,105,202,83,0,128,147,208,0,6,103,10,255,74,138,65,255,97,80,100,255,214,174,33,255,50,134,74,255,110,151,130,254,111,84,172,0,84,199,75,254,248,59,112,255,8,216,178,1,9,183,95,0,238,27,8,254,170,205,220,0,195,229,135,0,98,76,237,255,226,91,26,1,82,219,39,255,225,190,199,1,217,200,121,255,81,179,8,255,140,65,206,0,178,207,87,254,250,252,46,255,104,89,110,1,253,189,158,255,144,214,158,255,160,245,54,255,53,183,92,1,21,200,194,255,146,33,113,1,209,1,255,0,235,106,43,255,167,52,232,0,157,229,221,0,51,30,25,0,250,221,27,1,65,147,87,255,79,123,196,0,65,196,223,255,76,44,17,1,85,241,68,0,202,183,249,255,65,212,212,255,9,33,154,1,71,59,80,0,175,194,59,255,141,72,9,0,100,160,244,0,230,208,56,0,59,25,75,254,80,194,194,0,18,3,200,254,160,159,115,0,132,143,247,1,111,93,57,255,58,237,11,1,134,222,135,255,122,163,108,1,123,43,190,255,251,189,206,254,80,182,72,255,208,246,224,1,17,60,9,0,161,207,38,0,141,109,91,0,216,15,211,255,136,78,110,0,98,163,104,255,21,80,121,255,173,178,183,1,127,143,4,0,104,60,82,254,214,16,13,255,96,238,33,1,158,148,230,255,127,129,62,255,51,255,210,255,62,141,236,254,157,55,224,255,114,39,244,0,192,188,250,255,228,76,53,0,98,84,81,255,173,203,61,254,147,50,55,255,204,235,191,0,52,197,244,0,88,43,211,254,27,191,119,0,188,231,154,0,66,81,161,0,92,193,160,1,250,227,120,0,123,55,226,0,184,17,72,0,133,168,10,254,22,135,156,255,41,25,103,255,48,202,58,0,186,149,81,255,188,134,239,0,235,181,189,254,217,139,188,255,74,48,82,0,46,218,229,0,189,253,251,0,50,229,12,255,211,141,191,1,128,244,25,255,169,231,122,254,86,47,189,255,132,183,23,255,37,178,150,255,51,137,253,0,200,78,31,0,22,105,50,0,130,60,0,0,132,163,91,254,23,231,187,0,192,79,239,0,157,102,164,255,192,82,20,1,24,181,103,255,240,9,234,0,1,123,164,255,133,233,0,255,202,242,242,0,60,186,245,0,241,16,199,255,224,116,158,254,191,125,91,255,224,86,207,0,121,37,231,255,227,9,198,255,15,153,239,255,121,232,217,254,75,112,82,0,95,12,57,254,51,214,105,255,148,220,97,1,199,98,36,0,156,209,12,254,10,212,52,0,217,180,55,254,212,170,232,255,216,20,84,255,157,250,135,0,157,99,127,254,1,206,41,0,149,36,70,1,54,196,201,255,87,116,0,254,235,171,150,0,27,163,234,0,202,135,180,0,208,95,0,254,123,156,93,0,183,62,75,0,137,235,182,0,204,225,255,255,214,139,210,255,2,115,8,255,29,12,111,0,52,156,1,0,253,21,251,255,37,165,31,254,12,130,211,0,106,18,53,254,42,99,154,0,14,217,61,254,216,11,92,255,200,197,112,254,147,38,199,0,36,252,120,254,107,169,77,0,1,123,159,255,207,75,102,0,163,175,196,0,44,1,240,0,120,186,176,254,13,98,76,255,237,124,241,255,232,146,188,255,200,96,224,0,204,31,41,0,208,200,13,0,21,225,96,255,175,156,196,0,247,208,126,0,62,184,244,254,2,171,81,0,85,115,158,0,54,64,45,255,19,138,114,0,135,71,205,0,227,47,147,1,218,231,66,0,253,209,28,0,244,15,173,255,6,15,118,254,16,150,208,255,185,22,50,255,86,112,207,255,75,113,215,1,63,146,43,255,4,225,19,254,227,23,62,255,14,255,214,254,45,8,205,255,87,197,151,254,210,82,215,255,245,248,247,255,128,248,70,0,225,247,87,0,90,120,70,0,213,245,92,0,13,133,226,0,47,181,5,1,92,163,105,255,6,30,133,254,232,178,61,255,230,149,24,255,18,49,158,0,228,100,61,254,116,243,251,255,77,75,92,1,81,219,147,255,76,163,254,254,141,213,246,0,232,37,152,254,97,44,100,0,201,37,50,1,212,244,57,0,174,171,183,255,249,74,112,0,166,156,30,0,222,221,97,255,243,93,73,254,251,101,100,255,216,217,93,255,254,138,187,255,142,190,52,255,59,203,177,255,200,94,52,0,115,114,158,255,165,152,104,1,126,99,226,255,118,157,244,1,107,200,16,0,193,90,229,0,121,6,88,0,156,32,93,254,125,241,211,255,14,237,157,255,165,154,21,255,184,224,22,255,250,24,152,255,113,77,31,0,247,171,23,255,237,177,204,255,52,137,145,255,194,182,114,0,224,234,149,0,10,111,103,1,201,129,4,0,238,142,78,0,52,6,40,255,110,213,165,254,60,207,253,0,62,215,69,0,96,97,0,255,49,45,202,0,120,121,22,255,235,139,48,1,198,45,34,255,182,50,27,1,131,210,91,255,46,54,128,0,175,123,105,255,198,141,78,254,67,244,239,255,245,54,103,254,78,38,242,255,2,92,249,254,251,174,87,255,139,63,144,0,24,108,27,255,34,102,18,1,34,22,152,0,66,229,118,254,50,143,99,0,144,169,149,1,118,30,152,0,178,8,121,1,8,159,18,0,90,101,230,255,129,29,119,0,68,36,11,1,232,183,55,0,23,255,96,255,161,41,193,255,63,139,222,0,15,179,243,0,255,100,15,255,82,53,135,0,137,57,149,1,99,240,170,255,22,230,228,254,49,180,82,255,61,82,43,0,110,245,217,0,199,125,61,0,46,253,52,0,141,197,219,0,211,159,193,0,55,121,105,254,183,20,129,0,169,119,170,255,203,178,139,255,135,40,182,255,172,13,202,255,65,178,148,0,8,207,43,0,122,53,127,1,74,161,48,0,227,214,128,254,86,11,243,255,100,86,7,1,245,68,134,255,61,43,21,1,152,84,94,255,190,60,250,254,239,118,232,255,214,136,37,1,113,76,107,255,93,104,100,1,144,206,23,255,110,150,154,1,228,103,185,0,218,49,50,254,135,77,139,255,185,1,78,0,0,161,148,255,97,29,233,255,207,148,149,255,160,168,0,0,91,128,171,255,6,28,19,254,11,111,247,0,39,187,150,255,138,232,149,0,117,62,68,255,63,216,188,255,235,234,32,254,29,57,160,255,25,12,241,1,169,60,191,0,32,131,141,255,237,159,123,255,94,197,94,254,116,254,3,255,92,179,97,254,121,97,92,255,170,112,14,0,21,149,248,0,248,227,3,0,80,96,109,0,75,192,74,1,12,90,226,255,161,106,68,1,208,114,127,255,114,42,255,254,74,26,74,255,247,179,150,254,121,140,60,0,147,70,200,255,214,40,161,255,161,188,201,255,141,65,135,255,242,115,252,0,62,47,202,0,180,149,255,254,130,55,237,0,165,17,186,255,10,169,194,0,156,109,218,255,112,140,123,255,104,128,223,254,177,142,108,255,121,37,219,255,128,77,18,255,111,108,23,1,91,192,75,0,174,245,22,255,4,236,62,255,43,64,153,1,227,173,254,0,237,122,132,1,127,89,186,255,142,82,128,254,252,84,174,0,90,179,177,1,243,214,87,255,103,60,162,255,208,130,14,255,11,130,139,0,206,129,219,255,94,217,157,255,239,230,230,255,116,115,159,254,164,107,95,0,51,218,2,1,216,125,198,255,140,202,128,254,11,95,68,255,55,9,93,254,174,153,6,255,204,172,96,0,69,160,110,0,213,38,49,254,27,80,213,0,118,125,114,0,70,70,67,255,15,142,73,255,131,122,185,255,243,20,50,254,130,237,40,0,210,159,140,1,197,151,65,255,84,153,66,0,195,126,90,0,16,238,236,1,118,187,102,255,3,24,133,255,187,69,230,0,56,197,92,1,213,69,94,255,80,138,229,1,206,7,230,0,222,111,230,1,91,233,119,255,9,89,7,1,2,98,1,0,148,74,133,255,51,246,180,255,228,177,112,1,58,189,108,255,194,203,237,254,21,209,195,0,147,10,35,1,86,157,226,0,31,163,139,254,56,7,75,255,62,90,116,0,181,60,169,0,138,162,212,254,81,167,31,0,205,90,112,255,33,112,227,0,83,151,117,1,177,224,73,255,174,144,217,255,230,204,79,255,22,77,232,255,114,78,234,0,224,57,126,254,9,49,141,0,242,147,165,1,104,182,140,255,167,132,12,1,123,68,127,0,225,87,39,1,251,108,8,0,198,193,143,1,121,135,207,255,172,22,70,0,50,68,116,255,101,175,40,255,248,105,233,0,166,203,7,0,110,197,218,0,215,254,26,254,168,226,253,0,31,143,96,0,11,103,41,0,183,129,203,254,100,247,74,255,213,126,132,0,210,147,44,0,199,234,27,1,148,47,181,0,155,91,158,1,54,105,175,255,2,78,145,254,102,154,95,0,128,207,127,254,52,124,236,255,130,84,71,0,221,243,211,0,152,170,207,0,222,106,199,0,183,84,94,254,92,200,56,255,138,182,115,1,142,96,146,0,133,136,228,0,97,18,150,0,55,251,66,0,140,102,4,0,202,103,151,0,30,19,248,255,51,184,207,0,202,198,89,0,55,197,225,254,169,95,249,255,66,65,68,255,188,234,126,0,166,223,100,1,112,239,244,0,144,23,194,0,58,39,182,0,244,44,24,254,175,68,179,255,152,118,154,1,176,162,130,0,217,114,204,254,173,126,78,255,33,222,30,255,36,2,91,255,2,143,243,0,9,235,215,0,3,171,151,1,24,215,245,255,168,47,164,254,241,146,207,0,69,129,180,0,68,243,113,0,144,53,72,254,251,45,14,0,23,110,168,0,68,68,79,255,110,70,95,254,174,91,144,255,33,206,95,255,137,41,7,255,19,187,153,254,35,255,112,255,9,145,185,254,50,157,37,0,11,112,49,1,102,8,190,255,234,243,169,1,60,85,23,0,74,39,189,0,116,49,239,0,173,213,210,0,46,161,108,255,159,150,37,0,196,120,185,255,34,98,6,255,153,195,62,255,97,230,71,255,102,61,76,0,26,212,236,255,164,97,16,0,198,59,146,0,163,23,196,0,56,24,61,0,181,98,193,0,251,147,229,255,98,189,24,255,46,54,206,255,234,82,246,0,183,103,38,1,109,62,204,0,10,240,224,0,146,22,117,255,142,154,120,0,69,212,35,0,208,99,118,1,121,255,3,255,72,6,194,0,117,17,197,255,125,15,23,0,154,79,153,0,214,94,197,255,185,55,147,255,62,254,78,254,127,82,153,0,110,102,63,255,108,82,161,255,105,187,212,1,80,138,39,0,60,255,93,255,72,12,186,0,210,251,31,1,190,167,144,255,228,44,19,254,128,67,232,0,214,249,107,254,136,145,86,255,132,46,176,0,189,187,227,255,208,22,140,0,217,211,116,0,50,81,186,254,139,250,31,0,30,64,198,1,135,155,100,0,160,206,23,254,187,162,211,255,16,188,63,0,254,208,49,0,85,84,191,0,241,192,242,255,153,126,145,1,234,162,162,255,230,97,216,1,64,135,126,0,190,148,223,1,52,0,43,255,28,39,189,1,64,136,238,0,175,196,185,0,98,226,213,255,127,159,244,1,226,175,60,0,160,233,142,1,180,243,207,255,69,152,89,1,31,101,21,0,144,25,164,254,139,191,209,0,91,25,121,0,32,147,5,0,39,186,123,255,63,115,230,255,93,167,198,255,143,213,220,255,179,156,19,255,25,66,122,0,214,160,217,255,2,45,62,255,106,79,146,254,51,137,99,255,87,100,231,255,175,145,232,255,101,184,1,255,174,9,125,0,82,37,161,1,36,114,141,255,48,222,142,255,245,186,154,0,5,174,221,254,63,114,155,255,135,55,160,1,80,31,135,0,126,250,179,1,236,218,45,0,20,28,145,1,16,147,73,0,249,189,132,1,17,189,192,255,223,142,198,255,72,20,15,255,250,53,237,254,15,11,18,0,27,211,113,254,213,107,56,255,174,147,146,255,96,126,48,0,23,193,109,1,37,162,94,0,199,157,249,254,24,128,187,255,205,49,178,254,93,164,42,255,43,119,235,1,88,183,237,255,218,210,1,255,107,254,42,0,230,10,99,255,162,0,226,0,219,237,91,0,129,178,203,0,208,50,95,254,206,208,95,255,247,191,89,254,110,234,79,255,165,61,243,0,20,122,112,255,246,246,185,254,103,4,123,0,233,99,230,1,219,91,252,255,199,222,22,255,179,245,233,255,211,241,234,0,111,250,192,255,85,84,136,0,101,58,50,255,131,173,156,254,119,45,51,255,118,233,16,254,242,90,214,0,94,159,219,1,3,3,234,255,98,76,92,254,80,54,230,0,5,228,231,254,53,24,223,255,113,56,118,1,20,132,1,255,171,210,236,0,56,241,158,255,186,115,19,255,8,229,174,0,48,44,0,1,114,114,166,255,6,73,226,255,205,89,244,0,137,227,75,1,248,173,56,0,74,120,246,254,119,3,11,255,81,120,198,255,136,122,98,255,146,241,221,1,109,194,78,255,223,241,70,1,214,200,169,255,97,190,47,255,47,103,174,255,99,92,72,254,118,233,180,255,193,35,233,254,26,229,32,255,222,252,198,0,204,43,71,255,199,84,172,0,134,102,190,0,111,238,97,254,230,40,230,0,227,205,64,254,200,12,225,0,166,25,222,0,113,69,51,255,143,159,24,0,167,184,74,0,29,224,116,254,158,208,233,0,193,116,126,255,212,11,133,255,22,58,140,1,204,36,51,255,232,30,43,0,235,70,181,255,64,56,146,254,169,18,84,255,226,1,13,255,200,50,176,255,52,213,245,254,168,209,97,0,191,71,55,0,34,78,156,0,232,144,58,1,185,74,189,0,186,142,149,254,64,69,127,255,161,203,147,255,176,151,191,0,136,231,203,254,163,182,137,0,161,126,251,254,233,32,66,0,68,207,66,0,30,28,37,0,93,114,96,1,254,92,247,255,44,171,69,0,202,119,11,255,188,118,50,1,255,83,136,255,71,82,26,0,70,227,2,0,32,235,121,1,181,41,154,0,71,134,229,254,202,255,36,0,41,152,5,0,154,63,73,255,34,182,124,0,121,221,150,255,26,204,213,1,41,172,87,0,90,157,146,255,109,130,20,0,71,107,200,255,243,102,189,0,1,195,145,254,46,88,117,0,8,206,227,0,191,110,253,255,109,128,20,254,134,85,51,255,137,177,112,1,216,34,22,255,131,16,208,255,121,149,170,0,114,19,23,1,166,80,31,255,113,240,122,0,232,179,250,0,68,110,180,254,210,170,119,0,223,108,164,255,207,79,233,255,27,229,226,254,209,98,81,255,79,68,7,0,131,185,100,0,170,29,162,255,17,162,107,255,57,21,11,1,100,200,181,255,127,65,166,1,165,134,204,0,104,167,168,0,1,164,79,0,146,135,59,1,70,50,128,255,102,119,13,254,227,6,135,0,162,142,179,255,160,100,222,0,27,224,219,1,158,93,195,255,234,141,137,0,16,24,125,255,238,206,47,255,97,17,98,255,116,110,12,255,96,115,77,0,91,227,232,255,248,254,79,255,92,229,6,254,88,198,139,0,206,75,129,0,250,77,206,255,141,244,123,1,138,69,220,0,32,151,6,1,131,167,22,255,237,68,167,254,199,189,150,0,163,171,138,255,51,188,6,255,95,29,137,254,148,226,179,0,181,107,208,255,134,31,82,255,151,101,45,255,129,202,225,0,224,72,147,0,48,138,151,255,195,64,206,254,237,218,158,0,106,29,137,254,253,189,233,255,103,15,17,255,194,97,255,0,178,45,169,254,198,225,155,0,39,48,117,255,135,106,115,0,97,38,181,0,150,47,65,255,83,130,229,254,246,38,129,0,92,239,154,254,91,99,127,0,161,111,33,255,238,217,242,255,131,185,195,255,213,191,158,255,41,150,218,0,132,169,131,0,89,84,252,1,171,70,128,255,163,248,203,254,1,50,180,255,124,76,85,1,251,111,80,0,99,66,239,255,154,237,182,255,221,126,133,254,74,204,99,255,65,147,119,255,99,56,167,255,79,248,149,255,116,155,228,255,237,43,14,254,69,137,11,255,22,250,241,1,91,122,143,255,205,249,243,0,212,26,60,255,48,182,176,1,48,23,191,255,203,121,152,254,45,74,213,255,62,90,18,254,245,163,230,255,185,106,116,255,83,35,159,0,12,33,2,255,80,34,62,0,16,87,174,255,173,101,85,0,202,36,81,254,160,69,204,255,64,225,187,0,58,206,94,0,86,144,47,0,229,86,245,0,63,145,190,1,37,5,39,0,109,251,26,0,137,147,234,0,162,121,145,255,144,116,206,255,197,232,185,255,183,190,140,255,73,12,254,255,139,20,242,255,170,90,239,255,97,66,187,255,245,181,135,254,222,136,52,0,245,5,51,254,203,47,78,0,152,101,216,0,73,23,125,0,254,96,33,1,235,210,73,255,43,209,88,1,7,129,109,0,122,104,228,254,170,242,203,0,242,204,135,255,202,28,233,255,65,6,127,0,159,144,71,0,100,140,95,0,78,150,13,0,251,107,118,1,182,58,125,255,1,38,108,255,141,189,209,255,8,155,125,1,113,163,91,255,121,79,190,255,134,239,108,255,76,47,248,0,163,228,239,0,17,111,10,0,88,149,75,255,215,235,239,0,167,159,24,255,47,151,108,255,107,209,188,0,233,231,99,254,28,202,148,255,174,35,138,255,110,24,68,255,2,69,181,0,107,102,82,0,102,237,7,0,92,36,237,255,221,162,83,1,55,202,6,255,135,234,135,255,24,250,222,0,65,94,168,254,245,248,210,255,167,108,201,254,255,161,111,0,205,8,254,0,136,13,116,0,100,176,132,255,43,215,126,255,177,133,130,255,158,79,148,0,67,224,37,1,12,206,21,255,62,34,110,1,237,104,175,255,80,132,111,255,142,174,72,0,84,229,180,254,105,179,140,0,64,248,15,255,233,138,16,0,245,67,123,254,218,121,212,255,63,95,218,1,213,133,137,255,143,182,82,255,48,28,11,0,244,114,141,1,209,175,76,255,157,181,150,255,186,229,3,255,164,157,111,1,231,189,139,0,119,202,190,255,218,106,64,255,68,235,63,254,96,26,172,255,187,47,11,1,215,18,251,255,81,84,89,0,68,58,128,0,94,113,5,1,92,129,208,255,97,15,83,254,9,28,188,0,239,9,164,0,60,205,152,0,192,163,98,255,184,18,60,0,217,182,139,0,109,59,120,255,4,192,251,0,169,210,240,255,37,172,92,254,148,211,245,255,179,65,52,0,253,13,115,0,185,174,206,1,114,188,149,255,237,90,173,0,43,199,192,255,88,108,113,0,52,35,76,0,66,25,148,255,221,4,7,255,151,241,114,255,190,209,232,0,98,50,199,0,151,150,213,255,18,74,36,1,53,40,7,0,19,135,65,255,26,172,69,0,174,237,85,0,99,95,41,0,3,56,16,0,39,160,177,255,200,106,218,254,185,68,84,255,91,186,61,254,67,143,141,255,13,244,166,255,99,114,198,0,199,110,163,255,193,18,186,0,124,239,246,1,110,68,22,0,2,235,46,1,212,60,107,0,105,42,105,1,14,230,152,0,7,5,131,0,141,104,154,255,213,3,6,0,131,228,162,255,179,100,28,1,231,123,85,255,206,14,223,1,253,96,230,0,38,152,149,1,98,137,122,0,214,205,3,255,226,152,179,255,6,133,137,0,158,69,140,255,113,162,154,255,180,243,172,255,27,189,115,255,143,46,220,255,213,134,225,255,126,29,69,0,188,43,137,1,242,70,9,0,90,204,255,255,231,170,147,0,23,56,19,254,56,125,157,255,48,179,218,255,79,182,253,255,38,212,191,1,41,235,124,0,96,151,28,0,135,148,190,0,205,249,39,254,52,96,136,255,212,44,136,255,67,209,131,255,252,130,23,255,219,128,20,255,198,129,118,0,108,101,11,0,178,5,146,1,62,7,100,255,181,236,94,254,28,26,164,0,76,22,112,255,120,102,79,0,202,192,229,1,200,176,215,0,41,64,244,255,206,184,78,0,167,45,63,1,160,35,0,255,59,12,142,255,204,9,144,255,219,94,229,1,122,27,112,0,189,105,109,255,64,208,74,255,251,127,55,1,2,226,198,0,44,76,209,0,151,152,77,255,210,23,46,1,201,171,69,255,44,211,231,0,190,37,224,255,245,196,62,255,169,181,222,255,34,211,17,0,119,241,197,255,229,35,152,1,21,69,40,255,178,226,161,0,148,179,193,0,219,194,254,1,40,206,51,255,231,92,250,1,67,153,170,0,21,148,241,0,170,69,82,255,121,18,231,255,92,114,3,0,184,62,230,0,225,201,87,255,146,96,162,255,181,242,220,0,173,187,221,1,226,62,170,255,56,126,217,1,117,13,227,255,179,44,239,0,157,141,155,255,144,221,83,0,235,209,208,0,42,17,165,1,251,81,133,0,124,245,201,254,97,211,24,255,83,214,166,0,154,36,9,255,248,47,127,0,90,219,140,255,161,217,38,254,212,147,63,255,66,84,148,1,207,3,1,0,230,134,89,1,127,78,122,255,224,155,1,255,82,136,74,0,178,156,208,255,186,25,49,255,222,3,210,1,229,150,190,255,85,162,52,255,41,84,141,255,73,123,84,254,93,17,150,0,119,19,28,1,32,22,215,255,28,23,204,255,142,241,52,255,228,52,125,0,29,76,207,0,215,167,250,254,175,164,230,0,55,207,105,1,109,187,245,255,161,44,220,1,41,101,128,255,167,16,94,0,93,214,107,255,118,72,0,254,80,61,234,255,121,175,125,0,139,169,251,0,97,39,147,254,250,196,49,255,165,179,110,254,223,70,187,255,22,142,125,1,154,179,138,255,118,176,42,1,10,174,153,0,156,92,102,0,168,13,161,255,143,16,32,0,250,197,180,255,203,163,44,1,87,32,36,0,161,153,20,255,123,252,15,0,25,227,80,0,60,88,142,0,17,22,201,1,154,205,77,255,39,63,47,0,8,122,141,0,128,23,182,254,204,39,19,255],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+20480);allocate([4,112,29,255,23,36,140,255,210,234,116,254,53,50,63,255,121,171,104,255,160,219,94,0,87,82,14,254,231,42,5,0,165,139,127,254,86,78,38,0,130,60,66,254,203,30,45,255,46,196,122,1,249,53,162,255,136,143,103,254,215,210,114,0,231,7,160,254,169,152,42,255,111,45,246,0,142,131,135,255,131,71,204,255,36,226,11,0,0,28,242,255,225,138,213,255,247,46,216,254,245,3,183,0,108,252,74,1,206,26,48,255,205,54,246,255,211,198,36,255,121,35,50,0,52,216,202,255,38,139,129,254,242,73,148,0,67,231,141,255,42,47,204,0,78,116,25,1,4,225,191,255,6,147,228,0,58,88,177,0,122,165,229,255,252,83,201,255,224,167,96,1,177,184,158,255,242,105,179,1,248,198,240,0,133,66,203,1,254,36,47,0,45,24,115,255,119,62,254,0,196,225,186,254,123,141,172,0,26,85,41,255,226,111,183,0,213,231,151,0,4,59,7,255,238,138,148,0,66,147,33,255,31,246,141,255,209,141,116,255,104,112,31,0,88,161,172,0,83,215,230,254,47,111,151,0,45,38,52,1,132,45,204,0,138,128,109,254,233,117,134,255,243,190,173,254,241,236,240,0,82,127,236,254,40,223,161,255,110,182,225,255,123,174,239,0,135,242,145,1,51,209,154,0,150,3,115,254,217,164,252,255,55,156,69,1,84,94,255,255,232,73,45,1,20,19,212,255,96,197,59,254,96,251,33,0,38,199,73,1,64,172,247,255,117,116,56,255,228,17,18,0,62,138,103,1,246,229,164,255,244,118,201,254,86,32,159,255,109,34,137,1,85,211,186,0,10,193,193,254,122,194,177,0,122,238,102,255,162,218,171,0,108,217,161,1,158,170,34,0,176,47,155,1,181,228,11,255,8,156,0,0,16,75,93,0,206,98,255,1,58,154,35,0,12,243,184,254,67,117,66,255,230,229,123,0,201,42,110,0,134,228,178,254,186,108,118,255,58,19,154,255,82,169,62,255,114,143,115,1,239,196,50,255,173,48,193,255,147,2,84,255,150,134,147,254,95,232,73,0,109,227,52,254,191,137,10,0,40,204,30,254,76,52,97,255,164,235,126,0,254,124,188,0,74,182,21,1,121,29,35,255,241,30,7,254,85,218,214,255,7,84,150,254,81,27,117,255,160,159,152,254,66,24,221,255,227,10,60,1,141,135,102,0,208,189,150,1,117,179,92,0,132,22,136,255,120,199,28,0,21,129,79,254,182,9,65,0,218,163,169,0,246,147,198,255,107,38,144,1,78,175,205,255,214,5,250,254,47,88,29,255,164,47,204,255,43,55,6,255,131,134,207,254,116,100,214,0,96,140,75,1,106,220,144,0,195,32,28,1,172,81,5,255,199,179,52,255,37,84,203,0,170,112,174,0,11,4,91,0,69,244,27,1,117,131,92,0,33,152,175,255,140,153,107,255,251,135,43,254,87,138,4,255,198,234,147,254,121,152,84,255,205,101,155,1,157,9,25,0,72,106,17,254,108,153,0,255,189,229,186,0,193,8,176,255,174,149,209,0,238,130,29,0,233,214,126,1,61,226,102,0,57,163,4,1,198,111,51,255,45,79,78,1,115,210,10,255,218,9,25,255,158,139,198,255,211,82,187,254,80,133,83,0,157,129,230,1,243,133,134,255,40,136,16,0,77,107,79,255,183,85,92,1,177,204,202,0,163,71,147,255,152,69,190,0,172,51,188,1,250,210,172,255,211,242,113,1,89,89,26,255,64,66,111,254,116,152,42,0,161,39,27,255,54,80,254,0,106,209,115,1,103,124,97,0,221,230,98,255,31,231,6,0,178,192,120,254,15,217,203,255,124,158,79,0,112,145,247,0,92,250,48,1,163,181,193,255,37,47,142,254,144,189,165,255,46,146,240,0,6,75,128,0,41,157,200,254,87,121,213,0,1,113,236,0,5,45,250,0,144,12,82,0,31,108,231,0,225,239,119,255,167,7,189,255,187,228,132,255,110,189,34,0,94,44,204,1,162,52,197,0,78,188,241,254,57,20,141,0,244,146,47,1,206,100,51,0,125,107,148,254,27,195,77,0,152,253,90,1,7,143,144,255,51,37,31,0,34,119,38,255,7,197,118,0,153,188,211,0,151,20,116,254,245,65,52,255,180,253,110,1,47,177,209,0,161,99,17,255,118,222,202,0,125,179,252,1,123,54,126,255,145,57,191,0,55,186,121,0,10,243,138,0,205,211,229,255,125,156,241,254,148,156,185,255,227,19,188,255,124,41,32,255,31,34,206,254,17,57,83,0,204,22,37,255,42,96,98,0,119,102,184,1,3,190,28,0,110,82,218,255,200,204,192,255,201,145,118,0,117,204,146,0,132,32,98,1,192,194,121,0,106,161,248,1,237,88,124,0,23,212,26,0,205,171,90,255,248,48,216,1,141,37,230,255,124,203,0,254,158,168,30,255,214,248,21,0,112,187,7,255,75,133,239,255,74,227,243,255,250,147,70,0,214,120,162,0,167,9,179,255,22,158,18,0,218,77,209,1,97,109,81,255,244,33,179,255,57,52,57,255,65,172,210,255,249,71,209,255,142,169,238,0,158,189,153,255,174,254,103,254,98,33,14,0,141,76,230,255,113,139,52,255,15,58,212,0,168,215,201,255,248,204,215,1,223,68,160,255,57,154,183,254,47,231,121,0,106,166,137,0,81,136,138,0,165,43,51,0,231,139,61,0,57,95,59,254,118,98,25,255,151,63,236,1,94,190,250,255,169,185,114,1,5,250,58,255,75,105,97,1,215,223,134,0,113,99,163,1,128,62,112,0,99,106,147,0,163,195,10,0,33,205,182,0,214,14,174,255,129,38,231,255,53,182,223,0,98,42,159,255,247,13,40,0,188,210,177,1,6,21,0,255,255,61,148,254,137,45,129,255,89,26,116,254,126,38,114,0,251,50,242,254,121,134,128,255,204,249,167,254,165,235,215,0,202,177,243,0,133,141,62,0,240,130,190,1,110,175,255,0,0,20,146,1,37,210,121,255,7,39,130,0,142,250,84,255,141,200,207,0,9,95,104,255,11,244,174,0,134,232,126,0,167,1,123,254,16,193,149,255,232,233,239,1,213,70,112,255,252,116,160,254,242,222,220,255,205,85,227,0,7,185,58,0,118,247,63,1,116,77,177,255,62,245,200,254,63,18,37,255,107,53,232,254,50,221,211,0,162,219,7,254,2,94,43,0,182,62,182,254,160,78,200,255,135,140,170,0,235,184,228,0,175,53,138,254,80,58,77,255,152,201,2,1,63,196,34,0,5,30,184,0,171,176,154,0,121,59,206,0,38,99,39,0,172,80,77,254,0,134,151,0,186,33,241,254,94,253,223,255,44,114,252,0,108,126,57,255,201,40,13,255,39,229,27,255,39,239,23,1,151,121,51,255,153,150,248,0,10,234,174,255,118,246,4,254,200,245,38,0,69,161,242,1,16,178,150,0,113,56,130,0,171,31,105,0,26,88,108,255,49,42,106,0,251,169,66,0,69,93,149,0,20,57,254,0,164,25,111,0,90,188,90,255,204,4,197,0,40,213,50,1,212,96,132,255,88,138,180,254,228,146,124,255,184,246,247,0,65,117,86,255,253,102,210,254,254,121,36,0,137,115,3,255,60,24,216,0,134,18,29,0,59,226,97,0,176,142,71,0,7,209,161,0,189,84,51,254,155,250,72,0,213,84,235,255,45,222,224,0,238,148,143,255,170,42,53,255,78,167,117,0,186,0,40,255,125,177,103,255,69,225,66,0,227,7,88,1,75,172,6,0,169,45,227,1,16,36,70,255,50,2,9,255,139,193,22,0,143,183,231,254,218,69,50,0,236,56,161,1,213,131,42,0,138,145,44,254,136,229,40,255,49,63,35,255,61,145,245,255,101,192,2,254,232,167,113,0,152,104,38,1,121,185,218,0,121,139,211,254,119,240,35,0,65,189,217,254,187,179,162,255,160,187,230,0,62,248,14,255,60,78,97,0,255,247,163,255,225,59,91,255,107,71,58,255,241,47,33,1,50,117,236,0,219,177,63,254,244,90,179,0,35,194,215,255,189,67,50,255,23,135,129,0,104,189,37,255,185,57,194,0,35,62,231,255,220,248,108,0,12,231,178,0,143,80,91,1,131,93,101,255,144,39,2,1,255,250,178,0,5,17,236,254,139,32,46,0,204,188,38,254,245,115,52,255,191,113,73,254,191,108,69,255,22,69,245,1,23,203,178,0,170,99,170,0,65,248,111,0,37,108,153,255,64,37,69,0,0,88,62,254,89,148,144,255,191,68,224,1,241,39,53,0,41,203,237,255,145,126,194,255,221,42,253,255,25,99,151,0,97,253,223,1,74,115,49,255,6,175,72,255,59,176,203,0,124,183,249,1,228,228,99,0,129,12,207,254,168,192,195,255,204,176,16,254,152,234,171,0,77,37,85,255,33,120,135,255,142,194,227,1,31,214,58,0,213,187,125,255,232,46,60,255,190,116,42,254,151,178,19,255,51,62,237,254,204,236,193,0,194,232,60,0,172,34,157,255,189,16,184,254,103,3,95,255,141,233,36,254,41,25,11,255,21,195,166,0,118,245,45,0,67,213,149,255,159,12,18,255,187,164,227,1,160,25,5,0,12,78,195,1,43,197,225,0,48,142,41,254,196,155,60,255,223,199,18,1,145,136,156,0,252,117,169,254,145,226,238,0,239,23,107,0,109,181,188,255,230,112,49,254,73,170,237,255,231,183,227,255,80,220,20,0,194,107,127,1,127,205,101,0,46,52,197,1,210,171,36,255,88,3,90,255,56,151,141,0,96,187,255,255,42,78,200,0,254,70,70,1,244,125,168,0,204,68,138,1,124,215,70,0,102,66,200,254,17,52,228,0,117,220,143,254,203,248,123,0,56,18,174,255,186,151,164,255,51,232,208,1,160,228,43,255,249,29,25,1,68,190,63,0,103,230,9,106,133,174,103,187,114,243,110,60,58,245,79,165,127,82,14,81,140,104,5,155,171,217,131,31,25,205,224,91,152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,109,97,99,115,104,97,53,49,50,50,53,54,0,99,117,114,118,101,50,53,53,49,57,120,115,97,108,115,97,50,48,112,111,108,121,49,51,48,53,0,83,45,62,98,117,102,108,101,110,32,60,61,32,66,76,65,75,69,50,66,95,66,76,79,67,75,66,89,84,69,83,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,47,98,108,97,107,101,50,98,47,114,101,102,47,98,108,97,107,101,50,98,45,114,101,102,46,99,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,95,102,105,110,97,108,0,111,117,116,108,101,110,32,60,61,32,85,73,78,84,56,95,77,65,88,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,47,98,108,97,107,101,50,98,47,114,101,102,47,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,46,99,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,0,107,101,121,108,101,110,32,60,61,32,85,73,78,84,56,95,77,65,88,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,115,97,108,116,95,112,101,114,115,111,110,97,108,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,105,110,105,116,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,105,110,105,116,95,115,97,108,116,95,112,101,114,115,111,110,97,108,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,102,105,110,97,108,0,115,104,97,53,49,50,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,108,97,107,101,50,98,0,120,50,53,53,49,57,98,108,97,107,101,50,98,0,112,111,108,121,49,51,48,53,0,36,97,114,103,111,110,50,105,100,0,36,97,114,103,111,110,50,105,0,36,118,61,0,36,109,61,0,44,116,61,0,44,112,61,0,36,97,114,103,111,110,50,105,100,36,118,61,0,36,97,114,103,111,110,50,105,36,118,61,0,36,97,114,103,111,110,50,105,36,0,36,97,114,103,111,110,50,105,100,36,0,97,114,103,111,110,50,105,0,99,117,114,118,101,50,53,53,49,57,0,120,115,97,108,115,97,50,48,112,111,108,121,49,51,48,53,0,115,105,112,104,97,115,104,50,52,0,101,100,50,53,53,49,57,0,237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,83,105,103,69,100,50,53,53,49,57,32,110,111,32,69,100,50,53,53,49,57,32,99,111,108,108,105,115,105,111,110,115,1,0,120,115,97,108,115,97,50,48,0,106,115,0,123,32,114,101,116,117,114,110,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,40,41,59,32,125,0,123,32,105,102,32,40,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,61,61,32,117,110,100,101,102,105,110,101,100,41,32,123,32,116,114,121,32,123,32,118,97,114,32,119,105,110,100,111,119,95,32,61,32,34,111,98,106,101,99,116,34,32,61,61,61,32,116,121,112,101,111,102,32,119,105,110,100,111,119,32,63,32,119,105,110,100,111,119,32,58,32,115,101,108,102,44,32,99,114,121,112,116,111,95,32,61,32,116,121,112,101,111,102,32,119,105,110,100,111,119,95,46,99,114,121,112,116,111,32,33,61,61,32,34,117,110,100,101,102,105,110,101,100,34,32,63,32,119,105,110,100,111,119,95,46,99,114,121,112,116,111,32,58,32,119,105,110,100,111,119,95,46,109,115,67,114,121,112,116,111,44,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,98,117,102,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,49,41,59,32,99,114,121,112,116,111,95,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,115,40,98,117,102,41,59,32,114,101,116,117,114,110,32,98,117,102,91,48,93,32,62,62,62,32,48,59,32,125,59,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,40,41,59,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,59,32,125,32,99,97,116,99,104,32,40,101,41,32,123,32,116,114,121,32,123,32,118,97,114,32,99,114,121,112,116,111,32,61,32,114,101,113,117,105,114,101,40,39,99,114,121,112,116,111,39,41,44,32,114,97,110,100,111,109,86,97,108,117,101,78,111,100,101,74,83,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,98,117,102,32,61,32,99,114,121,112,116,111,46,114,97,110,100,111,109,66,121,116,101,115,40,52,41,59,32,114,101,116,117,114,110,32,40,98,117,102,91,48,93,32,60,60,32,50,52,32,124,32,98,117,102,91,49,93,32,60,60,32,49,54,32,124,32,98,117,102,91,50,93,32,60,60,32,56,32,124,32,98,117,102,91,51,93,41,32,62,62,62,32,48,59,32,125,59,32,114,97,110,100,111,109,86,97,108,117,101,78,111,100,101,74,83,40,41,59,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,32,114,97,110,100,111,109,86,97,108,117,101,78,111,100,101,74,83,59,32,125,32,99,97,116,99,104,32,40,101,41,32,123,32,116,104,114,111,119,32,39,78,111,32,115,101,99,117,114,101,32,114,97,110,100,111,109,32,110,117,109,98,101,114,32,103,101,110,101,114,97,116,111,114,32,102,111,117,110,100,39,59,32,125,32,125,32,125,32,125,0,76,105,98,115,111,100,105,117,109,68,82,71,98,117,102,95,108,101,110,32,60,61,32,83,73,90,69,95,77,65,88,0,114,97,110,100,111,109,98,121,116,101,115,47,114,97,110,100,111,109,98,121,116,101,115,46,99,0,114,97,110,100,111,109,98,121,116,101,115,0,49,46,48,46,49,51,0,46,47,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,36,55,36,0,0,0,0,12,0,0,0,0,0,0,0,4,0,0,0,8,15,11,7,3,14,10,6,2,13,9,5,1,12,8,4,0,3,3,3,3,7,7,7,7,11,11,11,11,15,15,15,15,3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12,12,8,4,0,13,9,5,1,14,10,6,2,15,11,7,3,1,2,3,0,6,7,4,5,11,8,9,10,12,13,14,15,15,10,5,0,14,9,4,3,13,8,7,2,12,11,6,1],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+30720);var tempDoublePtr=STATICTOP;STATICTOP+=16;Module["_bitshift64Ashr"]=_bitshift64Ashr;Module["_i64Subtract"]=_i64Subtract;Module["_i64Add"]=_i64Add;Module["_memset"]=_memset;Module["_bitshift64Lshr"]=_bitshift64Lshr;Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}function ___assert_fail(condition,filename,line,func){ABORT=true;throw"Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"]+" at "+stackTrace()}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STATIC);Module["_llvm_cttz_i32"]=_llvm_cttz_i32;Module["___udivmoddi4"]=___udivmoddi4;Module["___udivdi3"]=___udivdi3;Module["___muldsi3"]=___muldsi3;Module["___muldi3"]=___muldi3;function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:var maxHeapSize=2*1024*1024*1024-16777216;maxHeapSize=HEAPU8.length;return maxHeapSize/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}Module["_sbrk"]=_sbrk;Module["_memmove"]=_memmove;Module["___uremdi3"]=___uremdi3;DYNAMICTOP_PTR=allocate(1,"i32",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=Runtime.alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity};Module.asmLibraryArg={"abort":abort,"assert":assert,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"_emscripten_asm_const_i":_emscripten_asm_const_i,"_sysconf":_sysconf,"_abort":_abort,"___setErrNo":___setErrNo,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_emscripten_asm_const_v":_emscripten_asm_const_v,"___assert_fail":___assert_fail,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"cttz_i8":cttz_i8};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.DYNAMICTOP_PTR|0;var j=env.tempDoublePtr|0;var k=env.ABORT|0;var l=env.STACKTOP|0;var m=env.STACK_MAX|0;var n=env.cttz_i8|0;var o=0;var p=0;var q=0;var r=0;var s=global.NaN,t=global.Infinity;var u=0,v=0,w=0,x=0,y=0.0;var z=0;var A=global.Math.floor;var B=global.Math.abs;var C=global.Math.sqrt;var D=global.Math.pow;var E=global.Math.cos;var F=global.Math.sin;var G=global.Math.tan;var H=global.Math.acos;var I=global.Math.asin;var J=global.Math.atan;var K=global.Math.atan2;var L=global.Math.exp;var M=global.Math.log;var N=global.Math.ceil;var O=global.Math.imul;var P=global.Math.min;var Q=global.Math.max;var R=global.Math.clz32;var S=env.abort;var T=env.assert;var U=env.enlargeMemory;var V=env.getTotalMemory;var W=env.abortOnCannotGrowMemory;var X=env._emscripten_asm_const_i;var Y=env._sysconf;var Z=env._abort;var _=env.___setErrNo;var $=env._emscripten_memcpy_big;var aa=env._emscripten_asm_const_v;var ba=env.___assert_fail;var ca=0.0;
// EMSCRIPTEN_START_FUNCS
function ga(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0;f=l;g=l=l+63&-64;l=l+256|0;d=0;do{h=Xe(b+(d<<3)|0)|0;e=g+128+(d<<3)|0;c[e>>2]=h;c[e+4>>2]=z;d=d+1|0}while((d|0)!=16);d=g;b=a;e=d+64|0;do{c[d>>2]=c[b>>2];d=d+4|0;b=b+4|0}while((d|0)<(e|0));c[g+88>>2]=1595750129;c[g+88+4>>2]=-1521486534;ca=c[a+64>>2]^-1377402159;r=c[a+64+4>>2]^1359893119;h=c[a+72>>2]^725511199;w=c[a+72+4>>2]^-1694144372;n=c[a+80>>2]^-79577749;s=c[a+80+4>>2]^528734635;K=c[a+88>>2]^327033209;ba=c[a+88+4>>2]^1541459225;c[g+120>>2]=K;c[g+120+4>>2]=ba;u=c[g+32>>2]|0;e=c[g+32+4>>2]|0;N=lg(u|0,e|0,c[g>>2]|0,c[g+4>>2]|0)|0;N=lg(N|0,z|0,c[g+128>>2]|0,c[g+128+4>>2]|0)|0;d=z;r=bf(ca^N,r^d,32)|0;ca=z;V=lg(r|0,ca|0,-205731576,1779033703)|0;O=z;e=bf(u^V,e^O,24)|0;u=z;d=lg(N|0,d|0,e|0,u|0)|0;N=g+128+8|0;d=lg(d|0,z|0,c[N>>2]|0,c[N+4>>2]|0)|0;R=z;c[g>>2]=d;c[g+4>>2]=R;ca=bf(r^d,ca^R,16)|0;r=z;c[g+96>>2]=ca;c[g+96+4>>2]=r;r=lg(V|0,O|0,ca|0,r|0)|0;ca=z;c[g+64>>2]=r;c[g+64+4>>2]=ca;ca=bf(e^r,u^ca,63)|0;c[g+32>>2]=ca;c[g+32+4>>2]=z;ca=c[g+40>>2]|0;u=c[g+40+4>>2]|0;r=lg(ca|0,u|0,c[g+8>>2]|0,c[g+8+4>>2]|0)|0;e=g+128+16|0;r=lg(r|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;O=z;w=bf(h^r,w^O,32)|0;h=z;V=lg(w|0,h|0,-2067093701,-1150833019)|0;D=z;u=bf(ca^V,u^D,24)|0;ca=z;O=lg(r|0,O|0,u|0,ca|0)|0;r=g+128+24|0;O=lg(O|0,z|0,c[r>>2]|0,c[r+4>>2]|0)|0;x=z;h=bf(w^O,h^x,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;D=lg(V|0,D|0,h|0,w|0)|0;V=z;c[g+72>>2]=D;c[g+72+4>>2]=V;V=bf(u^D,ca^V,63)|0;ca=z;D=c[g+48>>2]|0;u=c[g+48+4>>2]|0;t=lg(D|0,u|0,c[g+16>>2]|0,c[g+16+4>>2]|0)|0;X=g+128+32|0;t=lg(t|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;i=z;s=bf(n^t,s^i,32)|0;n=z;C=lg(s|0,n|0,-23791573,1013904242)|0;b=z;u=bf(D^C,u^b,24)|0;D=z;i=lg(t|0,i|0,u|0,D|0)|0;t=g+128+40|0;i=lg(i|0,z|0,c[t>>2]|0,c[t+4>>2]|0)|0;P=z;n=bf(s^i,n^P,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;b=lg(C|0,b|0,n|0,s|0)|0;C=z;D=bf(u^b,D^C,63)|0;u=z;m=c[g+56>>2]|0;o=c[g+56+4>>2]|0;v=lg(m|0,o|0,c[g+24>>2]|0,c[g+24+4>>2]|0)|0;q=g+128+48|0;v=lg(v|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;aa=z;ba=bf(K^v,ba^aa,32)|0;K=z;B=lg(c[g+88>>2]|0,c[g+88+4>>2]|0,ba|0,K|0)|0;F=z;o=bf(m^B,o^F,24)|0;m=z;aa=lg(v|0,aa|0,o|0,m|0)|0;v=g+128+56|0;aa=lg(aa|0,z|0,c[v>>2]|0,c[v+4>>2]|0)|0;y=z;K=bf(ba^aa,K^y,16)|0;ba=z;F=lg(B|0,F|0,K|0,ba|0)|0;B=z;m=bf(o^F,m^B,63)|0;o=z;R=lg(V|0,ca|0,d|0,R|0)|0;d=g+128+64|0;R=lg(R|0,z|0,c[d>>2]|0,c[d+4>>2]|0)|0;S=z;ba=bf(K^R,ba^S,32)|0;K=z;C=lg(b|0,C|0,ba|0,K|0)|0;b=z;ca=bf(V^C,ca^b,24)|0;V=z;S=lg(R|0,S|0,ca|0,V|0)|0;R=g+128+72|0;S=lg(S|0,z|0,c[R>>2]|0,c[R+4>>2]|0)|0;$=z;K=bf(ba^S,K^$,16)|0;ba=z;c[g+120>>2]=K;c[g+120+4>>2]=ba;ba=lg(C|0,b|0,K|0,ba|0)|0;K=z;c[g+80>>2]=ba;c[g+80+4>>2]=K;K=bf(ca^ba,V^K,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;x=lg(D|0,u|0,O|0,x|0)|0;O=g+128+80|0;ba=c[O>>2]|0;ca=c[O+4>>2]|0;x=lg(x|0,z|0,ba|0,ca|0)|0;b=z;C=bf(c[g+96>>2]^x,c[g+96+4>>2]^b,32)|0;A=z;B=lg(F|0,B|0,C|0,A|0)|0;F=z;u=bf(D^B,u^F,24)|0;D=z;b=lg(x|0,b|0,u|0,D|0)|0;x=g+128+88|0;b=lg(b|0,z|0,c[x>>2]|0,c[x+4>>2]|0)|0;M=z;A=bf(C^b,A^M,16)|0;C=z;F=lg(B|0,F|0,A|0,C|0)|0;B=z;c[g+88>>2]=F;c[g+88+4>>2]=B;B=bf(u^F,D^B,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;P=lg(m|0,o|0,i|0,P|0)|0;i=g+128+96|0;P=lg(P|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;F=z;w=bf(h^P,w^F,32)|0;h=z;u=lg(c[g+64>>2]|0,c[g+64+4>>2]|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;F=lg(P|0,F|0,o|0,m|0)|0;P=g+128+104|0;da=c[P>>2]|0;_=c[P+4>>2]|0;F=lg(F|0,z|0,da|0,_|0)|0;E=z;h=bf(w^F,h^E,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;k=c[g+32>>2]|0;ga=c[g+32+4>>2]|0;y=lg(k|0,ga|0,aa|0,y|0)|0;aa=g+128+112|0;T=c[aa>>2]|0;j=c[aa+4>>2]|0;y=lg(y|0,z|0,T|0,j|0)|0;ia=z;s=bf(n^y,s^ia,32)|0;n=z;I=lg(c[g+72>>2]|0,c[g+72+4>>2]|0,s|0,n|0)|0;U=z;ga=bf(k^I,ga^U,24)|0;k=z;ia=lg(y|0,ia|0,ga|0,k|0)|0;y=g+128+120|0;H=c[y>>2]|0;fa=c[y+4>>2]|0;ia=lg(ia|0,z|0,H|0,fa|0)|0;Q=z;n=bf(s^ia,n^Q,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;k=bf(ga^U,k^I,63)|0;ga=z;$=lg(S|0,$|0,k|0,ga|0)|0;j=lg($|0,z|0,T|0,j|0)|0;T=z;C=bf(A^j,C^T,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;ga=bf(k^u,ga^p,24)|0;k=z;T=lg(j|0,T|0,ga|0,k|0)|0;ca=lg(T|0,z|0,ba|0,ca|0)|0;ba=z;A=bf(C^ca,A^ba,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;k=bf(ga^p,k^u,63)|0;c[g+32>>2]=k;c[g+32+4>>2]=z;M=lg(K|0,V|0,b|0,M|0)|0;M=lg(M|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;b=z;w=bf(h^M,w^b,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;b=lg(M|0,b|0,V|0,K|0)|0;b=lg(b|0,z|0,c[d>>2]|0,c[d+4>>2]|0)|0;M=z;h=bf(w^b,h^M,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;E=lg(B|0,D|0,F|0,E|0)|0;E=lg(E|0,z|0,c[R>>2]|0,c[R+4>>2]|0)|0;F=z;s=bf(n^E,s^F,32)|0;n=z;k=lg(c[g+80>>2]|0,c[g+80+4>>2]|0,s|0,n|0)|0;ga=z;D=bf(B^k,D^ga,24)|0;B=z;F=lg(E|0,F|0,D|0,B|0)|0;fa=lg(F|0,z|0,H|0,fa|0)|0;H=z;n=bf(s^fa,n^H,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;ga=lg(k|0,ga|0,n|0,s|0)|0;k=z;B=bf(D^ga,B^k,63)|0;D=z;Q=lg(m|0,o|0,ia|0,Q|0)|0;_=lg(Q|0,z|0,da|0,_|0)|0;da=z;Q=bf(c[g+120>>2]^_,c[g+120+4>>2]^da,32)|0;ia=z;F=lg(c[g+88>>2]|0,c[g+88+4>>2]|0,Q|0,ia|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;da=lg(_|0,da|0,o|0,m|0)|0;da=lg(da|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;_=z;ia=bf(Q^da,ia^_,16)|0;Q=z;E=lg(F|0,E|0,ia|0,Q|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;ba=lg(K|0,V|0,ca|0,ba|0)|0;ba=lg(ba|0,z|0,c[N>>2]|0,c[N+4>>2]|0)|0;ca=z;Q=bf(ia^ba,Q^ca,32)|0;ia=z;k=lg(ga|0,k|0,Q|0,ia|0)|0;ga=z;V=bf(K^k,V^ga,24)|0;K=z;ca=lg(ba|0,ca|0,V|0,K|0)|0;ba=c[i>>2]|0;T=c[i+4>>2]|0;ca=lg(ca|0,z|0,ba|0,T|0)|0;j=z;ia=bf(Q^ca,ia^j,16)|0;Q=z;c[g+120>>2]=ia;c[g+120+4>>2]=Q;Q=lg(k|0,ga|0,ia|0,Q|0)|0;ia=z;c[g+80>>2]=Q;c[g+80+4>>2]=ia;K=bf(V^Q,K^ia,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;M=lg(B|0,D|0,b|0,M|0)|0;b=c[g+128>>2]|0;ga=c[g+128+4>>2]|0;M=lg(M|0,z|0,b|0,ga|0)|0;k=z;C=bf(A^M,C^k,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;k=lg(M|0,k|0,D|0,B|0)|0;M=c[e>>2]|0;$=c[e+4>>2]|0;k=lg(k|0,z|0,M|0,$|0)|0;S=z;A=bf(C^k,A^S,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;H=lg(m|0,o|0,fa|0,H|0)|0;fa=c[x>>2]|0;ha=c[x+4>>2]|0;H=lg(H|0,z|0,fa|0,ha|0)|0;L=z;w=bf(h^H,w^L,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;L=lg(H|0,L|0,o|0,m|0)|0;L=lg(L|0,z|0,c[v>>2]|0,c[v+4>>2]|0)|0;H=z;h=bf(w^L,h^H,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;Z=c[g+32>>2]|0;W=c[g+32+4>>2]|0;_=lg(Z|0,W|0,da|0,_|0)|0;da=c[t>>2]|0;G=c[t+4>>2]|0;_=lg(_|0,z|0,da|0,G|0)|0;ea=z;s=bf(n^_,s^ea,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;W=bf(Z^I,W^U,24)|0;Z=z;ea=lg(_|0,ea|0,W|0,Z|0)|0;_=c[r>>2]|0;J=c[r+4>>2]|0;ea=lg(ea|0,z|0,_|0,J|0)|0;Y=z;n=bf(s^ea,n^Y,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;Z=bf(W^U,Z^I,63)|0;W=z;j=lg(ca|0,j|0,Z|0,W|0)|0;ha=lg(j|0,z|0,fa|0,ha|0)|0;fa=z;C=bf(A^ha,C^fa,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;W=bf(Z^u,W^p,24)|0;Z=z;fa=lg(ha|0,fa|0,W|0,Z|0)|0;fa=lg(fa|0,z|0,c[d>>2]|0,c[d+4>>2]|0)|0;ha=z;A=bf(C^fa,A^ha,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;Z=bf(W^p,Z^u,63)|0;c[g+32>>2]=Z;c[g+32+4>>2]=z;S=lg(K|0,V|0,k|0,S|0)|0;T=lg(S|0,z|0,ba|0,T|0)|0;ba=z;w=bf(h^T,w^ba,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;ba=lg(T|0,ba|0,V|0,K|0)|0;ga=lg(ba|0,z|0,b|0,ga|0)|0;b=z;h=bf(w^ga,h^b,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;H=lg(B|0,D|0,L|0,H|0)|0;G=lg(H|0,z|0,da|0,G|0)|0;da=z;s=bf(n^G,s^da,32)|0;n=z;ia=lg(Q|0,ia|0,s|0,n|0)|0;Q=z;D=bf(B^ia,D^Q,24)|0;B=z;da=lg(G|0,da|0,D|0,B|0)|0;$=lg(da|0,z|0,M|0,$|0)|0;M=z;n=bf(s^$,n^M,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;Q=lg(ia|0,Q|0,n|0,s|0)|0;ia=z;B=bf(D^Q,B^ia,63)|0;D=z;Y=lg(m|0,o|0,ea|0,Y|0)|0;Y=lg(Y|0,z|0,c[y>>2]|0,c[y+4>>2]|0)|0;ea=z;da=bf(c[g+120>>2]^Y,c[g+120+4>>2]^ea,32)|0;G=z;F=lg(E|0,F|0,da|0,G|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;ea=lg(Y|0,ea|0,o|0,m|0)|0;ea=lg(ea|0,z|0,c[P>>2]|0,c[P+4>>2]|0)|0;Y=z;G=bf(da^ea,G^Y,16)|0;da=z;E=lg(F|0,E|0,G|0,da|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;ha=lg(K|0,V|0,fa|0,ha|0)|0;ha=lg(ha|0,z|0,c[O>>2]|0,c[O+4>>2]|0)|0;fa=z;da=bf(G^ha,da^fa,32)|0;G=z;ia=lg(Q|0,ia|0,da|0,G|0)|0;Q=z;V=bf(K^ia,V^Q,24)|0;K=z;fa=lg(ha|0,fa|0,V|0,K|0)|0;fa=lg(fa|0,z|0,c[aa>>2]|0,c[aa+4>>2]|0)|0;ha=z;G=bf(da^fa,G^ha,16)|0;da=z;c[g+120>>2]=G;c[g+120+4>>2]=da;da=lg(ia|0,Q|0,G|0,da|0)|0;G=z;c[g+80>>2]=da;c[g+80+4>>2]=G;K=bf(V^da,K^G,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;b=lg(B|0,D|0,ga|0,b|0)|0;J=lg(b|0,z|0,_|0,J|0)|0;_=z;C=bf(A^J,C^_,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;_=lg(J|0,_|0,D|0,B|0)|0;_=lg(_|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;J=z;A=bf(C^_,A^J,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;M=lg(m|0,o|0,$|0,M|0)|0;$=c[v>>2]|0;b=c[v+4>>2]|0;M=lg(M|0,z|0,$|0,b|0)|0;ga=z;w=bf(h^M,w^ga,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;ga=lg(M|0,ga|0,o|0,m|0)|0;M=c[N>>2]|0;Q=c[N+4>>2]|0;ga=lg(ga|0,z|0,M|0,Q|0)|0;ia=z;h=bf(w^ga,h^ia,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;H=c[g+32>>2]|0;L=c[g+32+4>>2]|0;Y=lg(H|0,L|0,ea|0,Y|0)|0;ea=c[R>>2]|0;ba=c[R+4>>2]|0;Y=lg(Y|0,z|0,ea|0,ba|0)|0;T=z;s=bf(n^Y,s^T,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;L=bf(H^I,L^U,24)|0;H=z;T=lg(Y|0,T|0,L|0,H|0)|0;T=lg(T|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;Y=z;n=bf(s^T,n^Y,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;H=bf(L^U,H^I,63)|0;L=z;ha=lg(fa|0,ha|0,H|0,L|0)|0;b=lg(ha|0,z|0,$|0,b|0)|0;$=z;C=bf(A^b,C^$,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;L=bf(H^u,L^p,24)|0;H=z;$=lg(b|0,$|0,L|0,H|0)|0;ba=lg($|0,z|0,ea|0,ba|0)|0;ea=z;A=bf(C^ba,A^ea,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;H=bf(L^p,H^u,63)|0;c[g+32>>2]=H;c[g+32+4>>2]=z;J=lg(K|0,V|0,_|0,J|0)|0;J=lg(J|0,z|0,c[r>>2]|0,c[r+4>>2]|0)|0;_=z;w=bf(h^J,w^_,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;_=lg(J|0,_|0,V|0,K|0)|0;Q=lg(_|0,z|0,M|0,Q|0)|0;M=z;h=bf(w^Q,h^M,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;ia=lg(B|0,D|0,ga|0,ia|0)|0;ia=lg(ia|0,z|0,c[P>>2]|0,c[P+4>>2]|0)|0;ga=z;s=bf(n^ia,s^ga,32)|0;n=z;G=lg(da|0,G|0,s|0,n|0)|0;da=z;D=bf(B^G,D^da,24)|0;B=z;ga=lg(ia|0,ga|0,D|0,B|0)|0;ga=lg(ga|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;ia=z;n=bf(s^ga,n^ia,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;da=lg(G|0,da|0,n|0,s|0)|0;G=z;B=bf(D^da,B^G,63)|0;D=z;Y=lg(m|0,o|0,T|0,Y|0)|0;Y=lg(Y|0,z|0,c[x>>2]|0,c[x+4>>2]|0)|0;T=z;_=bf(c[g+120>>2]^Y,c[g+120+4>>2]^T,32)|0;J=z;F=lg(E|0,F|0,_|0,J|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;T=lg(Y|0,T|0,o|0,m|0)|0;T=lg(T|0,z|0,c[aa>>2]|0,c[aa+4>>2]|0)|0;Y=z;J=bf(_^T,J^Y,16)|0;_=z;E=lg(F|0,E|0,J|0,_|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;ea=lg(K|0,V|0,ba|0,ea|0)|0;ea=lg(ea|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;ba=z;_=bf(J^ea,_^ba,32)|0;J=z;G=lg(da|0,G|0,_|0,J|0)|0;da=z;V=bf(K^G,V^da,24)|0;K=z;ba=lg(ea|0,ba|0,V|0,K|0)|0;ba=lg(ba|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;ea=z;J=bf(_^ba,J^ea,16)|0;_=z;c[g+120>>2]=J;c[g+120+4>>2]=_;_=lg(G|0,da|0,J|0,_|0)|0;J=z;c[g+80>>2]=_;c[g+80+4>>2]=J;K=bf(V^_,K^J,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;M=lg(B|0,D|0,Q|0,M|0)|0;Q=c[t>>2]|0;da=c[t+4>>2]|0;M=lg(M|0,z|0,Q|0,da|0)|0;G=z;C=bf(A^M,C^G,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;G=lg(M|0,G|0,D|0,B|0)|0;M=c[O>>2]|0;H=c[O+4>>2]|0;G=lg(G|0,z|0,M|0,H|0)|0;L=z;A=bf(C^G,A^L,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;ia=lg(m|0,o|0,ga|0,ia|0)|0;ga=c[X>>2]|0;$=c[X+4>>2]|0;ia=lg(ia|0,z|0,ga|0,$|0)|0;b=z;w=bf(h^ia,w^b,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;b=lg(ia|0,b|0,o|0,m|0)|0;ia=c[g+128>>2]|0;ha=c[g+128+4>>2]|0;b=lg(b|0,z|0,ia|0,ha|0)|0;fa=z;h=bf(w^b,h^fa,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;S=c[g+32>>2]|0;k=c[g+32+4>>2]|0;Y=lg(S|0,k|0,T|0,Y|0)|0;T=c[y>>2]|0;Z=c[y+4>>2]|0;Y=lg(Y|0,z|0,T|0,Z|0)|0;W=z;s=bf(n^Y,s^W,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;k=bf(S^I,k^U,24)|0;S=z;W=lg(Y|0,W|0,k|0,S|0)|0;W=lg(W|0,z|0,c[d>>2]|0,c[d+4>>2]|0)|0;Y=z;n=bf(s^W,n^Y,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;S=bf(k^U,S^I,63)|0;k=z;ea=lg(ba|0,ea|0,S|0,k|0)|0;ea=lg(ea|0,z|0,c[R>>2]|0,c[R+4>>2]|0)|0;ba=z;C=bf(A^ea,C^ba,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;k=bf(S^u,k^p,24)|0;S=z;ba=lg(ea|0,ba|0,k|0,S|0)|0;ha=lg(ba|0,z|0,ia|0,ha|0)|0;ia=z;A=bf(C^ha,A^ia,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;S=bf(k^p,S^u,63)|0;c[g+32>>2]=S;c[g+32+4>>2]=z;L=lg(K|0,V|0,G|0,L|0)|0;da=lg(L|0,z|0,Q|0,da|0)|0;Q=z;w=bf(h^da,w^Q,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;Q=lg(da|0,Q|0,V|0,K|0)|0;Q=lg(Q|0,z|0,c[v>>2]|0,c[v+4>>2]|0)|0;da=z;h=bf(w^Q,h^da,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;fa=lg(B|0,D|0,b|0,fa|0)|0;fa=lg(fa|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;b=z;s=bf(n^fa,s^b,32)|0;n=z;J=lg(_|0,J|0,s|0,n|0)|0;_=z;D=bf(B^J,D^_,24)|0;B=z;b=lg(fa|0,b|0,D|0,B|0)|0;$=lg(b|0,z|0,ga|0,$|0)|0;ga=z;n=bf(s^$,n^ga,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;_=lg(J|0,_|0,n|0,s|0)|0;J=z;B=bf(D^_,B^J,63)|0;D=z;Y=lg(m|0,o|0,W|0,Y|0)|0;H=lg(Y|0,z|0,M|0,H|0)|0;M=z;Y=bf(c[g+120>>2]^H,c[g+120+4>>2]^M,32)|0;W=z;F=lg(E|0,F|0,Y|0,W|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;M=lg(H|0,M|0,o|0,m|0)|0;Z=lg(M|0,z|0,T|0,Z|0)|0;T=z;W=bf(Y^Z,W^T,16)|0;Y=z;E=lg(F|0,E|0,W|0,Y|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;ia=lg(K|0,V|0,ha|0,ia|0)|0;ia=lg(ia|0,z|0,c[aa>>2]|0,c[aa+4>>2]|0)|0;ha=z;Y=bf(W^ia,Y^ha,32)|0;W=z;J=lg(_|0,J|0,Y|0,W|0)|0;_=z;V=bf(K^J,V^_,24)|0;K=z;ha=lg(ia|0,ha|0,V|0,K|0)|0;ha=lg(ha|0,z|0,c[N>>2]|0,c[N+4>>2]|0)|0;ia=z;W=bf(Y^ha,W^ia,16)|0;Y=z;c[g+120>>2]=W;c[g+120+4>>2]=Y;Y=lg(J|0,_|0,W|0,Y|0)|0;W=z;c[g+80>>2]=Y;c[g+80+4>>2]=W;K=bf(V^Y,K^W,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;da=lg(B|0,D|0,Q|0,da|0)|0;Q=c[x>>2]|0;_=c[x+4>>2]|0;da=lg(da|0,z|0,Q|0,_|0)|0;J=z;C=bf(A^da,C^J,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;J=lg(da|0,J|0,D|0,B|0)|0;da=c[i>>2]|0;M=c[i+4>>2]|0;J=lg(J|0,z|0,da|0,M|0)|0;H=z;A=bf(C^J,A^H,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;ga=lg(m|0,o|0,$|0,ga|0)|0;$=c[q>>2]|0;b=c[q+4>>2]|0;ga=lg(ga|0,z|0,$|0,b|0)|0;fa=z;w=bf(h^ga,w^fa,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;fa=lg(ga|0,fa|0,o|0,m|0)|0;ga=c[d>>2]|0;L=c[d+4>>2]|0;fa=lg(fa|0,z|0,ga|0,L|0)|0;G=z;h=bf(w^fa,h^G,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;S=c[g+32>>2]|0;k=c[g+32+4>>2]|0;T=lg(S|0,k|0,Z|0,T|0)|0;Z=c[r>>2]|0;ba=c[r+4>>2]|0;T=lg(T|0,z|0,Z|0,ba|0)|0;ea=z;s=bf(n^T,s^ea,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;k=bf(S^I,k^U,24)|0;S=z;ea=lg(T|0,ea|0,k|0,S|0)|0;T=c[P>>2]|0;j=c[P+4>>2]|0;ea=lg(ea|0,z|0,T|0,j|0)|0;ca=z;n=bf(s^ea,n^ca,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;S=bf(k^U,S^I,63)|0;k=z;ia=lg(ha|0,ia|0,S|0,k|0)|0;ia=lg(ia|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;ha=z;C=bf(A^ia,C^ha,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;k=bf(S^u,k^p,24)|0;S=z;ha=lg(ia|0,ha|0,k|0,S|0)|0;M=lg(ha|0,z|0,da|0,M|0)|0;da=z;A=bf(C^M,A^da,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;S=bf(k^p,S^u,63)|0;c[g+32>>2]=S;c[g+32+4>>2]=z;H=lg(K|0,V|0,J|0,H|0)|0;b=lg(H|0,z|0,$|0,b|0)|0;$=z;w=bf(h^b,w^$,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;$=lg(b|0,$|0,V|0,K|0)|0;$=lg($|0,z|0,c[O>>2]|0,c[O+4>>2]|0)|0;b=z;h=bf(w^$,h^b,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;G=lg(B|0,D|0,fa|0,G|0)|0;G=lg(G|0,z|0,c[g+128>>2]|0,c[g+128+4>>2]|0)|0;fa=z;s=bf(n^G,s^fa,32)|0;n=z;W=lg(Y|0,W|0,s|0,n|0)|0;Y=z;D=bf(B^W,D^Y,24)|0;B=z;fa=lg(G|0,fa|0,D|0,B|0)|0;_=lg(fa|0,z|0,Q|0,_|0)|0;Q=z;n=bf(s^_,n^Q,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;Y=lg(W|0,Y|0,n|0,s|0)|0;W=z;B=bf(D^Y,B^W,63)|0;D=z;ca=lg(m|0,o|0,ea|0,ca|0)|0;L=lg(ca|0,z|0,ga|0,L|0)|0;ga=z;ca=bf(c[g+120>>2]^L,c[g+120+4>>2]^ga,32)|0;ea=z;F=lg(E|0,F|0,ca|0,ea|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;ga=lg(L|0,ga|0,o|0,m|0)|0;ba=lg(ga|0,z|0,Z|0,ba|0)|0;Z=z;ea=bf(ca^ba,ea^Z,16)|0;ca=z;E=lg(F|0,E|0,ea|0,ca|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;da=lg(K|0,V|0,M|0,da|0)|0;da=lg(da|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;M=z;ca=bf(ea^da,ca^M,32)|0;ea=z;W=lg(Y|0,W|0,ca|0,ea|0)|0;Y=z;V=bf(K^W,V^Y,24)|0;K=z;M=lg(da|0,M|0,V|0,K|0)|0;j=lg(M|0,z|0,T|0,j|0)|0;T=z;ea=bf(ca^j,ea^T,16)|0;ca=z;c[g+120>>2]=ea;c[g+120+4>>2]=ca;ca=lg(W|0,Y|0,ea|0,ca|0)|0;ea=z;c[g+80>>2]=ca;c[g+80+4>>2]=ea;K=bf(V^ca,K^ea,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;b=lg(B|0,D|0,$|0,b|0)|0;b=lg(b|0,z|0,c[v>>2]|0,c[v+4>>2]|0)|0;$=z;C=bf(A^b,C^$,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;$=lg(b|0,$|0,D|0,B|0)|0;b=c[t>>2]|0;Y=c[t+4>>2]|0;$=lg($|0,z|0,b|0,Y|0)|0;W=z;A=bf(C^$,A^W,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;Q=lg(m|0,o|0,_|0,Q|0)|0;_=c[y>>2]|0;M=c[y+4>>2]|0;Q=lg(Q|0,z|0,_|0,M|0)|0;da=z;w=bf(h^Q,w^da,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;da=lg(Q|0,da|0,o|0,m|0)|0;Q=c[aa>>2]|0;ga=c[aa+4>>2]|0;da=lg(da|0,z|0,Q|0,ga|0)|0;L=z;h=bf(w^da,h^L,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;fa=c[g+32>>2]|0;G=c[g+32+4>>2]|0;Z=lg(fa|0,G|0,ba|0,Z|0)|0;ba=c[N>>2]|0;H=c[N+4>>2]|0;Z=lg(Z|0,z|0,ba|0,H|0)|0;J=z;s=bf(n^Z,s^J,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;G=bf(fa^I,G^U,24)|0;fa=z;J=lg(Z|0,J|0,G|0,fa|0)|0;J=lg(J|0,z|0,c[R>>2]|0,c[R+4>>2]|0)|0;Z=z;n=bf(s^J,n^Z,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;fa=bf(G^U,fa^I,63)|0;G=z;T=lg(j|0,T|0,fa|0,G|0)|0;T=lg(T|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;j=z;C=bf(A^T,C^j,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;G=bf(fa^u,G^p,24)|0;fa=z;j=lg(T|0,j|0,G|0,fa|0)|0;Y=lg(j|0,z|0,b|0,Y|0)|0;b=z;A=bf(C^Y,A^b,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;fa=bf(G^p,fa^u,63)|0;c[g+32>>2]=fa;c[g+32+4>>2]=z;W=lg(K|0,V|0,$|0,W|0)|0;H=lg(W|0,z|0,ba|0,H|0)|0;ba=z;w=bf(h^H,w^ba,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;ba=lg(H|0,ba|0,V|0,K|0)|0;M=lg(ba|0,z|0,_|0,M|0)|0;_=z;h=bf(w^M,h^_,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;L=lg(B|0,D|0,da|0,L|0)|0;ga=lg(L|0,z|0,Q|0,ga|0)|0;Q=z;s=bf(n^ga,s^Q,32)|0;n=z;ea=lg(ca|0,ea|0,s|0,n|0)|0;ca=z;D=bf(B^ea,D^ca,24)|0;B=z;Q=lg(ga|0,Q|0,D|0,B|0)|0;ga=c[P>>2]|0;L=c[P+4>>2]|0;Q=lg(Q|0,z|0,ga|0,L|0)|0;da=z;n=bf(s^Q,n^da,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;ca=lg(ea|0,ca|0,n|0,s|0)|0;ea=z;B=bf(D^ca,B^ea,63)|0;D=z;Z=lg(m|0,o|0,J|0,Z|0)|0;Z=lg(Z|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;J=z;ba=bf(c[g+120>>2]^Z,c[g+120+4>>2]^J,32)|0;H=z;F=lg(E|0,F|0,ba|0,H|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;J=lg(Z|0,J|0,o|0,m|0)|0;J=lg(J|0,z|0,c[O>>2]|0,c[O+4>>2]|0)|0;Z=z;H=bf(ba^J,H^Z,16)|0;ba=z;E=lg(F|0,E|0,H|0,ba|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;b=lg(K|0,V|0,Y|0,b|0)|0;b=lg(b|0,z|0,c[g+128>>2]|0,c[g+128+4>>2]|0)|0;Y=z;ba=bf(H^b,ba^Y,32)|0;H=z;ea=lg(ca|0,ea|0,ba|0,H|0)|0;ca=z;V=bf(K^ea,V^ca,24)|0;K=z;Y=lg(b|0,Y|0,V|0,K|0)|0;b=c[v>>2]|0;W=c[v+4>>2]|0;Y=lg(Y|0,z|0,b|0,W|0)|0;$=z;H=bf(ba^Y,H^$,16)|0;ba=z;c[g+120>>2]=H;c[g+120+4>>2]=ba;ba=lg(ea|0,ca|0,H|0,ba|0)|0;H=z;c[g+80>>2]=ba;c[g+80+4>>2]=H;K=bf(V^ba,K^H,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;_=lg(B|0,D|0,M|0,_|0)|0;_=lg(_|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;M=z;C=bf(A^_,C^M,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;M=lg(_|0,M|0,D|0,B|0)|0;_=c[r>>2]|0;ca=c[r+4>>2]|0;M=lg(M|0,z|0,_|0,ca|0)|0;ea=z;A=bf(C^M,A^ea,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;da=lg(m|0,o|0,Q|0,da|0)|0;Q=c[R>>2]|0;fa=c[R+4>>2]|0;da=lg(da|0,z|0,Q|0,fa|0)|0;G=z;w=bf(h^da,w^G,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;G=lg(da|0,G|0,o|0,m|0)|0;G=lg(G|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;da=z;h=bf(w^G,h^da,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;j=c[g+32>>2]|0;T=c[g+32+4>>2]|0;Z=lg(j|0,T|0,J|0,Z|0)|0;Z=lg(Z|0,z|0,c[d>>2]|0,c[d+4>>2]|0)|0;J=z;s=bf(n^Z,s^J,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;T=bf(j^I,T^U,24)|0;j=z;J=lg(Z|0,J|0,T|0,j|0)|0;Z=c[x>>2]|0;S=c[x+4>>2]|0;J=lg(J|0,z|0,Z|0,S|0)|0;k=z;n=bf(s^J,n^k,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;j=bf(T^U,j^I,63)|0;T=z;$=lg(Y|0,$|0,j|0,T|0)|0;L=lg($|0,z|0,ga|0,L|0)|0;ga=z;C=bf(A^L,C^ga,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;T=bf(j^u,T^p,24)|0;j=z;ga=lg(L|0,ga|0,T|0,j|0)|0;S=lg(ga|0,z|0,Z|0,S|0)|0;Z=z;A=bf(C^S,A^Z,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;j=bf(T^p,j^u,63)|0;c[g+32>>2]=j;c[g+32+4>>2]=z;ea=lg(K|0,V|0,M|0,ea|0)|0;W=lg(ea|0,z|0,b|0,W|0)|0;b=z;w=bf(h^W,w^b,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;b=lg(W|0,b|0,V|0,K|0)|0;b=lg(b|0,z|0,c[aa>>2]|0,c[aa+4>>2]|0)|0;W=z;h=bf(w^b,h^W,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;da=lg(B|0,D|0,G|0,da|0)|0;da=lg(da|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;G=z;s=bf(n^da,s^G,32)|0;n=z;H=lg(ba|0,H|0,s|0,n|0)|0;ba=z;D=bf(B^H,D^ba,24)|0;B=z;G=lg(da|0,G|0,D|0,B|0)|0;G=lg(G|0,z|0,c[N>>2]|0,c[N+4>>2]|0)|0;da=z;n=bf(s^G,n^da,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;ba=lg(H|0,ba|0,n|0,s|0)|0;H=z;B=bf(D^ba,B^H,63)|0;D=z;k=lg(m|0,o|0,J|0,k|0)|0;ca=lg(k|0,z|0,_|0,ca|0)|0;_=z;k=bf(c[g+120>>2]^ca,c[g+120+4>>2]^_,32)|0;J=z;F=lg(E|0,F|0,k|0,J|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;_=lg(ca|0,_|0,o|0,m|0)|0;fa=lg(_|0,z|0,Q|0,fa|0)|0;Q=z;J=bf(k^fa,J^Q,16)|0;k=z;E=lg(F|0,E|0,J|0,k|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;Z=lg(K|0,V|0,S|0,Z|0)|0;Z=lg(Z|0,z|0,c[t>>2]|0,c[t+4>>2]|0)|0;S=z;k=bf(J^Z,k^S,32)|0;J=z;H=lg(ba|0,H|0,k|0,J|0)|0;ba=z;V=bf(K^H,V^ba,24)|0;K=z;S=lg(Z|0,S|0,V|0,K|0)|0;S=lg(S|0,z|0,c[g+128>>2]|0,c[g+128+4>>2]|0)|0;Z=z;J=bf(k^S,J^Z,16)|0;k=z;c[g+120>>2]=J;c[g+120+4>>2]=k;k=lg(H|0,ba|0,J|0,k|0)|0;J=z;c[g+80>>2]=k;c[g+80+4>>2]=J;K=bf(V^k,K^J,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;W=lg(B|0,D|0,b|0,W|0)|0;b=c[y>>2]|0;ba=c[y+4>>2]|0;W=lg(W|0,z|0,b|0,ba|0)|0;H=z;C=bf(A^W,C^H,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;H=lg(W|0,H|0,D|0,B|0)|0;H=lg(H|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;W=z;A=bf(C^H,A^W,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;da=lg(m|0,o|0,G|0,da|0)|0;G=c[d>>2]|0;_=c[d+4>>2]|0;da=lg(da|0,z|0,G|0,_|0)|0;ca=z;w=bf(h^da,w^ca,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;ca=lg(da|0,ca|0,o|0,m|0)|0;da=c[q>>2]|0;ea=c[q+4>>2]|0;ca=lg(ca|0,z|0,da|0,ea|0)|0;M=z;h=bf(w^ca,h^M,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;j=c[g+32>>2]|0;T=c[g+32+4>>2]|0;Q=lg(j|0,T|0,fa|0,Q|0)|0;fa=c[e>>2]|0;ga=c[e+4>>2]|0;Q=lg(Q|0,z|0,fa|0,ga|0)|0;L=z;s=bf(n^Q,s^L,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;T=bf(j^I,T^U,24)|0;j=z;L=lg(Q|0,L|0,T|0,j|0)|0;L=lg(L|0,z|0,c[O>>2]|0,c[O+4>>2]|0)|0;Q=z;n=bf(s^L,n^Q,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;j=bf(T^U,j^I,63)|0;T=z;Z=lg(S|0,Z|0,j|0,T|0)|0;ea=lg(Z|0,z|0,da|0,ea|0)|0;da=z;C=bf(A^ea,C^da,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;T=bf(j^u,T^p,24)|0;j=z;da=lg(ea|0,da|0,T|0,j|0)|0;ba=lg(da|0,z|0,b|0,ba|0)|0;b=z;A=bf(C^ba,A^b,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;j=bf(T^p,j^u,63)|0;c[g+32>>2]=j;c[g+32+4>>2]=z;W=lg(K|0,V|0,H|0,W|0)|0;W=lg(W|0,z|0,c[aa>>2]|0,c[aa+4>>2]|0)|0;H=z;w=bf(h^W,w^H,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;H=lg(W|0,H|0,V|0,K|0)|0;H=lg(H|0,z|0,c[R>>2]|0,c[R+4>>2]|0)|0;W=z;h=bf(w^H,h^W,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;M=lg(B|0,D|0,ca|0,M|0)|0;M=lg(M|0,z|0,c[x>>2]|0,c[x+4>>2]|0)|0;ca=z;s=bf(n^M,s^ca,32)|0;n=z;J=lg(k|0,J|0,s|0,n|0)|0;k=z;D=bf(B^J,D^k,24)|0;B=z;ca=lg(M|0,ca|0,D|0,B|0)|0;ca=lg(ca|0,z|0,c[r>>2]|0,c[r+4>>2]|0)|0;M=z;n=bf(s^ca,n^M,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;k=lg(J|0,k|0,n|0,s|0)|0;J=z;B=bf(D^k,B^J,63)|0;D=z;Q=lg(m|0,o|0,L|0,Q|0)|0;Q=lg(Q|0,z|0,c[g+128>>2]|0,c[g+128+4>>2]|0)|0;L=z;j=bf(c[g+120>>2]^Q,c[g+120+4>>2]^L,32)|0;T=z;F=lg(E|0,F|0,j|0,T|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;L=lg(Q|0,L|0,o|0,m|0)|0;_=lg(L|0,z|0,G|0,_|0)|0;G=z;T=bf(j^_,T^G,16)|0;j=z;E=lg(F|0,E|0,T|0,j|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;b=lg(K|0,V|0,ba|0,b|0)|0;b=lg(b|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;ba=z;j=bf(T^b,j^ba,32)|0;T=z;J=lg(k|0,J|0,j|0,T|0)|0;k=z;V=bf(K^J,V^k,24)|0;K=z;ba=lg(b|0,ba|0,V|0,K|0)|0;ga=lg(ba|0,z|0,fa|0,ga|0)|0;fa=z;T=bf(j^ga,T^fa,16)|0;j=z;c[g+120>>2]=T;c[g+120+4>>2]=j;j=lg(J|0,k|0,T|0,j|0)|0;T=z;c[g+80>>2]=j;c[g+80+4>>2]=T;K=bf(V^j,K^T,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;W=lg(B|0,D|0,H|0,W|0)|0;W=lg(W|0,z|0,c[P>>2]|0,c[P+4>>2]|0)|0;H=z;C=bf(A^W,C^H,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;H=lg(W|0,H|0,D|0,B|0)|0;W=c[v>>2]|0;k=c[v+4>>2]|0;H=lg(H|0,z|0,W|0,k|0)|0;J=z;A=bf(C^H,A^J,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;M=lg(m|0,o|0,ca|0,M|0)|0;ca=c[N>>2]|0;ba=c[N+4>>2]|0;M=lg(M|0,z|0,ca|0,ba|0)|0;b=z;w=bf(h^M,w^b,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;b=lg(M|0,b|0,o|0,m|0)|0;M=c[X>>2]|0;L=c[X+4>>2]|0;b=lg(b|0,z|0,M|0,L|0)|0;Q=z;h=bf(w^b,h^Q,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;da=c[g+32>>2]|0;ea=c[g+32+4>>2]|0;G=lg(da|0,ea|0,_|0,G|0)|0;_=c[O>>2]|0;Z=c[O+4>>2]|0;G=lg(G|0,z|0,_|0,Z|0)|0;S=z;s=bf(n^G,s^S,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;ea=bf(da^I,ea^U,24)|0;da=z;S=lg(G|0,S|0,ea|0,da|0)|0;G=c[t>>2]|0;$=c[t+4>>2]|0;S=lg(S|0,z|0,G|0,$|0)|0;Y=z;n=bf(s^S,n^Y,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;da=bf(ea^U,da^I,63)|0;ea=z;fa=lg(ga|0,fa|0,da|0,ea|0)|0;Z=lg(fa|0,z|0,_|0,Z|0)|0;_=z;C=bf(A^Z,C^_,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;ea=bf(da^u,ea^p,24)|0;da=z;_=lg(Z|0,_|0,ea|0,da|0)|0;_=lg(_|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;Z=z;A=bf(C^_,A^Z,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;da=bf(ea^p,da^u,63)|0;c[g+32>>2]=da;c[g+32+4>>2]=z;J=lg(K|0,V|0,H|0,J|0)|0;J=lg(J|0,z|0,c[d>>2]|0,c[d+4>>2]|0)|0;H=z;w=bf(h^J,w^H,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;H=lg(J|0,H|0,V|0,K|0)|0;L=lg(H|0,z|0,M|0,L|0)|0;M=z;h=bf(w^L,h^M,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;Q=lg(B|0,D|0,b|0,Q|0)|0;k=lg(Q|0,z|0,W|0,k|0)|0;W=z;s=bf(n^k,s^W,32)|0;n=z;T=lg(j|0,T|0,s|0,n|0)|0;j=z;D=bf(B^T,D^j,24)|0;B=z;W=lg(k|0,W|0,D|0,B|0)|0;W=lg(W|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;k=z;n=bf(s^W,n^k,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;j=lg(T|0,j|0,n|0,s|0)|0;T=z;B=bf(D^j,B^T,63)|0;D=z;Y=lg(m|0,o|0,S|0,Y|0)|0;ba=lg(Y|0,z|0,ca|0,ba|0)|0;ca=z;Y=bf(c[g+120>>2]^ba,c[g+120+4>>2]^ca,32)|0;S=z;F=lg(E|0,F|0,Y|0,S|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;ca=lg(ba|0,ca|0,o|0,m|0)|0;$=lg(ca|0,z|0,G|0,$|0)|0;G=z;S=bf(Y^$,S^G,16)|0;Y=z;E=lg(F|0,E|0,S|0,Y|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;Z=lg(K|0,V|0,_|0,Z|0)|0;Z=lg(Z|0,z|0,c[y>>2]|0,c[y+4>>2]|0)|0;_=z;Y=bf(S^Z,Y^_,32)|0;S=z;T=lg(j|0,T|0,Y|0,S|0)|0;j=z;V=bf(K^T,V^j,24)|0;K=z;_=lg(Z|0,_|0,V|0,K|0)|0;_=lg(_|0,z|0,c[x>>2]|0,c[x+4>>2]|0)|0;Z=z;S=bf(Y^_,S^Z,16)|0;Y=z;c[g+120>>2]=S;c[g+120+4>>2]=Y;Y=lg(T|0,j|0,S|0,Y|0)|0;S=z;c[g+80>>2]=Y;c[g+80+4>>2]=S;K=bf(V^Y,K^S,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;M=lg(B|0,D|0,L|0,M|0)|0;M=lg(M|0,z|0,c[R>>2]|0,c[R+4>>2]|0)|0;L=z;C=bf(A^M,C^L,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;L=lg(M|0,L|0,D|0,B|0)|0;L=lg(L|0,z|0,c[aa>>2]|0,c[aa+4>>2]|0)|0;M=z;A=bf(C^L,A^M,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;k=lg(m|0,o|0,W|0,k|0)|0;W=c[r>>2]|0;j=c[r+4>>2]|0;k=lg(k|0,z|0,W|0,j|0)|0;T=z;w=bf(h^k,w^T,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;T=lg(k|0,T|0,o|0,m|0)|0;T=lg(T|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;k=z;h=bf(w^T,h^k,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;ca=c[g+32>>2]|0;ba=c[g+32+4>>2]|0;G=lg(ca|0,ba|0,$|0,G|0)|0;G=lg(G|0,z|0,c[P>>2]|0,c[P+4>>2]|0)|0;$=z;s=bf(n^G,s^$,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;ba=bf(ca^I,ba^U,24)|0;ca=z;$=lg(G|0,$|0,ba|0,ca|0)|0;G=c[g+128>>2]|0;Q=c[g+128+4>>2]|0;$=lg($|0,z|0,G|0,Q|0)|0;b=z;n=bf(s^$,n^b,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;ca=bf(ba^U,ca^I,63)|0;ba=z;Z=lg(_|0,Z|0,ca|0,ba|0)|0;Q=lg(Z|0,z|0,G|0,Q|0)|0;G=z;C=bf(A^Q,C^G,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;ba=bf(ca^u,ba^p,24)|0;ca=z;G=lg(Q|0,G|0,ba|0,ca|0)|0;G=lg(G|0,z|0,c[N>>2]|0,c[N+4>>2]|0)|0;Q=z;A=bf(C^G,A^Q,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;ca=bf(ba^p,ca^u,63)|0;c[g+32>>2]=ca;c[g+32+4>>2]=z;M=lg(K|0,V|0,L|0,M|0)|0;M=lg(M|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;L=z;w=bf(h^M,w^L,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;L=lg(M|0,L|0,V|0,K|0)|0;j=lg(L|0,z|0,W|0,j|0)|0;W=z;h=bf(w^j,h^W,16)|0;w=z;c[g+104>>2]=h;c[g+104+4>>2]=w;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;K=bf(V^U,K^I,63)|0;V=z;k=lg(B|0,D|0,T|0,k|0)|0;k=lg(k|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;T=z;s=bf(n^k,s^T,32)|0;n=z;S=lg(Y|0,S|0,s|0,n|0)|0;Y=z;D=bf(B^S,D^Y,24)|0;B=z;T=lg(k|0,T|0,D|0,B|0)|0;T=lg(T|0,z|0,c[t>>2]|0,c[t+4>>2]|0)|0;k=z;n=bf(s^T,n^k,16)|0;s=z;c[g+112>>2]=n;c[g+112+4>>2]=s;Y=lg(S|0,Y|0,n|0,s|0)|0;S=z;B=bf(D^Y,B^S,63)|0;D=z;b=lg(m|0,o|0,$|0,b|0)|0;b=lg(b|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;$=z;L=bf(c[g+120>>2]^b,c[g+120+4>>2]^$,32)|0;M=z;F=lg(E|0,F|0,L|0,M|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;$=lg(b|0,$|0,o|0,m|0)|0;$=lg($|0,z|0,c[v>>2]|0,c[v+4>>2]|0)|0;b=z;M=bf(L^$,M^b,16)|0;L=z;E=lg(F|0,E|0,M|0,L|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;Q=lg(K|0,V|0,G|0,Q|0)|0;G=c[d>>2]|0;d=c[d+4>>2]|0;Q=lg(Q|0,z|0,G|0,d|0)|0;ca=z;L=bf(M^Q,L^ca,32)|0;M=z;S=lg(Y|0,S|0,L|0,M|0)|0;Y=z;V=bf(K^S,V^Y,24)|0;K=z;ca=lg(Q|0,ca|0,V|0,K|0)|0;Q=c[R>>2]|0;R=c[R+4>>2]|0;ca=lg(ca|0,z|0,Q|0,R|0)|0;ba=z;M=bf(L^ca,M^ba,16)|0;L=z;c[g+120>>2]=M;c[g+120+4>>2]=L;L=lg(S|0,Y|0,M|0,L|0)|0;M=z;c[g+80>>2]=L;c[g+80+4>>2]=M;K=bf(V^L,K^M,63)|0;V=z;c[g+40>>2]=K;c[g+40+4>>2]=V;W=lg(B|0,D|0,j|0,W|0)|0;j=c[O>>2]|0;O=c[O+4>>2]|0;W=lg(W|0,z|0,j|0,O|0)|0;Y=z;C=bf(A^W,C^Y,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;Y=lg(W|0,Y|0,D|0,B|0)|0;Y=lg(Y|0,z|0,c[x>>2]|0,c[x+4>>2]|0)|0;W=z;A=bf(C^Y,A^W,16)|0;C=z;E=lg(F|0,E|0,A|0,C|0)|0;F=z;c[g+88>>2]=E;c[g+88+4>>2]=F;B=bf(D^E,B^F,63)|0;D=z;c[g+48>>2]=B;c[g+48+4>>2]=D;k=lg(m|0,o|0,T|0,k|0)|0;k=lg(k|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;T=z;w=bf(h^k,w^T,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;T=lg(k|0,T|0,o|0,m|0)|0;k=c[P>>2]|0;P=c[P+4>>2]|0;T=lg(T|0,z|0,k|0,P|0)|0;S=z;h=bf(w^T,h^S,16)|0;w=z;p=lg(u|0,p|0,h|0,w|0)|0;u=z;m=bf(o^p,m^u,63)|0;o=z;c[g+56>>2]=m;c[g+56+4>>2]=o;Z=c[g+32>>2]|0;_=c[g+32+4>>2]|0;b=lg(Z|0,_|0,$|0,b|0)|0;$=c[aa>>2]|0;aa=c[aa+4>>2]|0;b=lg(b|0,z|0,$|0,aa|0)|0;H=z;s=bf(n^b,s^H,32)|0;n=z;I=lg(U|0,I|0,s|0,n|0)|0;U=z;_=bf(Z^I,_^U,24)|0;Z=z;H=lg(b|0,H|0,_|0,Z|0)|0;b=c[y>>2]|0;y=c[y+4>>2]|0;H=lg(H|0,z|0,b|0,y|0)|0;J=z;n=bf(s^H,n^J,16)|0;s=z;U=lg(I|0,U|0,n|0,s|0)|0;I=z;Z=bf(_^U,Z^I,63)|0;_=z;ba=lg(ca|0,ba|0,Z|0,_|0)|0;aa=lg(ba|0,z|0,$|0,aa|0)|0;$=z;C=bf(A^aa,C^$,32)|0;A=z;u=lg(p|0,u|0,C|0,A|0)|0;p=z;_=bf(Z^u,_^p,24)|0;Z=z;$=lg(aa|0,$|0,_|0,Z|0)|0;O=lg($|0,z|0,j|0,O|0)|0;j=z;A=bf(C^O,A^j,16)|0;C=z;p=lg(u|0,p|0,A|0,C|0)|0;u=z;c[g+64>>2]=p;c[g+64+4>>2]=u;Z=bf(_^p,Z^u,63)|0;c[g+32>>2]=Z;c[g+32+4>>2]=z;W=lg(K|0,V|0,Y|0,W|0)|0;X=lg(W|0,z|0,c[X>>2]|0,c[X+4>>2]|0)|0;W=z;w=bf(h^X,w^W,32)|0;h=z;I=lg(U|0,I|0,w|0,h|0)|0;U=z;V=bf(K^I,V^U,24)|0;K=z;W=lg(X|0,W|0,V|0,K|0)|0;d=lg(W|0,z|0,G|0,d|0)|0;G=z;h=bf(w^d,h^G,16)|0;w=z;U=lg(I|0,U|0,h|0,w|0)|0;I=z;c[g+72>>2]=U;c[g+72+4>>2]=I;I=bf(V^U,K^I,63)|0;K=z;S=lg(B|0,D|0,T|0,S|0)|0;R=lg(S|0,z|0,Q|0,R|0)|0;Q=z;s=bf(n^R,s^Q,32)|0;n=z;M=lg(L|0,M|0,s|0,n|0)|0;L=z;D=bf(B^M,D^L,24)|0;B=z;Q=lg(R|0,Q|0,D|0,B|0)|0;y=lg(Q|0,z|0,b|0,y|0)|0;b=z;n=bf(s^y,n^b,16)|0;s=z;L=lg(M|0,L|0,n|0,s|0)|0;M=z;B=bf(D^L,B^M,63)|0;D=z;J=lg(m|0,o|0,H|0,J|0)|0;P=lg(J|0,z|0,k|0,P|0)|0;k=z;J=bf(c[g+120>>2]^P,c[g+120+4>>2]^k,32)|0;H=z;F=lg(E|0,F|0,J|0,H|0)|0;E=z;o=bf(m^F,o^E,24)|0;m=z;k=lg(P|0,k|0,o|0,m|0)|0;q=lg(k|0,z|0,c[q>>2]|0,c[q+4>>2]|0)|0;k=z;H=bf(J^q,H^k,16)|0;J=z;E=lg(F|0,E|0,H|0,J|0)|0;F=z;m=bf(o^E,m^F,63)|0;o=z;j=lg(I|0,K|0,O|0,j|0)|0;N=lg(j|0,z|0,c[N>>2]|0,c[N+4>>2]|0)|0;j=z;J=bf(H^N,J^j,32)|0;H=z;M=lg(L|0,M|0,J|0,H|0)|0;L=z;K=bf(I^M,K^L,24)|0;I=z;j=lg(N|0,j|0,K|0,I|0)|0;i=lg(j|0,z|0,c[i>>2]|0,c[i+4>>2]|0)|0;j=z;c[g>>2]=i;c[g+4>>2]=j;H=bf(J^i,H^j,16)|0;J=z;c[g+120>>2]=H;c[g+120+4>>2]=J;J=lg(M|0,L|0,H|0,J|0)|0;H=z;c[g+80>>2]=J;c[g+80+4>>2]=H;H=bf(K^J,I^H,63)|0;c[g+40>>2]=H;c[g+40+4>>2]=z;G=lg(B|0,D|0,d|0,G|0)|0;G=lg(G|0,z|0,c[g+128>>2]|0,c[g+128+4>>2]|0)|0;d=z;C=bf(A^G,C^d,32)|0;A=z;F=lg(E|0,F|0,C|0,A|0)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;d=lg(G|0,d|0,D|0,B|0)|0;e=lg(d|0,z|0,c[e>>2]|0,c[e+4>>2]|0)|0;d=z;c[g+8>>2]=e;c[g+8+4>>2]=d;A=bf(C^e,A^d,16)|0;C=z;c[g+96>>2]=A;c[g+96+4>>2]=C;C=lg(F|0,E|0,A|0,C|0)|0;A=z;c[g+88>>2]=C;c[g+88+4>>2]=A;A=bf(D^C,B^A,63)|0;c[g+48>>2]=A;c[g+48+4>>2]=z;b=lg(m|0,o|0,y|0,b|0)|0;x=lg(b|0,z|0,c[x>>2]|0,c[x+4>>2]|0)|0;b=z;w=bf(h^x,w^b,32)|0;h=z;u=lg(p|0,u|0,w|0,h|0)|0;p=z;o=bf(m^u,o^p,24)|0;m=z;b=lg(x|0,b|0,o|0,m|0)|0;v=lg(b|0,z|0,c[v>>2]|0,c[v+4>>2]|0)|0;b=z;c[g+16>>2]=v;c[g+16+4>>2]=b;b=bf(w^v,h^b,16)|0;h=z;c[g+104>>2]=b;c[g+104+4>>2]=h;h=lg(u|0,p|0,b|0,h|0)|0;b=z;c[g+64>>2]=h;c[g+64+4>>2]=b;m=bf(o^h,m^b,63)|0;c[g+56>>2]=m;c[g+56+4>>2]=z;m=c[g+32>>2]|0;o=c[g+32+4>>2]|0;k=lg(m|0,o|0,q|0,k|0)|0;t=lg(k|0,z|0,c[t>>2]|0,c[t+4>>2]|0)|0;k=z;s=bf(n^t,s^k,32)|0;n=z;q=lg(c[g+72>>2]|0,c[g+72+4>>2]|0,s|0,n|0)|0;p=z;o=bf(m^q,o^p,24)|0;m=z;k=lg(t|0,k|0,o|0,m|0)|0;r=lg(k|0,z|0,c[r>>2]|0,c[r+4>>2]|0)|0;k=z;c[g+24>>2]=r;c[g+24+4>>2]=k;k=bf(s^r,n^k,16)|0;n=z;c[g+112>>2]=k;c[g+112+4>>2]=n;n=lg(q|0,p|0,k|0,n|0)|0;k=z;c[g+72>>2]=n;c[g+72+4>>2]=k;k=bf(o^n,m^k,63)|0;c[g+32>>2]=k;c[g+32+4>>2]=z;b=j^c[a+4>>2]^b;c[a>>2]=i^c[a>>2]^h;c[a+4>>2]=b;b=1;while(1){ia=a+(b<<3)|0;ha=g+(b+8<<3)|0;d=d^c[ia+4>>2]^c[ha+4>>2];c[ia>>2]=e^c[ia>>2]^c[ha>>2];c[ia+4>>2]=d;d=b+1|0;if((d|0)==8)break;b=d;e=c[g+(d<<3)>>2]|0;d=c[g+(d<<3)+4>>2]|0}l=f;return}function ha(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0;Za=hf(a[c>>0]|0,a[c+1>>0]|0,a[c+2>>0]|0)|0;nb=Yd(c+2|0)|0;nb=Cf(nb|0,z|0,5)|0;A=hf(a[c+5>>0]|0,a[c+6>>0]|0,a[c+7>>0]|0)|0;A=Cf(A|0,z|0,2)|0;kb=Yd(c+7|0)|0;kb=Cf(kb|0,z|0,7)|0;l=Yd(c+10|0)|0;l=Cf(l|0,z|0,4)|0;J=hf(a[c+13>>0]|0,a[c+14>>0]|0,a[c+15>>0]|0)|0;J=Cf(J|0,z|0,1)|0;F=Yd(c+15|0)|0;F=Cf(F|0,z|0,6)|0;ea=hf(a[c+18>>0]|0,a[c+19>>0]|0,a[c+20>>0]|0)|0;ea=Cf(ea|0,z|0,3)|0;ib=hf(a[c+21>>0]|0,a[c+22>>0]|0,a[c+23>>0]|0)|0;I=Yd(c+23|0)|0;I=Cf(I|0,z|0,5)|0;qc=hf(a[c+26>>0]|0,a[c+27>>0]|0,a[c+28>>0]|0)|0;qc=Cf(qc|0,z|0,2)|0;n=Yd(c+28|0)|0;n=Cf(n|0,z|0,7)|0;ua=z;ub=hf(a[d>>0]|0,a[d+1>>0]|0,a[d+2>>0]|0)|0;Ia=Yd(d+2|0)|0;Ia=Cf(Ia|0,z|0,5)|0;Wa=hf(a[d+5>>0]|0,a[d+6>>0]|0,a[d+7>>0]|0)|0;Wa=Cf(Wa|0,z|0,2)|0;ca=Yd(d+7|0)|0;ca=Cf(ca|0,z|0,7)|0;P=Yd(d+10|0)|0;P=Cf(P|0,z|0,4)|0;ta=hf(a[d+13>>0]|0,a[d+14>>0]|0,a[d+15>>0]|0)|0;ta=Cf(ta|0,z|0,1)|0;xa=Yd(d+15|0)|0;xa=Cf(xa|0,z|0,6)|0;rb=hf(a[d+18>>0]|0,a[d+19>>0]|0,a[d+20>>0]|0)|0;rb=Cf(rb|0,z|0,3)|0;na=hf(a[d+21>>0]|0,a[d+22>>0]|0,a[d+23>>0]|0)|0;O=Yd(d+23|0)|0;O=Cf(O|0,z|0,5)|0;Ja=hf(a[d+26>>0]|0,a[d+27>>0]|0,a[d+28>>0]|0)|0;Ja=Cf(Ja|0,z|0,2)|0;w=Yd(d+28|0)|0;w=Cf(w|0,z|0,7)|0;qa=z;V=hf(a[e>>0]|0,a[e+1>>0]|0,a[e+2>>0]|0)|0;oa=Yd(e+2|0)|0;oa=Cf(oa|0,z|0,5)|0;sa=hf(a[e+5>>0]|0,a[e+6>>0]|0,a[e+7>>0]|0)|0;sa=Cf(sa|0,z|0,2)|0;Na=Yd(e+7|0)|0;Na=Cf(Na|0,z|0,7)|0;ma=Yd(e+10|0)|0;ma=Cf(ma|0,z|0,4)|0;Da=hf(a[e+13>>0]|0,a[e+14>>0]|0,a[e+15>>0]|0)|0;Da=Cf(Da|0,z|0,1)|0;fb=Yd(e+15|0)|0;fb=Cf(fb|0,z|0,6)|0;g=hf(a[e+18>>0]|0,a[e+19>>0]|0,a[e+20>>0]|0)|0;g=Cf(g|0,z|0,3)|0;Ra=hf(a[e+21>>0]|0,a[e+22>>0]|0,a[e+23>>0]|0)|0;E=Yd(e+23|0)|0;E=Cf(E|0,z|0,5)|0;Qa=hf(a[e+26>>0]|0,a[e+27>>0]|0,a[e+28>>0]|0)|0;Qa=Cf(Qa|0,z|0,2)|0;c=Yd(e+28|0)|0;c=Cf(c|0,z|0,7)|0;h=z;pa=ef(ub&2097151|0,0,Za&2097151|0,0)|0;pa=lg(V&2097151|0,0,pa|0,z|0)|0;V=z;pc=ef(Ia&2097151|0,0,Za&2097151|0,0)|0;oc=z;nc=ef(ub&2097151|0,0,nb&2097151|0,0)|0;t=z;ja=ef(Wa&2097151|0,0,Za&2097151|0,0)|0;ra=z;ka=ef(Ia&2097151|0,0,nb&2097151|0,0)|0;ic=z;S=ef(ub&2097151|0,0,A&2097151|0,0)|0;S=lg(ka|0,ic|0,S|0,z|0)|0;ra=lg(S|0,z|0,ja|0,ra|0)|0;sa=lg(ra|0,z|0,sa&2097151|0,0)|0;ra=z;ja=ef(ca&2097151|0,0,Za&2097151|0,0)|0;S=z;ic=ef(Wa&2097151|0,0,nb&2097151|0,0)|0;ka=z;mc=ef(Ia&2097151|0,0,A&2097151|0,0)|0;lc=z;kc=ef(ub&2097151|0,0,kb&2097151|0,0)|0;jc=z;Ca=ef(P&2097151|0,0,Za&2097151|0,0)|0;la=z;$b=ef(ca&2097151|0,0,nb&2097151|0,0)|0;_=z;bc=ef(Wa&2097151|0,0,A&2097151|0,0)|0;Ba=z;cc=ef(Ia&2097151|0,0,kb&2097151|0,0)|0;dc=z;ac=ef(ub&2097151|0,0,l&2097151|0,0)|0;ac=lg(cc|0,dc|0,ac|0,z|0)|0;Ba=lg(ac|0,z|0,bc|0,Ba|0)|0;_=lg(Ba|0,z|0,$b|0,_|0)|0;la=lg(_|0,z|0,Ca|0,la|0)|0;ma=lg(la|0,z|0,ma&2097151|0,0)|0;la=z;Ca=ef(ta&2097151|0,0,Za&2097151|0,0)|0;_=z;$b=ef(P&2097151|0,0,nb&2097151|0,0)|0;Ba=z;bc=ef(ca&2097151|0,0,A&2097151|0,0)|0;ac=z;dc=ef(Wa&2097151|0,0,kb&2097151|0,0)|0;cc=z;hc=ef(Ia&2097151|0,0,l&2097151|0,0)|0;gc=z;fc=ef(ub&2097151|0,0,J&2097151|0,0)|0;ec=z;Y=ef(xa&2097151|0,0,Za&2097151|0,0)|0;$a=z;Ob=ef(ta&2097151|0,0,nb&2097151|0,0)|0;B=z;Qb=ef(P&2097151|0,0,A&2097151|0,0)|0;X=z;Sb=ef(ca&2097151|0,0,kb&2097151|0,0)|0;Pb=z;Ub=ef(Wa&2097151|0,0,l&2097151|0,0)|0;Rb=z;Vb=ef(Ia&2097151|0,0,J&2097151|0,0)|0;Wb=z;Tb=ef(ub&2097151|0,0,F&2097151|0,0)|0;Tb=lg(Vb|0,Wb|0,Tb|0,z|0)|0;Rb=lg(Tb|0,z|0,Ub|0,Rb|0)|0;Pb=lg(Rb|0,z|0,Sb|0,Pb|0)|0;X=lg(Pb|0,z|0,Qb|0,X|0)|0;B=lg(X|0,z|0,Ob|0,B|0)|0;$a=lg(B|0,z|0,Y|0,$a|0)|0;fb=lg($a|0,z|0,fb&2097151|0,0)|0;$a=z;Y=ef(rb&2097151|0,0,Za&2097151|0,0)|0;B=z;Ob=ef(xa&2097151|0,0,nb&2097151|0,0)|0;X=z;Qb=ef(ta&2097151|0,0,A&2097151|0,0)|0;Pb=z;Sb=ef(P&2097151|0,0,kb&2097151|0,0)|0;Rb=z;Ub=ef(ca&2097151|0,0,l&2097151|0,0)|0;Tb=z;Wb=ef(Wa&2097151|0,0,J&2097151|0,0)|0;Vb=z;_b=ef(Ia&2097151|0,0,F&2097151|0,0)|0;Zb=z;Yb=ef(ub&2097151|0,0,ea&2097151|0,0)|0;Xb=z;zb=ef(na&2097151|0,0,Za&2097151|0,0)|0;e=z;i=ef(rb&2097151|0,0,nb&2097151|0,0)|0;Sa=z;xb=ef(xa&2097151|0,0,A&2097151|0,0)|0;yb=z;Bb=ef(ta&2097151|0,0,kb&2097151|0,0)|0;va=z;Db=ef(P&2097151|0,0,l&2097151|0,0)|0;Ab=z;Fb=ef(ca&2097151|0,0,J&2097151|0,0)|0;Cb=z;Hb=ef(Wa&2097151|0,0,F&2097151|0,0)|0;Eb=z;Ib=ef(Ia&2097151|0,0,ea&2097151|0,0)|0;Jb=z;Gb=ef(ub&2097151|0,0,ib&2097151|0,0)|0;Gb=lg(Ib|0,Jb|0,Gb|0,z|0)|0;Eb=lg(Gb|0,z|0,Hb|0,Eb|0)|0;Cb=lg(Eb|0,z|0,Fb|0,Cb|0)|0;Ab=lg(Cb|0,z|0,Db|0,Ab|0)|0;va=lg(Ab|0,z|0,Bb|0,va|0)|0;yb=lg(va|0,z|0,xb|0,yb|0)|0;e=lg(yb|0,z|0,zb|0,e|0)|0;Sa=lg(e|0,z|0,i|0,Sa|0)|0;Ra=lg(Sa|0,z|0,Ra&2097151|0,0)|0;Sa=z;i=ef(O&2097151|0,0,Za&2097151|0,0)|0;e=z;zb=ef(na&2097151|0,0,nb&2097151|0,0)|0;yb=z;xb=ef(rb&2097151|0,0,A&2097151|0,0)|0;va=z;Bb=ef(xa&2097151|0,0,kb&2097151|0,0)|0;Ab=z;Db=ef(ta&2097151|0,0,l&2097151|0,0)|0;Cb=z;Fb=ef(P&2097151|0,0,J&2097151|0,0)|0;Eb=z;Hb=ef(ca&2097151|0,0,F&2097151|0,0)|0;Gb=z;Jb=ef(Wa&2097151|0,0,ea&2097151|0,0)|0;Ib=z;Nb=ef(Ia&2097151|0,0,ib&2097151|0,0)|0;Mb=z;Lb=ef(ub&2097151|0,0,I&2097151|0,0)|0;Kb=z;_a=ef(Ja&2097151|0,0,Za&2097151|0,0)|0;Pa=z;ab=ef(O&2097151|0,0,nb&2097151|0,0)|0;gb=z;$=ef(na&2097151|0,0,A&2097151|0,0)|0;aa=z;U=ef(rb&2097151|0,0,kb&2097151|0,0)|0;T=z;mb=ef(xa&2097151|0,0,l&2097151|0,0)|0;lb=z;Ma=ef(ta&2097151|0,0,J&2097151|0,0)|0;La=z;eb=ef(P&2097151|0,0,F&2097151|0,0)|0;db=z;Ga=ef(ca&2097151|0,0,ea&2097151|0,0)|0;Fa=z;Ua=ef(Wa&2097151|0,0,ib&2097151|0,0)|0;Ta=z;wb=ef(Ia&2097151|0,0,I&2097151|0,0)|0;L=z;Q=ef(ub&2097151|0,0,qc&2097151|0,0)|0;Q=lg(wb|0,L|0,Q|0,z|0)|0;Ta=lg(Q|0,z|0,Ua|0,Ta|0)|0;Fa=lg(Ta|0,z|0,Ga|0,Fa|0)|0;db=lg(Fa|0,z|0,eb|0,db|0)|0;La=lg(db|0,z|0,Ma|0,La|0)|0;lb=lg(La|0,z|0,mb|0,lb|0)|0;aa=lg(lb|0,z|0,$|0,aa|0)|0;T=lg(aa|0,z|0,U|0,T|0)|0;gb=lg(T|0,z|0,ab|0,gb|0)|0;Pa=lg(gb|0,z|0,_a|0,Pa|0)|0;Qa=lg(Pa|0,z|0,Qa&2097151|0,0)|0;Pa=z;Za=ef(w|0,qa|0,Za&2097151|0,0)|0;_a=z;gb=ef(Ja&2097151|0,0,nb&2097151|0,0)|0;ab=z;T=ef(O&2097151|0,0,A&2097151|0,0)|0;U=z;aa=ef(na&2097151|0,0,kb&2097151|0,0)|0;$=z;lb=ef(rb&2097151|0,0,l&2097151|0,0)|0;mb=z;La=ef(xa&2097151|0,0,J&2097151|0,0)|0;Ma=z;db=ef(ta&2097151|0,0,F&2097151|0,0)|0;eb=z;Fa=ef(P&2097151|0,0,ea&2097151|0,0)|0;Ga=z;Ta=ef(ca&2097151|0,0,ib&2097151|0,0)|0;Ua=z;Q=ef(Wa&2097151|0,0,I&2097151|0,0)|0;L=z;wb=ef(Ia&2097151|0,0,qc&2097151|0,0)|0;vb=z;ub=ef(ub&2097151|0,0,n|0,ua|0)|0;tb=z;nb=ef(w|0,qa|0,nb&2097151|0,0)|0;ob=z;bb=ef(Ja&2097151|0,0,A&2097151|0,0)|0;v=z;M=ef(O&2097151|0,0,kb&2097151|0,0)|0;cb=z;pb=ef(na&2097151|0,0,l&2097151|0,0)|0;u=z;p=ef(rb&2097151|0,0,J&2097151|0,0)|0;hb=z;q=ef(xa&2097151|0,0,F&2097151|0,0)|0;qb=z;ha=ef(ta&2097151|0,0,ea&2097151|0,0)|0;y=z;da=ef(P&2097151|0,0,ib&2097151|0,0)|0;ia=z;Ha=ef(ca&2097151|0,0,I&2097151|0,0)|0;R=z;jb=ef(Wa&2097151|0,0,qc&2097151|0,0)|0;Va=z;Ia=ef(Ia&2097151|0,0,n|0,ua|0)|0;Ia=lg(jb|0,Va|0,Ia|0,z|0)|0;R=lg(Ia|0,z|0,Ha|0,R|0)|0;ia=lg(R|0,z|0,da|0,ia|0)|0;y=lg(ia|0,z|0,ha|0,y|0)|0;qb=lg(y|0,z|0,q|0,qb|0)|0;u=lg(qb|0,z|0,pb|0,u|0)|0;hb=lg(u|0,z|0,p|0,hb|0)|0;cb=lg(hb|0,z|0,M|0,cb|0)|0;v=lg(cb|0,z|0,bb|0,v|0)|0;ob=lg(v|0,z|0,nb|0,ob|0)|0;nb=z;A=ef(w|0,qa|0,A&2097151|0,0)|0;v=z;bb=ef(Ja&2097151|0,0,kb&2097151|0,0)|0;cb=z;M=ef(O&2097151|0,0,l&2097151|0,0)|0;hb=z;p=ef(na&2097151|0,0,J&2097151|0,0)|0;u=z;pb=ef(rb&2097151|0,0,F&2097151|0,0)|0;qb=z;q=ef(xa&2097151|0,0,ea&2097151|0,0)|0;y=z;ha=ef(ta&2097151|0,0,ib&2097151|0,0)|0;ia=z;da=ef(P&2097151|0,0,I&2097151|0,0)|0;R=z;Ha=ef(ca&2097151|0,0,qc&2097151|0,0)|0;Ia=z;Wa=ef(Wa&2097151|0,0,n|0,ua|0)|0;Va=z;kb=ef(w|0,qa|0,kb&2097151|0,0)|0;jb=z;Xa=ef(Ja&2097151|0,0,l&2097151|0,0)|0;j=z;m=ef(O&2097151|0,0,J&2097151|0,0)|0;Ya=z;W=ef(na&2097151|0,0,F&2097151|0,0)|0;G=z;Z=ef(rb&2097151|0,0,ea&2097151|0,0)|0;f=z;za=ef(xa&2097151|0,0,ib&2097151|0,0)|0;r=z;wa=ef(ta&2097151|0,0,I&2097151|0,0)|0;k=z;sb=ef(P&2097151|0,0,qc&2097151|0,0)|0;o=z;ca=ef(ca&2097151|0,0,n|0,ua|0)|0;ca=lg(sb|0,o|0,ca|0,z|0)|0;k=lg(ca|0,z|0,wa|0,k|0)|0;r=lg(k|0,z|0,za|0,r|0)|0;G=lg(r|0,z|0,W|0,G|0)|0;f=lg(G|0,z|0,Z|0,f|0)|0;Ya=lg(f|0,z|0,m|0,Ya|0)|0;j=lg(Ya|0,z|0,Xa|0,j|0)|0;jb=lg(j|0,z|0,kb|0,jb|0)|0;kb=z;l=ef(w|0,qa|0,l&2097151|0,0)|0;j=z;Xa=ef(Ja&2097151|0,0,J&2097151|0,0)|0;Ya=z;m=ef(O&2097151|0,0,F&2097151|0,0)|0;f=z;Z=ef(na&2097151|0,0,ea&2097151|0,0)|0;G=z;W=ef(rb&2097151|0,0,ib&2097151|0,0)|0;r=z;za=ef(xa&2097151|0,0,I&2097151|0,0)|0;k=z;wa=ef(ta&2097151|0,0,qc&2097151|0,0)|0;ca=z;P=ef(P&2097151|0,0,n|0,ua|0)|0;o=z;J=ef(w|0,qa|0,J&2097151|0,0)|0;sb=z;fa=ef(Ja&2097151|0,0,F&2097151|0,0)|0;Ka=z;Ea=ef(O&2097151|0,0,ea&2097151|0,0)|0;C=z;ba=ef(na&2097151|0,0,ib&2097151|0,0)|0;s=z;D=ef(rb&2097151|0,0,I&2097151|0,0)|0;Aa=z;K=ef(xa&2097151|0,0,qc&2097151|0,0)|0;ya=z;d=ef(ta&2097151|0,0,n|0,ua|0)|0;d=lg(K|0,ya|0,d|0,z|0)|0;s=lg(d|0,z|0,ba|0,s|0)|0;Aa=lg(s|0,z|0,D|0,Aa|0)|0;C=lg(Aa|0,z|0,Ea|0,C|0)|0;Ka=lg(C|0,z|0,fa|0,Ka|0)|0;sb=lg(Ka|0,z|0,J|0,sb|0)|0;J=z;F=ef(w|0,qa|0,F&2097151|0,0)|0;Ka=z;fa=ef(Ja&2097151|0,0,ea&2097151|0,0)|0;C=z;Ea=ef(O&2097151|0,0,ib&2097151|0,0)|0;Aa=z;D=ef(na&2097151|0,0,I&2097151|0,0)|0;s=z;ba=ef(rb&2097151|0,0,qc&2097151|0,0)|0;d=z;xa=ef(xa&2097151|0,0,n|0,ua|0)|0;ya=z;ea=ef(w|0,qa|0,ea&2097151|0,0)|0;K=z;ta=ef(Ja&2097151|0,0,ib&2097151|0,0)|0;N=z;Oa=ef(O&2097151|0,0,I&2097151|0,0)|0;H=z;x=ef(na&2097151|0,0,qc&2097151|0,0)|0;ga=z;rb=ef(rb&2097151|0,0,n|0,ua|0)|0;ga=lg(rb|0,z|0,x|0,ga|0)|0;H=lg(ga|0,z|0,Oa|0,H|0)|0;N=lg(H|0,z|0,ta|0,N|0)|0;K=lg(N|0,z|0,ea|0,K|0)|0;ea=z;ib=ef(w|0,qa|0,ib&2097151|0,0)|0;N=z;ta=ef(Ja&2097151|0,0,I&2097151|0,0)|0;H=z;Oa=ef(O&2097151|0,0,qc&2097151|0,0)|0;ga=z;na=ef(na&2097151|0,0,n|0,ua|0)|0;x=z;I=ef(w|0,qa|0,I&2097151|0,0)|0;rb=z;sc=ef(Ja&2097151|0,0,qc&2097151|0,0)|0;rc=z;O=ef(O&2097151|0,0,n|0,ua|0)|0;O=lg(sc|0,rc|0,O|0,z|0)|0;rb=lg(O|0,z|0,I|0,rb|0)|0;I=z;qc=ef(w|0,qa|0,qc&2097151|0,0)|0;O=z;Ja=ef(Ja&2097151|0,0,n|0,ua|0)|0;Ja=lg(qc|0,O|0,Ja|0,z|0)|0;O=z;ua=ef(w|0,qa|0,n|0,ua|0)|0;n=z;qa=lg(pa|0,V|0,1048576,0)|0;qa=Cf(qa|0,z|0,21)|0;w=z;t=lg(pc|0,oc|0,nc|0,t|0)|0;oa=lg(t|0,z|0,oa&2097151|0,0)|0;oa=lg(oa|0,z|0,qa|0,w|0)|0;t=z;w=zf(qa|0,w|0,21)|0;w=ig(pa|0,V|0,w|0,z|0)|0;V=z;pa=lg(sa|0,ra|0,1048576,0)|0;pa=Cf(pa|0,z|0,21)|0;qa=z;jc=lg(mc|0,lc|0,kc|0,jc|0)|0;ka=lg(jc|0,z|0,ic|0,ka|0)|0;S=lg(ka|0,z|0,ja|0,S|0)|0;Na=lg(S|0,z|0,Na&2097151|0,0)|0;Na=lg(Na|0,z|0,pa|0,qa|0)|0;S=z;qa=zf(pa|0,qa|0,21)|0;pa=z;ja=lg(ma|0,la|0,1048576,0)|0;ja=$e(ja|0,z|0,21)|0;ka=z;ec=lg(hc|0,gc|0,fc|0,ec|0)|0;cc=lg(ec|0,z|0,dc|0,cc|0)|0;ac=lg(cc|0,z|0,bc|0,ac|0)|0;Ba=lg(ac|0,z|0,$b|0,Ba|0)|0;_=lg(Ba|0,z|0,Ca|0,_|0)|0;Da=lg(_|0,z|0,Da&2097151|0,0)|0;Da=lg(Da|0,z|0,ja|0,ka|0)|0;_=z;ka=zf(ja|0,ka|0,21)|0;ja=z;Ca=lg(fb|0,$a|0,1048576,0)|0;Ca=$e(Ca|0,z|0,21)|0;Ba=z;Xb=lg(_b|0,Zb|0,Yb|0,Xb|0)|0;Vb=lg(Xb|0,z|0,Wb|0,Vb|0)|0;Tb=lg(Vb|0,z|0,Ub|0,Tb|0)|0;Rb=lg(Tb|0,z|0,Sb|0,Rb|0)|0;Pb=lg(Rb|0,z|0,Qb|0,Pb|0)|0;X=lg(Pb|0,z|0,Ob|0,X|0)|0;B=lg(X|0,z|0,Y|0,B|0)|0;g=lg(B|0,z|0,g&2097151|0,0)|0;g=lg(g|0,z|0,Ca|0,Ba|0)|0;B=z;Ba=zf(Ca|0,Ba|0,21)|0;Ca=z;Y=lg(Ra|0,Sa|0,1048576,0)|0;Y=$e(Y|0,z|0,21)|0;X=z;Kb=lg(Nb|0,Mb|0,Lb|0,Kb|0)|0;Ib=lg(Kb|0,z|0,Jb|0,Ib|0)|0;Gb=lg(Ib|0,z|0,Hb|0,Gb|0)|0;Eb=lg(Gb|0,z|0,Fb|0,Eb|0)|0;Cb=lg(Eb|0,z|0,Db|0,Cb|0)|0;Ab=lg(Cb|0,z|0,Bb|0,Ab|0)|0;yb=lg(Ab|0,z|0,zb|0,yb|0)|0;va=lg(yb|0,z|0,xb|0,va|0)|0;e=lg(va|0,z|0,i|0,e|0)|0;e=lg(e|0,z|0,E&2097151|0,0)|0;e=lg(e|0,z|0,Y|0,X|0)|0;E=z;X=zf(Y|0,X|0,21)|0;Y=z;i=lg(Qa|0,Pa|0,1048576,0)|0;i=$e(i|0,z|0,21)|0;va=z;tb=lg(wb|0,vb|0,ub|0,tb|0)|0;L=lg(tb|0,z|0,Q|0,L|0)|0;Ua=lg(L|0,z|0,Ta|0,Ua|0)|0;Ga=lg(Ua|0,z|0,Fa|0,Ga|0)|0;eb=lg(Ga|0,z|0,db|0,eb|0)|0;Ma=lg(eb|0,z|0,La|0,Ma|0)|0;$=lg(Ma|0,z|0,aa|0,$|0)|0;mb=lg($|0,z|0,lb|0,mb|0)|0;U=lg(mb|0,z|0,T|0,U|0)|0;_a=lg(U|0,z|0,Za|0,_a|0)|0;ab=lg(_a|0,z|0,gb|0,ab|0)|0;h=lg(ab|0,z|0,c|0,h|0)|0;h=lg(h|0,z|0,i|0,va|0)|0;c=z;va=zf(i|0,va|0,21)|0;i=z;ab=lg(ob|0,nb|0,1048576,0)|0;ab=$e(ab|0,z|0,21)|0;gb=z;Va=lg(Ha|0,Ia|0,Wa|0,Va|0)|0;R=lg(Va|0,z|0,da|0,R|0)|0;ia=lg(R|0,z|0,ha|0,ia|0)|0;y=lg(ia|0,z|0,q|0,y|0)|0;u=lg(y|0,z|0,p|0,u|0)|0;qb=lg(u|0,z|0,pb|0,qb|0)|0;hb=lg(qb|0,z|0,M|0,hb|0)|0;cb=lg(hb|0,z|0,bb|0,cb|0)|0;v=lg(cb|0,z|0,A|0,v|0)|0;v=lg(v|0,z|0,ab|0,gb|0)|0;A=z;gb=zf(ab|0,gb|0,21)|0;ab=z;cb=lg(jb|0,kb|0,1048576,0)|0;cb=$e(cb|0,z|0,21)|0;bb=z;o=lg(wa|0,ca|0,P|0,o|0)|0;k=lg(o|0,z|0,za|0,k|0)|0;G=lg(k|0,z|0,Z|0,G|0)|0;r=lg(G|0,z|0,W|0,r|0)|0;f=lg(r|0,z|0,m|0,f|0)|0;Ya=lg(f|0,z|0,Xa|0,Ya|0)|0;j=lg(Ya|0,z|0,l|0,j|0)|0;j=lg(j|0,z|0,cb|0,bb|0)|0;l=z;bb=zf(cb|0,bb|0,21)|0;cb=z;Ya=lg(sb|0,J|0,1048576,0)|0;Ya=$e(Ya|0,z|0,21)|0;Xa=z;ya=lg(D|0,s|0,xa|0,ya|0)|0;d=lg(ya|0,z|0,ba|0,d|0)|0;Aa=lg(d|0,z|0,Ea|0,Aa|0)|0;C=lg(Aa|0,z|0,fa|0,C|0)|0;Ka=lg(C|0,z|0,F|0,Ka|0)|0;Ka=lg(Ka|0,z|0,Ya|0,Xa|0)|0;F=z;Xa=zf(Ya|0,Xa|0,21)|0;Ya=z;C=lg(K|0,ea|0,1048576,0)|0;C=$e(C|0,z|0,21)|0;fa=z;x=lg(Oa|0,ga|0,na|0,x|0)|0;H=lg(x|0,z|0,ta|0,H|0)|0;N=lg(H|0,z|0,ib|0,N|0)|0;N=lg(N|0,z|0,C|0,fa|0)|0;ib=z;fa=zf(C|0,fa|0,21)|0;fa=ig(K|0,ea|0,fa|0,z|0)|0;ea=z;K=lg(rb|0,I|0,1048576,0)|0;K=$e(K|0,z|0,21)|0;C=z;O=lg(Ja|0,O|0,K|0,C|0)|0;Ja=z;C=zf(K|0,C|0,21)|0;C=ig(rb|0,I|0,C|0,z|0)|0;I=z;rb=lg(ua|0,n|0,1048576,0)|0;rb=$e(rb|0,z|0,21)|0;K=z;H=zf(rb|0,K|0,21)|0;H=ig(ua|0,n|0,H|0,z|0)|0;n=z;ua=lg(oa|0,t|0,1048576,0)|0;ua=Cf(ua|0,z|0,21)|0;ta=z;x=zf(ua|0,ta|0,21)|0;x=ig(oa|0,t|0,x|0,z|0)|0;t=z;oa=lg(Na|0,S|0,1048576,0)|0;oa=$e(oa|0,z|0,21)|0;na=z;ga=zf(oa|0,na|0,21)|0;ga=ig(Na|0,S|0,ga|0,z|0)|0;S=z;Na=lg(Da|0,_|0,1048576,0)|0;Na=$e(Na|0,z|0,21)|0;Oa=z;Aa=zf(Na|0,Oa|0,21)|0;Aa=ig(Da|0,_|0,Aa|0,z|0)|0;_=z;Da=lg(g|0,B|0,1048576,0)|0;Da=$e(Da|0,z|0,21)|0;Ea=z;d=zf(Da|0,Ea|0,21)|0;ba=z;ya=lg(e|0,E|0,1048576,0)|0;ya=$e(ya|0,z|0,21)|0;xa=z;s=zf(ya|0,xa|0,21)|0;D=z;f=lg(h|0,c|0,1048576,0)|0;f=$e(f|0,z|0,21)|0;m=z;r=zf(f|0,m|0,21)|0;W=z;G=lg(v|0,A|0,1048576,0)|0;G=$e(G|0,z|0,21)|0;Z=z;k=zf(G|0,Z|0,21)|0;za=z;o=lg(j|0,l|0,1048576,0)|0;o=$e(o|0,z|0,21)|0;P=z;ca=zf(o|0,P|0,21)|0;wa=z;hb=lg(Ka|0,F|0,1048576,0)|0;hb=$e(hb|0,z|0,21)|0;M=z;ea=lg(hb|0,M|0,fa|0,ea|0)|0;fa=z;M=zf(hb|0,M|0,21)|0;M=ig(Ka|0,F|0,M|0,z|0)|0;F=z;Ka=lg(N|0,ib|0,1048576,0)|0;Ka=$e(Ka|0,z|0,21)|0;hb=z;I=lg(Ka|0,hb|0,C|0,I|0)|0;C=z;hb=zf(Ka|0,hb|0,21)|0;hb=ig(N|0,ib|0,hb|0,z|0)|0;ib=z;N=lg(O|0,Ja|0,1048576,0)|0;N=$e(N|0,z|0,21)|0;Ka=z;n=lg(N|0,Ka|0,H|0,n|0)|0;H=z;Ka=zf(N|0,Ka|0,21)|0;Ka=ig(O|0,Ja|0,Ka|0,z|0)|0;Ja=z;O=ef(rb|0,K|0,666643,0)|0;N=z;qb=ef(rb|0,K|0,470296,0)|0;pb=z;u=ef(rb|0,K|0,654183,0)|0;p=z;y=ef(rb|0,K|0,-997805,-1)|0;q=z;ia=ef(rb|0,K|0,136657,0)|0;ha=z;K=ef(rb|0,K|0,-683901,-1)|0;K=lg(sb|0,J|0,K|0,z|0)|0;Ya=ig(K|0,z|0,Xa|0,Ya|0)|0;P=lg(Ya|0,z|0,o|0,P|0)|0;o=z;Ya=ef(n|0,H|0,666643,0)|0;Xa=z;K=ef(n|0,H|0,470296,0)|0;J=z;sb=ef(n|0,H|0,654183,0)|0;rb=z;R=ef(n|0,H|0,-997805,-1)|0;da=z;Va=ef(n|0,H|0,136657,0)|0;Wa=z;H=ef(n|0,H|0,-683901,-1)|0;n=z;Ia=ef(Ka|0,Ja|0,666643,0)|0;Ha=z;_a=ef(Ka|0,Ja|0,470296,0)|0;Za=z;U=ef(Ka|0,Ja|0,654183,0)|0;T=z;mb=ef(Ka|0,Ja|0,-997805,-1)|0;lb=z;$=ef(Ka|0,Ja|0,136657,0)|0;aa=z;Ja=ef(Ka|0,Ja|0,-683901,-1)|0;Ka=z;q=lg(jb|0,kb|0,y|0,q|0)|0;Wa=lg(q|0,z|0,Va|0,Wa|0)|0;Ka=lg(Wa|0,z|0,Ja|0,Ka|0)|0;cb=ig(Ka|0,z|0,bb|0,cb|0)|0;Z=lg(cb|0,z|0,G|0,Z|0)|0;G=z;cb=ef(I|0,C|0,666643,0)|0;bb=z;Ka=ef(I|0,C|0,470296,0)|0;Ja=z;Wa=ef(I|0,C|0,654183,0)|0;Va=z;q=ef(I|0,C|0,-997805,-1)|0;y=z;kb=ef(I|0,C|0,136657,0)|0;jb=z;C=ef(I|0,C|0,-683901,-1)|0;I=z;Ma=ef(hb|0,ib|0,666643,0)|0;La=z;eb=ef(hb|0,ib|0,470296,0)|0;db=z;Ga=ef(hb|0,ib|0,654183,0)|0;Fa=z;Ua=ef(hb|0,ib|0,-997805,-1)|0;Ta=z;L=ef(hb|0,ib|0,136657,0)|0;Q=z;ib=ef(hb|0,ib|0,-683901,-1)|0;hb=z;pb=lg(sb|0,rb|0,qb|0,pb|0)|0;nb=lg(pb|0,z|0,ob|0,nb|0)|0;lb=lg(nb|0,z|0,mb|0,lb|0)|0;jb=lg(lb|0,z|0,kb|0,jb|0)|0;hb=lg(jb|0,z|0,ib|0,hb|0)|0;ab=ig(hb|0,z|0,gb|0,ab|0)|0;m=lg(ab|0,z|0,f|0,m|0)|0;f=z;ab=ef(ea|0,fa|0,666643,0)|0;ab=lg(fb|0,$a|0,ab|0,z|0)|0;Oa=lg(ab|0,z|0,Na|0,Oa|0)|0;Ca=ig(Oa|0,z|0,Ba|0,Ca|0)|0;Ba=z;Oa=ef(ea|0,fa|0,470296,0)|0;Na=z;ab=ef(ea|0,fa|0,654183,0)|0;$a=z;bb=lg(eb|0,db|0,cb|0,bb|0)|0;$a=lg(bb|0,z|0,ab|0,$a|0)|0;Sa=lg($a|0,z|0,Ra|0,Sa|0)|0;Ea=lg(Sa|0,z|0,Da|0,Ea|0)|0;Y=ig(Ea|0,z|0,X|0,Y|0)|0;X=z;Ea=ef(ea|0,fa|0,-997805,-1)|0;Da=z;Sa=ef(ea|0,fa|0,136657,0)|0;Ra=z;Xa=lg(_a|0,Za|0,Ya|0,Xa|0)|0;Va=lg(Xa|0,z|0,Wa|0,Va|0)|0;Ta=lg(Va|0,z|0,Ua|0,Ta|0)|0;Ra=lg(Ta|0,z|0,Sa|0,Ra|0)|0;Pa=lg(Ra|0,z|0,Qa|0,Pa|0)|0;xa=lg(Pa|0,z|0,ya|0,xa|0)|0;i=ig(xa|0,z|0,va|0,i|0)|0;va=z;fa=ef(ea|0,fa|0,-683901,-1)|0;ea=z;xa=lg(Ca|0,Ba|0,1048576,0)|0;xa=$e(xa|0,z|0,21)|0;ya=z;La=lg(Oa|0,Na|0,Ma|0,La|0)|0;B=lg(La|0,z|0,g|0,B|0)|0;ba=ig(B|0,z|0,d|0,ba|0)|0;ba=lg(ba|0,z|0,xa|0,ya|0)|0;d=z;ya=zf(xa|0,ya|0,21)|0;xa=z;B=lg(Y|0,X|0,1048576,0)|0;B=$e(B|0,z|0,21)|0;g=z;Ha=lg(Ka|0,Ja|0,Ia|0,Ha|0)|0;Fa=lg(Ha|0,z|0,Ga|0,Fa|0)|0;Da=lg(Fa|0,z|0,Ea|0,Da|0)|0;E=lg(Da|0,z|0,e|0,E|0)|0;D=ig(E|0,z|0,s|0,D|0)|0;D=lg(D|0,z|0,B|0,g|0)|0;s=z;g=zf(B|0,g|0,21)|0;B=z;E=lg(i|0,va|0,1048576,0)|0;E=$e(E|0,z|0,21)|0;e=z;N=lg(K|0,J|0,O|0,N|0)|0;T=lg(N|0,z|0,U|0,T|0)|0;y=lg(T|0,z|0,q|0,y|0)|0;Q=lg(y|0,z|0,L|0,Q|0)|0;ea=lg(Q|0,z|0,fa|0,ea|0)|0;c=lg(ea|0,z|0,h|0,c|0)|0;W=ig(c|0,z|0,r|0,W|0)|0;W=lg(W|0,z|0,E|0,e|0)|0;r=z;e=zf(E|0,e|0,21)|0;E=z;c=lg(m|0,f|0,1048576,0)|0;c=$e(c|0,z|0,21)|0;h=z;p=lg(R|0,da|0,u|0,p|0)|0;aa=lg(p|0,z|0,$|0,aa|0)|0;I=lg(aa|0,z|0,C|0,I|0)|0;A=lg(I|0,z|0,v|0,A|0)|0;za=ig(A|0,z|0,k|0,za|0)|0;za=lg(za|0,z|0,c|0,h|0)|0;k=z;h=zf(c|0,h|0,21)|0;h=ig(m|0,f|0,h|0,z|0)|0;f=z;m=lg(Z|0,G|0,1048576,0)|0;m=$e(m|0,z|0,21)|0;c=z;ha=lg(H|0,n|0,ia|0,ha|0)|0;l=lg(ha|0,z|0,j|0,l|0)|0;wa=ig(l|0,z|0,ca|0,wa|0)|0;wa=lg(wa|0,z|0,m|0,c|0)|0;ca=z;c=zf(m|0,c|0,21)|0;c=ig(Z|0,G|0,c|0,z|0)|0;G=z;Z=lg(P|0,o|0,1048576,0)|0;Z=$e(Z|0,z|0,21)|0;m=z;F=lg(Z|0,m|0,M|0,F|0)|0;M=z;m=zf(Z|0,m|0,21)|0;m=ig(P|0,o|0,m|0,z|0)|0;o=z;P=lg(ba|0,d|0,1048576,0)|0;P=$e(P|0,z|0,21)|0;Z=z;l=zf(P|0,Z|0,21)|0;j=z;ha=lg(D|0,s|0,1048576,0)|0;ha=$e(ha|0,z|0,21)|0;ia=z;n=zf(ha|0,ia|0,21)|0;H=z;A=lg(W|0,r|0,1048576,0)|0;A=$e(A|0,z|0,21)|0;v=z;f=lg(A|0,v|0,h|0,f|0)|0;h=z;v=zf(A|0,v|0,21)|0;v=ig(W|0,r|0,v|0,z|0)|0;r=z;W=lg(za|0,k|0,1048576,0)|0;W=$e(W|0,z|0,21)|0;A=z;G=lg(W|0,A|0,c|0,G|0)|0;c=z;A=zf(W|0,A|0,21)|0;A=ig(za|0,k|0,A|0,z|0)|0;k=z;za=lg(wa|0,ca|0,1048576,0)|0;za=$e(za|0,z|0,21)|0;W=z;o=lg(za|0,W|0,m|0,o|0)|0;m=z;W=zf(za|0,W|0,21)|0;W=ig(wa|0,ca|0,W|0,z|0)|0;ca=z;wa=ef(F|0,M|0,666643,0)|0;wa=lg(Aa|0,_|0,wa|0,z|0)|0;_=z;Aa=ef(F|0,M|0,470296,0)|0;za=z;I=ef(F|0,M|0,654183,0)|0;C=z;aa=ef(F|0,M|0,-997805,-1)|0;$=z;p=ef(F|0,M|0,136657,0)|0;u=z;M=ef(F|0,M|0,-683901,-1)|0;M=lg(i|0,va|0,M|0,z|0)|0;ia=lg(M|0,z|0,ha|0,ia|0)|0;E=ig(ia|0,z|0,e|0,E|0)|0;e=z;ia=ef(o|0,m|0,666643,0)|0;ha=z;M=ef(o|0,m|0,470296,0)|0;M=lg(wa|0,_|0,M|0,z|0)|0;_=z;wa=ef(o|0,m|0,654183,0)|0;va=z;i=ef(o|0,m|0,-997805,-1)|0;F=z;da=ef(o|0,m|0,136657,0)|0;R=z;m=ef(o|0,m|0,-683901,-1)|0;o=z;ea=ef(W|0,ca|0,666643,0)|0;ea=lg(ga|0,S|0,ea|0,z|0)|0;S=z;ga=ef(W|0,ca|0,470296,0)|0;fa=z;Q=ef(W|0,ca|0,654183,0)|0;Q=lg(M|0,_|0,Q|0,z|0)|0;_=z;M=ef(W|0,ca|0,-997805,-1)|0;L=z;y=ef(W|0,ca|0,136657,0)|0;q=z;ca=ef(W|0,ca|0,-683901,-1)|0;W=z;$=lg(Y|0,X|0,aa|0,$|0)|0;Z=lg($|0,z|0,P|0,Z|0)|0;R=lg(Z|0,z|0,da|0,R|0)|0;W=lg(R|0,z|0,ca|0,W|0)|0;B=ig(W|0,z|0,g|0,B|0)|0;g=z;W=ef(G|0,c|0,666643,0)|0;ca=z;R=ef(G|0,c|0,470296,0)|0;R=lg(ea|0,S|0,R|0,z|0)|0;S=z;ea=ef(G|0,c|0,654183,0)|0;da=z;Z=ef(G|0,c|0,-997805,-1)|0;Z=lg(Q|0,_|0,Z|0,z|0)|0;_=z;Q=ef(G|0,c|0,136657,0)|0;P=z;c=ef(G|0,c|0,-683901,-1)|0;G=z;$=ef(A|0,k|0,666643,0)|0;aa=z;X=ef(A|0,k|0,470296,0)|0;Y=z;T=ef(A|0,k|0,654183,0)|0;U=z;N=ef(A|0,k|0,-997805,-1)|0;O=z;J=ef(A|0,k|0,136657,0)|0;K=z;k=ef(A|0,k|0,-683901,-1)|0;A=z;za=lg(Ca|0,Ba|0,Aa|0,za|0)|0;xa=ig(za|0,z|0,ya|0,xa|0)|0;va=lg(xa|0,z|0,wa|0,va|0)|0;L=lg(va|0,z|0,M|0,L|0)|0;P=lg(L|0,z|0,Q|0,P|0)|0;A=lg(P|0,z|0,k|0,A|0)|0;k=z;P=ef(f|0,h|0,666643,0)|0;V=lg(P|0,z|0,w|0,V|0)|0;w=z;P=ef(f|0,h|0,470296,0)|0;Q=z;L=ef(f|0,h|0,654183,0)|0;M=z;ra=lg(ua|0,ta|0,sa|0,ra|0)|0;pa=ig(ra|0,z|0,qa|0,pa|0)|0;ca=lg(pa|0,z|0,W|0,ca|0)|0;M=lg(ca|0,z|0,L|0,M|0)|0;Y=lg(M|0,z|0,X|0,Y|0)|0;X=z;M=ef(f|0,h|0,-997805,-1)|0;L=z;ca=ef(f|0,h|0,136657,0)|0;W=z;la=lg(oa|0,na|0,ma|0,la|0)|0;ja=ig(la|0,z|0,ka|0,ja|0)|0;ha=lg(ja|0,z|0,ia|0,ha|0)|0;fa=lg(ha|0,z|0,ga|0,fa|0)|0;da=lg(fa|0,z|0,ea|0,da|0)|0;W=lg(da|0,z|0,ca|0,W|0)|0;O=lg(W|0,z|0,N|0,O|0)|0;N=z;h=ef(f|0,h|0,-683901,-1)|0;f=z;W=lg(V|0,w|0,1048576,0)|0;W=$e(W|0,z|0,21)|0;ca=z;Q=lg(x|0,t|0,P|0,Q|0)|0;aa=lg(Q|0,z|0,$|0,aa|0)|0;aa=lg(aa|0,z|0,W|0,ca|0)|0;$=z;ca=zf(W|0,ca|0,21)|0;ca=ig(V|0,w|0,ca|0,z|0)|0;w=z;V=lg(Y|0,X|0,1048576,0)|0;V=$e(V|0,z|0,21)|0;W=z;L=lg(R|0,S|0,M|0,L|0)|0;U=lg(L|0,z|0,T|0,U|0)|0;U=lg(U|0,z|0,V|0,W|0)|0;T=z;W=zf(V|0,W|0,21)|0;V=z;L=lg(O|0,N|0,1048576,0)|0;L=$e(L|0,z|0,21)|0;M=z;f=lg(Z|0,_|0,h|0,f|0)|0;K=lg(f|0,z|0,J|0,K|0)|0;K=lg(K|0,z|0,L|0,M|0)|0;J=z;M=zf(L|0,M|0,21)|0;L=z;f=lg(A|0,k|0,1048576,0)|0;f=$e(f|0,z|0,21)|0;h=z;C=lg(ba|0,d|0,I|0,C|0)|0;F=lg(C|0,z|0,i|0,F|0)|0;j=ig(F|0,z|0,l|0,j|0)|0;q=lg(j|0,z|0,y|0,q|0)|0;G=lg(q|0,z|0,c|0,G|0)|0;G=lg(G|0,z|0,f|0,h|0)|0;c=z;h=zf(f|0,h|0,21)|0;h=ig(A|0,k|0,h|0,z|0)|0;k=z;A=lg(B|0,g|0,1048576,0)|0;A=$e(A|0,z|0,21)|0;f=z;u=lg(m|0,o|0,p|0,u|0)|0;s=lg(u|0,z|0,D|0,s|0)|0;H=ig(s|0,z|0,n|0,H|0)|0;H=lg(H|0,z|0,A|0,f|0)|0;n=z;f=zf(A|0,f|0,21)|0;f=ig(B|0,g|0,f|0,z|0)|0;g=z;B=lg(E|0,e|0,1048576,0)|0;B=$e(B|0,z|0,21)|0;A=z;r=lg(v|0,r|0,B|0,A|0)|0;v=z;A=zf(B|0,A|0,21)|0;B=z;s=lg(aa|0,$|0,1048576,0)|0;s=$e(s|0,z|0,21)|0;D=z;u=zf(s|0,D|0,21)|0;p=z;o=lg(U|0,T|0,1048576,0)|0;o=$e(o|0,z|0,21)|0;m=z;q=zf(o|0,m|0,21)|0;y=z;j=lg(K|0,J|0,1048576,0)|0;j=$e(j|0,z|0,21)|0;l=z;k=lg(h|0,k|0,j|0,l|0)|0;h=z;l=zf(j|0,l|0,21)|0;j=z;F=lg(G|0,c|0,1048576,0)|0;F=$e(F|0,z|0,21)|0;i=z;g=lg(f|0,g|0,F|0,i|0)|0;f=z;i=zf(F|0,i|0,21)|0;i=ig(G|0,c|0,i|0,z|0)|0;c=z;G=lg(H|0,n|0,1048576,0)|0;G=$e(G|0,z|0,21)|0;F=z;C=zf(G|0,F|0,21)|0;C=ig(H|0,n|0,C|0,z|0)|0;n=z;H=lg(r|0,v|0,1048576,0)|0;H=$e(H|0,z|0,21)|0;I=z;d=zf(H|0,I|0,21)|0;d=ig(r|0,v|0,d|0,z|0)|0;v=z;r=ef(H|0,I|0,666643,0)|0;r=lg(ca|0,w|0,r|0,z|0)|0;w=z;ca=ef(H|0,I|0,470296,0)|0;ba=z;_=ef(H|0,I|0,654183,0)|0;Z=z;S=ef(H|0,I|0,-997805,-1)|0;R=z;Q=ef(H|0,I|0,136657,0)|0;P=z;I=ef(H|0,I|0,-683901,-1)|0;H=z;t=$e(r|0,w|0,21)|0;x=z;$=lg(ca|0,ba|0,aa|0,$|0)|0;p=ig($|0,z|0,u|0,p|0)|0;p=lg(p|0,z|0,t|0,x|0)|0;u=z;x=zf(t|0,x|0,21)|0;x=ig(r|0,w|0,x|0,z|0)|0;w=z;r=$e(p|0,u|0,21)|0;t=z;X=lg(_|0,Z|0,Y|0,X|0)|0;V=ig(X|0,z|0,W|0,V|0)|0;D=lg(V|0,z|0,s|0,D|0)|0;D=lg(D|0,z|0,r|0,t|0)|0;s=z;t=zf(r|0,t|0,21)|0;t=ig(p|0,u|0,t|0,z|0)|0;u=z;p=$e(D|0,s|0,21)|0;r=z;R=lg(U|0,T|0,S|0,R|0)|0;y=ig(R|0,z|0,q|0,y|0)|0;y=lg(y|0,z|0,p|0,r|0)|0;q=z;r=zf(p|0,r|0,21)|0;r=ig(D|0,s|0,r|0,z|0)|0;s=z;D=$e(y|0,q|0,21)|0;p=z;N=lg(Q|0,P|0,O|0,N|0)|0;L=ig(N|0,z|0,M|0,L|0)|0;m=lg(L|0,z|0,o|0,m|0)|0;m=lg(m|0,z|0,D|0,p|0)|0;o=z;p=zf(D|0,p|0,21)|0;p=ig(y|0,q|0,p|0,z|0)|0;q=z;y=$e(m|0,o|0,21)|0;D=z;H=lg(K|0,J|0,I|0,H|0)|0;j=ig(H|0,z|0,l|0,j|0)|0;j=lg(j|0,z|0,y|0,D|0)|0;l=z;D=zf(y|0,D|0,21)|0;D=ig(m|0,o|0,D|0,z|0)|0;o=z;m=$e(j|0,l|0,21)|0;y=z;h=lg(k|0,h|0,m|0,y|0)|0;k=z;y=zf(m|0,y|0,21)|0;y=ig(j|0,l|0,y|0,z|0)|0;l=z;j=$e(h|0,k|0,21)|0;m=z;c=lg(j|0,m|0,i|0,c|0)|0;i=z;m=zf(j|0,m|0,21)|0;m=ig(h|0,k|0,m|0,z|0)|0;k=z;h=$e(c|0,i|0,21)|0;j=z;f=lg(g|0,f|0,h|0,j|0)|0;g=z;j=zf(h|0,j|0,21)|0;j=ig(c|0,i|0,j|0,z|0)|0;i=z;c=$e(f|0,g|0,21)|0;h=z;n=lg(c|0,h|0,C|0,n|0)|0;C=z;h=zf(c|0,h|0,21)|0;h=ig(f|0,g|0,h|0,z|0)|0;g=z;f=$e(n|0,C|0,21)|0;c=z;e=lg(G|0,F|0,E|0,e|0)|0;B=ig(e|0,z|0,A|0,B|0)|0;B=lg(B|0,z|0,f|0,c|0)|0;A=z;c=zf(f|0,c|0,21)|0;c=ig(n|0,C|0,c|0,z|0)|0;C=z;n=$e(B|0,A|0,21)|0;f=z;v=lg(n|0,f|0,d|0,v|0)|0;d=z;f=zf(n|0,f|0,21)|0;f=ig(B|0,A|0,f|0,z|0)|0;A=z;B=$e(v|0,d|0,21)|0;n=z;e=zf(B|0,n|0,21)|0;e=ig(v|0,d|0,e|0,z|0)|0;d=z;v=ef(B|0,n|0,666643,0)|0;w=lg(v|0,z|0,x|0,w|0)|0;x=z;v=ef(B|0,n|0,470296,0)|0;v=lg(t|0,u|0,v|0,z|0)|0;u=z;t=ef(B|0,n|0,654183,0)|0;t=lg(r|0,s|0,t|0,z|0)|0;s=z;r=ef(B|0,n|0,-997805,-1)|0;r=lg(p|0,q|0,r|0,z|0)|0;q=z;p=ef(B|0,n|0,136657,0)|0;p=lg(D|0,o|0,p|0,z|0)|0;o=z;n=ef(B|0,n|0,-683901,-1)|0;n=lg(y|0,l|0,n|0,z|0)|0;l=z;y=$e(w|0,x|0,21)|0;B=z;u=lg(v|0,u|0,y|0,B|0)|0;v=z;B=zf(y|0,B|0,21)|0;B=ig(w|0,x|0,B|0,z|0)|0;x=z;w=$e(u|0,v|0,21)|0;y=z;s=lg(t|0,s|0,w|0,y|0)|0;t=z;y=zf(w|0,y|0,21)|0;y=ig(u|0,v|0,y|0,z|0)|0;v=z;u=$e(s|0,t|0,21)|0;w=z;q=lg(r|0,q|0,u|0,w|0)|0;r=z;w=zf(u|0,w|0,21)|0;w=ig(s|0,t|0,w|0,z|0)|0;t=z;s=$e(q|0,r|0,21)|0;u=z;o=lg(p|0,o|0,s|0,u|0)|0;p=z;u=zf(s|0,u|0,21)|0;u=ig(q|0,r|0,u|0,z|0)|0;r=z;q=$e(o|0,p|0,21)|0;s=z;l=lg(n|0,l|0,q|0,s|0)|0;n=z;s=zf(q|0,s|0,21)|0;s=ig(o|0,p|0,s|0,z|0)|0;p=z;o=$e(l|0,n|0,21)|0;q=z;k=lg(o|0,q|0,m|0,k|0)|0;m=z;q=zf(o|0,q|0,21)|0;q=ig(l|0,n|0,q|0,z|0)|0;n=z;l=$e(k|0,m|0,21)|0;o=z;i=lg(l|0,o|0,j|0,i|0)|0;j=z;o=zf(l|0,o|0,21)|0;o=ig(k|0,m|0,o|0,z|0)|0;m=z;k=$e(i|0,j|0,21)|0;l=z;g=lg(k|0,l|0,h|0,g|0)|0;h=z;l=zf(k|0,l|0,21)|0;l=ig(i|0,j|0,l|0,z|0)|0;j=z;i=$e(g|0,h|0,21)|0;k=z;C=lg(i|0,k|0,c|0,C|0)|0;c=z;k=zf(i|0,k|0,21)|0;k=ig(g|0,h|0,k|0,z|0)|0;h=z;g=$e(C|0,c|0,21)|0;i=z;A=lg(g|0,i|0,f|0,A|0)|0;f=z;i=zf(g|0,i|0,21)|0;i=ig(C|0,c|0,i|0,z|0)|0;c=z;C=$e(A|0,f|0,21)|0;g=z;d=lg(C|0,g|0,e|0,d|0)|0;e=z;g=zf(C|0,g|0,21)|0;g=ig(A|0,f|0,g|0,z|0)|0;f=z;a[b>>0]=B;A=Cf(B|0,x|0,8)|0;a[b+1>>0]=A;x=Cf(B|0,x|0,16)|0;B=z;A=zf(y|0,v|0,5)|0;a[b+2>>0]=A|x;x=Cf(y|0,v|0,3)|0;a[b+3>>0]=x;x=Cf(y|0,v|0,11)|0;a[b+4>>0]=x;v=Cf(y|0,v|0,19)|0;y=z;x=zf(w|0,t|0,2)|0;a[b+5>>0]=x|v;v=Cf(w|0,t|0,6)|0;a[b+6>>0]=v;t=Cf(w|0,t|0,14)|0;w=z;v=zf(u|0,r|0,7)|0;a[b+7>>0]=v|t;t=Cf(u|0,r|0,1)|0;a[b+8>>0]=t;t=Cf(u|0,r|0,9)|0;a[b+9>>0]=t;r=Cf(u|0,r|0,17)|0;u=z;t=zf(s|0,p|0,4)|0;a[b+10>>0]=t|r;r=Cf(s|0,p|0,4)|0;a[b+11>>0]=r;r=Cf(s|0,p|0,12)|0;a[b+12>>0]=r;p=Cf(s|0,p|0,20)|0;s=z;r=zf(q|0,n|0,1)|0;a[b+13>>0]=r|p;p=Cf(q|0,n|0,7)|0;a[b+14>>0]=p;n=Cf(q|0,n|0,15)|0;q=z;p=zf(o|0,m|0,6)|0;a[b+15>>0]=p|n;n=Cf(o|0,m|0,2)|0;a[b+16>>0]=n;n=Cf(o|0,m|0,10)|0;a[b+17>>0]=n;m=Cf(o|0,m|0,18)|0;o=z;n=zf(l|0,j|0,3)|0;a[b+18>>0]=n|m;m=Cf(l|0,j|0,5)|0;a[b+19>>0]=m;j=Cf(l|0,j|0,13)|0;a[b+20>>0]=j;a[b+21>>0]=k;j=Cf(k|0,h|0,8)|0;a[b+22>>0]=j;h=Cf(k|0,h|0,16)|0;k=z;j=zf(i|0,c|0,5)|0;a[b+23>>0]=j|h;h=Cf(i|0,c|0,3)|0;a[b+24>>0]=h;h=Cf(i|0,c|0,11)|0;a[b+25>>0]=h;c=Cf(i|0,c|0,19)|0;i=z;h=zf(g|0,f|0,2)|0;a[b+26>>0]=h|c;c=Cf(g|0,f|0,6)|0;a[b+27>>0]=c;f=Cf(g|0,f|0,14)|0;g=z;c=zf(d|0,e|0,7)|0;a[b+28>>0]=f|c;c=Cf(d|0,e|0,1)|0;a[b+29>>0]=c;c=Cf(d|0,e|0,9)|0;a[b+30>>0]=c;e=Cf(d|0,e|0,17)|0;a[b+31>>0]=e;return}function ia(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;Le(d,b);b=e;f=a;g=b+64|0;do{c[b>>2]=c[f>>2];b=b+4|0;f=f+4|0}while((b|0)<(g|0));s=0;b=c[d>>2]|0;f=c[d+4>>2]|0;while(1){A=c[e+32>>2]|0;q=c[e+32+4>>2]|0;i=bf(A,q,14)|0;C=z;y=bf(A,q,18)|0;C=z^C;D=bf(A,q,41)|0;r=c[e+40>>2]|0;l=c[e+40+4>>2]|0;k=c[e+48>>2]|0;M=c[e+48+4>>2]|0;o=464+(s<<3)|0;m=c[o>>2]|0;o=c[o+4>>2]|0;w=c[e+56>>2]|0;u=c[e+56+4>>2]|0;C=lg(b|0,f|0,y^i^D|0,C^z|0)|0;o=lg(C|0,z|0,m|0,o|0)|0;o=lg(o|0,z|0,(k^r)&A^k|0,(M^l)&q^M|0)|0;u=lg(o|0,z|0,w|0,u|0)|0;w=z;o=lg(u|0,w|0,c[e+24>>2]|0,c[e+24+4>>2]|0)|0;m=z;c[e+24>>2]=o;c[e+24+4>>2]=m;C=c[e>>2]|0;D=c[e+4>>2]|0;i=bf(C,D,28)|0;y=z;j=bf(C,D,34)|0;y=z^y;v=bf(C,D,39)|0;B=c[e+8>>2]|0;H=c[e+8+4>>2]|0;E=c[e+16>>2]|0;I=c[e+16+4>>2]|0;y=lg(u|0,w|0,j^i^v|0,y^z|0)|0;y=lg(y|0,z|0,(E|B)&C|E&B|0,(I|H)&D|I&H|0)|0;v=z;c[e+56>>2]=y;c[e+56+4>>2]=v;i=bf(o,m,14)|0;j=z;w=bf(o,m,18)|0;j=z^j;u=bf(o,m,41)|0;h=s|1;x=c[464+(h<<3)>>2]|0;L=c[464+(h<<3)+4>>2]|0;j=lg(c[d+(h<<3)>>2]|0,c[d+(h<<3)+4>>2]|0,w^i^u|0,j^z|0)|0;L=lg(j|0,z|0,x|0,L|0)|0;L=lg(L|0,z|0,(r^A)&o^r|0,(l^q)&m^l|0)|0;M=lg(L|0,z|0,k|0,M|0)|0;k=z;I=lg(M|0,k|0,E|0,I|0)|0;E=z;c[e+16>>2]=I;c[e+16+4>>2]=E;L=bf(y,v,28)|0;x=z;j=bf(y,v,34)|0;x=z^x;u=bf(y,v,39)|0;x=lg(M|0,k|0,j^L^u|0,x^z|0)|0;x=lg(x|0,z|0,(B|C)&y|B&C|0,(H|D)&v|H&D|0)|0;u=z;c[e+48>>2]=x;c[e+48+4>>2]=u;L=bf(I,E,14)|0;j=z;k=bf(I,E,18)|0;j=z^j;M=bf(I,E,41)|0;i=s|2;w=c[464+(i<<3)>>2]|0;n=c[464+(i<<3)+4>>2]|0;j=lg(c[d+(i<<3)>>2]|0,c[d+(i<<3)+4>>2]|0,k^L^M|0,j^z|0)|0;n=lg(j|0,z|0,w|0,n|0)|0;q=lg(n|0,z|0,(A^o)&I^A|0,(q^m)&E^q|0)|0;l=lg(q|0,z|0,r|0,l|0)|0;r=z;H=lg(l|0,r|0,B|0,H|0)|0;B=z;c[e+8>>2]=H;c[e+8+4>>2]=B;q=bf(x,u,28)|0;A=z;n=bf(x,u,34)|0;A=z^A;w=bf(x,u,39)|0;A=lg(l|0,r|0,n^q^w|0,A^z|0)|0;A=lg(A|0,z|0,(C|y)&x|C&y|0,(D|v)&u|D&v|0)|0;w=z;c[e+40>>2]=A;c[e+40+4>>2]=w;q=bf(H,B,14)|0;n=z;r=bf(H,B,18)|0;n=z^n;l=bf(H,B,41)|0;j=s|3;M=c[464+(j<<3)>>2]|0;L=c[464+(j<<3)+4>>2]|0;k=c[e+32>>2]|0;p=c[e+32+4>>2]|0;n=lg(c[d+(j<<3)>>2]|0,c[d+(j<<3)+4>>2]|0,r^q^l|0,n^z|0)|0;L=lg(n|0,z|0,M|0,L|0)|0;m=lg(L|0,z|0,(o^I)&H^o|0,(m^E)&B^m|0)|0;p=lg(m|0,z|0,k|0,p|0)|0;k=z;D=lg(p|0,k|0,C|0,D|0)|0;C=z;c[e>>2]=D;c[e+4>>2]=C;m=bf(A,w,28)|0;o=z;L=bf(A,w,34)|0;o=z^o;M=bf(A,w,39)|0;o=lg(p|0,k|0,L^m^M|0,o^z|0)|0;v=lg(o|0,z|0,(y|x)&A|y&x|0,(v|u)&w|v&u|0)|0;y=z;c[e+32>>2]=v;c[e+32+4>>2]=y;o=bf(D,C,14)|0;M=z;m=bf(D,C,18)|0;M=z^M;L=bf(D,C,41)|0;k=s|4;p=c[464+(k<<3)>>2]|0;n=c[464+(k<<3)+4>>2]|0;l=c[e+24>>2]|0;q=c[e+24+4>>2]|0;M=lg(c[d+(k<<3)>>2]|0,c[d+(k<<3)+4>>2]|0,m^o^L|0,M^z|0)|0;n=lg(M|0,z|0,p|0,n|0)|0;E=lg(n|0,z|0,(I^H)&D^I|0,(E^B)&C^E|0)|0;q=lg(E|0,z|0,l|0,q|0)|0;l=z;E=lg(q|0,l|0,c[e+56>>2]|0,c[e+56+4>>2]|0)|0;I=z;c[e+56>>2]=E;c[e+56+4>>2]=I;n=bf(v,y,28)|0;p=z;M=bf(v,y,34)|0;p=z^p;L=bf(v,y,39)|0;p=lg(q|0,l|0,M^n^L|0,p^z|0)|0;u=lg(p|0,z|0,(x|A)&v|x&A|0,(u|w)&y|u&w|0)|0;x=z;c[e+24>>2]=u;c[e+24+4>>2]=x;p=bf(E,I,14)|0;L=z;n=bf(E,I,18)|0;L=z^L;M=bf(E,I,41)|0;l=s|5;q=c[464+(l<<3)>>2]|0;o=c[464+(l<<3)+4>>2]|0;m=c[e+16>>2]|0;r=c[e+16+4>>2]|0;L=lg(c[d+(l<<3)>>2]|0,c[d+(l<<3)+4>>2]|0,n^p^M|0,L^z|0)|0;o=lg(L|0,z|0,q|0,o|0)|0;B=lg(o|0,z|0,(H^D)&E^H|0,(B^C)&I^B|0)|0;r=lg(B|0,z|0,m|0,r|0)|0;m=z;B=lg(r|0,m|0,c[e+48>>2]|0,c[e+48+4>>2]|0)|0;H=z;c[e+48>>2]=B;c[e+48+4>>2]=H;o=bf(u,x,28)|0;q=z;L=bf(u,x,34)|0;q=z^q;M=bf(u,x,39)|0;q=lg(r|0,m|0,L^o^M|0,q^z|0)|0;w=lg(q|0,z|0,(A|v)&u|A&v|0,(w|y)&x|w&y|0)|0;A=z;c[e+16>>2]=w;c[e+16+4>>2]=A;q=bf(B,H,14)|0;M=z;o=bf(B,H,18)|0;M=z^M;L=bf(B,H,41)|0;m=s|6;r=c[464+(m<<3)>>2]|0;p=c[464+(m<<3)+4>>2]|0;n=c[e+8>>2]|0;b=c[e+8+4>>2]|0;M=lg(c[d+(m<<3)>>2]|0,c[d+(m<<3)+4>>2]|0,o^q^L|0,M^z|0)|0;p=lg(M|0,z|0,r|0,p|0)|0;C=lg(p|0,z|0,(D^E)&B^D|0,(C^I)&H^C|0)|0;b=lg(C|0,z|0,n|0,b|0)|0;n=z;C=lg(b|0,n|0,c[e+40>>2]|0,c[e+40+4>>2]|0)|0;D=z;c[e+40>>2]=C;c[e+40+4>>2]=D;p=bf(w,A,28)|0;r=z;M=bf(w,A,34)|0;r=z^r;L=bf(w,A,39)|0;r=lg(b|0,n|0,M^p^L|0,r^z|0)|0;y=lg(r|0,z|0,(v|u)&w|v&u|0,(y|x)&A|y&x|0)|0;v=z;c[e+8>>2]=y;c[e+8+4>>2]=v;r=bf(C,D,14)|0;L=z;p=bf(C,D,18)|0;L=z^L;M=bf(C,D,41)|0;n=s|7;b=c[464+(n<<3)>>2]|0;q=c[464+(n<<3)+4>>2]|0;o=c[e>>2]|0;f=c[e+4>>2]|0;L=lg(c[d+(n<<3)>>2]|0,c[d+(n<<3)+4>>2]|0,p^r^M|0,L^z|0)|0;q=lg(L|0,z|0,b|0,q|0)|0;I=lg(q|0,z|0,(E^B)&C^E|0,(I^H)&D^I|0)|0;f=lg(I|0,z|0,o|0,f|0)|0;o=z;I=lg(f|0,o|0,c[e+32>>2]|0,c[e+32+4>>2]|0)|0;E=z;c[e+32>>2]=I;c[e+32+4>>2]=E;q=bf(y,v,28)|0;b=z;L=bf(y,v,34)|0;b=z^b;M=bf(y,v,39)|0;b=lg(f|0,o|0,L^q^M|0,b^z|0)|0;x=lg(b|0,z|0,(u|w)&y|u&w|0,(x|A)&v|x&A|0)|0;u=z;c[e>>2]=x;c[e+4>>2]=u;b=bf(I,E,14)|0;M=z;q=bf(I,E,18)|0;M=z^M;L=bf(I,E,41)|0;o=s|8;f=c[464+(o<<3)>>2]|0;r=c[464+(o<<3)+4>>2]|0;p=c[e+56>>2]|0;g=c[e+56+4>>2]|0;M=lg(c[d+(o<<3)>>2]|0,c[d+(o<<3)+4>>2]|0,q^b^L|0,M^z|0)|0;r=lg(M|0,z|0,f|0,r|0)|0;H=lg(r|0,z|0,(B^C)&I^B|0,(H^D)&E^H|0)|0;g=lg(H|0,z|0,p|0,g|0)|0;p=z;H=lg(g|0,p|0,c[e+24>>2]|0,c[e+24+4>>2]|0)|0;B=z;c[e+24>>2]=H;c[e+24+4>>2]=B;r=bf(x,u,28)|0;f=z;M=bf(x,u,34)|0;f=z^f;L=bf(x,u,39)|0;f=lg(g|0,p|0,M^r^L|0,f^z|0)|0;A=lg(f|0,z|0,(w|y)&x|w&y|0,(A|v)&u|A&v|0)|0;w=z;c[e+56>>2]=A;c[e+56+4>>2]=w;f=bf(H,B,14)|0;L=z;r=bf(H,B,18)|0;L=z^L;M=bf(H,B,41)|0;p=s|9;g=c[464+(p<<3)>>2]|0;b=c[464+(p<<3)+4>>2]|0;q=c[e+48>>2]|0;t=c[e+48+4>>2]|0;L=lg(c[d+(p<<3)>>2]|0,c[d+(p<<3)+4>>2]|0,r^f^M|0,L^z|0)|0;b=lg(L|0,z|0,g|0,b|0)|0;D=lg(b|0,z|0,(C^I)&H^C|0,(D^E)&B^D|0)|0;t=lg(D|0,z|0,q|0,t|0)|0;q=z;D=lg(t|0,q|0,c[e+16>>2]|0,c[e+16+4>>2]|0)|0;C=z;c[e+16>>2]=D;c[e+16+4>>2]=C;b=bf(A,w,28)|0;g=z;L=bf(A,w,34)|0;g=z^g;M=bf(A,w,39)|0;g=lg(t|0,q|0,L^b^M|0,g^z|0)|0;v=lg(g|0,z|0,(y|x)&A|y&x|0,(v|u)&w|v&u|0)|0;y=z;c[e+48>>2]=v;c[e+48+4>>2]=y;g=bf(D,C,14)|0;M=z;b=bf(D,C,18)|0;M=z^M;L=bf(D,C,41)|0;q=s|10;t=c[464+(q<<3)>>2]|0;f=c[464+(q<<3)+4>>2]|0;r=c[e+40>>2]|0;F=c[e+40+4>>2]|0;M=lg(c[d+(q<<3)>>2]|0,c[d+(q<<3)+4>>2]|0,b^g^L|0,M^z|0)|0;f=lg(M|0,z|0,t|0,f|0)|0;E=lg(f|0,z|0,(I^H)&D^I|0,(E^B)&C^E|0)|0;F=lg(E|0,z|0,r|0,F|0)|0;r=z;E=lg(F|0,r|0,c[e+8>>2]|0,c[e+8+4>>2]|0)|0;I=z;c[e+8>>2]=E;c[e+8+4>>2]=I;f=bf(v,y,28)|0;t=z;M=bf(v,y,34)|0;t=z^t;L=bf(v,y,39)|0;t=lg(F|0,r|0,M^f^L|0,t^z|0)|0;u=lg(t|0,z|0,(x|A)&v|x&A|0,(u|w)&y|u&w|0)|0;x=z;c[e+40>>2]=u;c[e+40+4>>2]=x;t=bf(E,I,14)|0;L=z;f=bf(E,I,18)|0;L=z^L;M=bf(E,I,41)|0;r=s|11;F=c[464+(r<<3)>>2]|0;g=c[464+(r<<3)+4>>2]|0;b=c[e+32>>2]|0;O=c[e+32+4>>2]|0;L=lg(c[d+(r<<3)>>2]|0,c[d+(r<<3)+4>>2]|0,f^t^M|0,L^z|0)|0;g=lg(L|0,z|0,F|0,g|0)|0;B=lg(g|0,z|0,(H^D)&E^H|0,(B^C)&I^B|0)|0;O=lg(B|0,z|0,b|0,O|0)|0;b=z;B=lg(O|0,b|0,c[e>>2]|0,c[e+4>>2]|0)|0;H=z;c[e>>2]=B;c[e+4>>2]=H;g=bf(u,x,28)|0;F=z;L=bf(u,x,34)|0;F=z^F;M=bf(u,x,39)|0;F=lg(O|0,b|0,L^g^M|0,F^z|0)|0;w=lg(F|0,z|0,(A|v)&u|A&v|0,(w|y)&x|w&y|0)|0;A=z;c[e+32>>2]=w;c[e+32+4>>2]=A;F=bf(B,H,14)|0;M=z;g=bf(B,H,18)|0;M=z^M;L=bf(B,H,41)|0;b=s|12;O=c[464+(b<<3)>>2]|0;t=c[464+(b<<3)+4>>2]|0;f=c[e+24>>2]|0;J=c[e+24+4>>2]|0;M=lg(c[d+(b<<3)>>2]|0,c[d+(b<<3)+4>>2]|0,g^F^L|0,M^z|0)|0;t=lg(M|0,z|0,O|0,t|0)|0;C=lg(t|0,z|0,(D^E)&B^D|0,(C^I)&H^C|0)|0;J=lg(C|0,z|0,f|0,J|0)|0;f=z;C=lg(J|0,f|0,c[e+56>>2]|0,c[e+56+4>>2]|0)|0;D=z;c[e+56>>2]=C;c[e+56+4>>2]=D;t=bf(w,A,28)|0;O=z;M=bf(w,A,34)|0;O=z^O;L=bf(w,A,39)|0;O=lg(J|0,f|0,M^t^L|0,O^z|0)|0;y=lg(O|0,z|0,(v|u)&w|v&u|0,(y|x)&A|y&x|0)|0;v=z;c[e+24>>2]=y;c[e+24+4>>2]=v;O=bf(C,D,14)|0;L=z;t=bf(C,D,18)|0;L=z^L;M=bf(C,D,41)|0;f=s|13;J=c[464+(f<<3)>>2]|0;F=c[464+(f<<3)+4>>2]|0;g=c[e+16>>2]|0;N=c[e+16+4>>2]|0;L=lg(c[d+(f<<3)>>2]|0,c[d+(f<<3)+4>>2]|0,t^O^M|0,L^z|0)|0;F=lg(L|0,z|0,J|0,F|0)|0;I=lg(F|0,z|0,(E^B)&C^E|0,(I^H)&D^I|0)|0;N=lg(I|0,z|0,g|0,N|0)|0;g=z;I=lg(N|0,g|0,c[e+48>>2]|0,c[e+48+4>>2]|0)|0;E=z;c[e+48>>2]=I;c[e+48+4>>2]=E;F=bf(y,v,28)|0;J=z;L=bf(y,v,34)|0;J=z^J;M=bf(y,v,39)|0;J=lg(N|0,g|0,L^F^M|0,J^z|0)|0;x=lg(J|0,z|0,(u|w)&y|u&w|0,(x|A)&v|x&A|0)|0;u=z;c[e+16>>2]=x;c[e+16+4>>2]=u;J=bf(I,E,14)|0;M=z;F=bf(I,E,18)|0;M=z^M;L=bf(I,E,41)|0;g=s|14;N=c[464+(g<<3)>>2]|0;O=c[464+(g<<3)+4>>2]|0;t=c[e+8>>2]|0;K=c[e+8+4>>2]|0;M=lg(c[d+(g<<3)>>2]|0,c[d+(g<<3)+4>>2]|0,F^J^L|0,M^z|0)|0;O=lg(M|0,z|0,N|0,O|0)|0;H=lg(O|0,z|0,(B^C)&I^B|0,(H^D)&E^H|0)|0;K=lg(H|0,z|0,t|0,K|0)|0;t=z;H=lg(K|0,t|0,c[e+40>>2]|0,c[e+40+4>>2]|0)|0;B=z;c[e+40>>2]=H;c[e+40+4>>2]=B;O=bf(x,u,28)|0;N=z;M=bf(x,u,34)|0;N=z^N;L=bf(x,u,39)|0;N=lg(K|0,t|0,M^O^L|0,N^z|0)|0;A=lg(N|0,z|0,(w|y)&x|w&y|0,(A|v)&u|A&v|0)|0;w=z;c[e+8>>2]=A;c[e+8+4>>2]=w;N=bf(H,B,14)|0;L=z;O=bf(H,B,18)|0;L=z^L;M=bf(H,B,41)|0;t=s|15;K=c[464+(t<<3)>>2]|0;J=c[464+(t<<3)+4>>2]|0;F=c[e>>2]|0;G=c[e+4>>2]|0;L=lg(c[d+(t<<3)>>2]|0,c[d+(t<<3)+4>>2]|0,O^N^M|0,L^z|0)|0;J=lg(L|0,z|0,K|0,J|0)|0;D=lg(J|0,z|0,(C^I)&H^C|0,(D^E)&B^D|0)|0;G=lg(D|0,z|0,F|0,G|0)|0;F=z;D=lg(G|0,F|0,c[e+32>>2]|0,c[e+32+4>>2]|0)|0;c[e+32>>2]=D;c[e+32+4>>2]=z;D=bf(A,w,28)|0;B=z;E=bf(A,w,34)|0;B=z^B;C=bf(A,w,39)|0;B=lg(G|0,F|0,E^D^C|0,B^z|0)|0;u=lg(B|0,z|0,(y|x)&A|y&x|0,(v|u)&w|v&u|0)|0;c[e>>2]=u;c[e+4>>2]=z;if((s|0)==64){b=0;break}K=c[d+(g<<3)>>2]|0;I=c[d+(g<<3)+4>>2]|0;N=bf(K,I,19)|0;C=z;H=bf(K,I,61)|0;J=z;I=Cf(K|0,I|0,6)|0;J=lg(I^N^H|0,z^C^J|0,c[d+(p<<3)>>2]|0,c[d+(p<<3)+4>>2]|0)|0;C=z;H=c[d+(h<<3)>>2]|0;N=c[d+(h<<3)+4>>2]|0;I=bf(H,N,1)|0;K=z;G=bf(H,N,8)|0;L=z;E=Cf(H|0,N|0,7)|0;L=z^K^L;K=d+(s<<3)|0;K=lg(J|0,C|0,c[K>>2]|0,c[K+4>>2]|0)|0;L=lg(K|0,z|0,E^I^G|0,L|0)|0;G=z;s=s+16|0;I=d+(s<<3)|0;c[I>>2]=L;c[I+4>>2]=G;I=c[d+(t<<3)>>2]|0;E=c[d+(t<<3)+4>>2]|0;K=bf(I,E,19)|0;C=z;J=bf(I,E,61)|0;F=z;E=Cf(I|0,E|0,6)|0;F=lg(E^K^J|0,z^C^F|0,c[d+(h+9<<3)>>2]|0,c[d+(h+9<<3)+4>>2]|0)|0;C=z;J=c[d+(h+1<<3)>>2]|0;K=c[d+(h+1<<3)+4>>2]|0;E=bf(J,K,1)|0;I=z;O=bf(J,K,8)|0;M=z;D=Cf(J|0,K|0,7)|0;M=z^I^M;N=lg(F|0,C|0,H|0,N|0)|0;M=lg(N|0,z|0,D^E^O|0,M|0)|0;O=z;c[d+(h+16<<3)>>2]=M;c[d+(h+16<<3)+4>>2]=O;E=bf(L,G,19)|0;D=z;N=bf(L,G,61)|0;H=z;G=Cf(L|0,G|0,6)|0;H=lg(G^E^N|0,z^D^H|0,c[d+(r<<3)>>2]|0,c[d+(r<<3)+4>>2]|0)|0;D=z;N=c[d+(j<<3)>>2]|0;E=c[d+(j<<3)+4>>2]|0;G=bf(N,E,1)|0;L=z;C=bf(N,E,8)|0;F=z;I=Cf(N|0,E|0,7)|0;F=z^L^F;K=lg(H|0,D|0,J|0,K|0)|0;F=lg(K|0,z|0,I^G^C|0,F|0)|0;C=z;c[d+(i+16<<3)>>2]=F;c[d+(i+16<<3)+4>>2]=C;G=bf(M,O,19)|0;I=z;K=bf(M,O,61)|0;J=z;O=Cf(M|0,O|0,6)|0;J=lg(O^G^K|0,z^I^J|0,c[d+(j+9<<3)>>2]|0,c[d+(j+9<<3)+4>>2]|0)|0;I=z;K=c[d+(j+1<<3)>>2]|0;G=c[d+(j+1<<3)+4>>2]|0;O=bf(K,G,1)|0;M=z;D=bf(K,G,8)|0;H=z;L=Cf(K|0,G|0,7)|0;H=z^M^H;E=lg(J|0,I|0,N|0,E|0)|0;H=lg(E|0,z|0,L^O^D|0,H|0)|0;D=z;c[d+(j+16<<3)>>2]=H;c[d+(j+16<<3)+4>>2]=D;O=bf(F,C,19)|0;L=z;E=bf(F,C,61)|0;N=z;C=Cf(F|0,C|0,6)|0;N=lg(C^O^E|0,z^L^N|0,c[d+(f<<3)>>2]|0,c[d+(f<<3)+4>>2]|0)|0;L=z;E=c[d+(l<<3)>>2]|0;O=c[d+(l<<3)+4>>2]|0;C=bf(E,O,1)|0;F=z;I=bf(E,O,8)|0;J=z;M=Cf(E|0,O|0,7)|0;J=z^F^J;G=lg(N|0,L|0,K|0,G|0)|0;J=lg(G|0,z|0,M^C^I|0,J|0)|0;I=z;c[d+(k+16<<3)>>2]=J;c[d+(k+16<<3)+4>>2]=I;C=bf(H,D,19)|0;M=z;G=bf(H,D,61)|0;K=z;D=Cf(H|0,D|0,6)|0;K=lg(D^C^G|0,z^M^K|0,c[d+(l+9<<3)>>2]|0,c[d+(l+9<<3)+4>>2]|0)|0;M=z;G=c[d+(l+1<<3)>>2]|0;C=c[d+(l+1<<3)+4>>2]|0;D=bf(G,C,1)|0;H=z;L=bf(G,C,8)|0;N=z;F=Cf(G|0,C|0,7)|0;N=z^H^N;O=lg(K|0,M|0,E|0,O|0)|0;N=lg(O|0,z|0,F^D^L|0,N|0)|0;L=z;c[d+(l+16<<3)>>2]=N;c[d+(l+16<<3)+4>>2]=L;D=bf(J,I,19)|0;F=z;O=bf(J,I,61)|0;E=z;I=Cf(J|0,I|0,6)|0;E=lg(I^D^O|0,z^F^E|0,c[d+(t<<3)>>2]|0,c[d+(t<<3)+4>>2]|0)|0;F=z;O=c[d+(n<<3)>>2]|0;D=c[d+(n<<3)+4>>2]|0;I=bf(O,D,1)|0;J=z;M=bf(O,D,8)|0;K=z;H=Cf(O|0,D|0,7)|0;K=z^J^K;C=lg(E|0,F|0,G|0,C|0)|0;K=lg(C|0,z|0,H^I^M|0,K|0)|0;M=z;c[d+(m+16<<3)>>2]=K;c[d+(m+16<<3)+4>>2]=M;I=bf(N,L,19)|0;H=z;C=bf(N,L,61)|0;G=z;L=Cf(N|0,L|0,6)|0;G=lg(L^I^C|0,z^H^G|0,c[d+(n+9<<3)>>2]|0,c[d+(n+9<<3)+4>>2]|0)|0;H=z;C=c[d+(n+1<<3)>>2]|0;I=c[d+(n+1<<3)+4>>2]|0;L=bf(C,I,1)|0;N=z;F=bf(C,I,8)|0;E=z;J=Cf(C|0,I|0,7)|0;E=z^N^E;D=lg(G|0,H|0,O|0,D|0)|0;E=lg(D|0,z|0,J^L^F|0,E|0)|0;F=z;c[d+(n+16<<3)>>2]=E;c[d+(n+16<<3)+4>>2]=F;L=bf(K,M,19)|0;J=z;D=bf(K,M,61)|0;O=z;M=Cf(K|0,M|0,6)|0;O=lg(M^L^D|0,z^J^O|0,c[d+(o+9<<3)>>2]|0,c[d+(o+9<<3)+4>>2]|0)|0;J=z;D=c[d+(p<<3)>>2]|0;L=c[d+(p<<3)+4>>2]|0;M=bf(D,L,1)|0;K=z;H=bf(D,L,8)|0;G=z;N=Cf(D|0,L|0,7)|0;G=z^K^G;I=lg(O|0,J|0,C|0,I|0)|0;G=lg(I|0,z|0,N^M^H|0,G|0)|0;H=z;c[d+(o+16<<3)>>2]=G;c[d+(o+16<<3)+4>>2]=H;M=bf(E,F,19)|0;N=z;I=bf(E,F,61)|0;C=z;F=Cf(E|0,F|0,6)|0;C=lg(F^M^I|0,z^N^C|0,c[d+(p+9<<3)>>2]|0,c[d+(p+9<<3)+4>>2]|0)|0;N=z;I=c[d+(p+1<<3)>>2]|0;M=c[d+(p+1<<3)+4>>2]|0;F=bf(I,M,1)|0;E=z;J=bf(I,M,8)|0;O=z;K=Cf(I|0,M|0,7)|0;O=z^E^O;L=lg(C|0,N|0,D|0,L|0)|0;O=lg(L|0,z|0,K^F^J|0,O|0)|0;J=z;c[d+(p+16<<3)>>2]=O;c[d+(p+16<<3)+4>>2]=J;F=bf(G,H,19)|0;K=z;L=bf(G,H,61)|0;D=z;H=Cf(G|0,H|0,6)|0;D=lg(H^F^L|0,z^K^D|0,c[d+(q+9<<3)>>2]|0,c[d+(q+9<<3)+4>>2]|0)|0;K=z;L=c[d+(r<<3)>>2]|0;F=c[d+(r<<3)+4>>2]|0;H=bf(L,F,1)|0;G=z;N=bf(L,F,8)|0;C=z;E=Cf(L|0,F|0,7)|0;C=z^G^C;M=lg(D|0,K|0,I|0,M|0)|0;C=lg(M|0,z|0,E^H^N|0,C|0)|0;N=z;c[d+(q+16<<3)>>2]=C;c[d+(q+16<<3)+4>>2]=N;H=bf(O,J,19)|0;E=z;M=bf(O,J,61)|0;I=z;J=Cf(O|0,J|0,6)|0;I=lg(J^H^M|0,z^E^I|0,c[d+(r+9<<3)>>2]|0,c[d+(r+9<<3)+4>>2]|0)|0;E=z;M=c[d+(r+1<<3)>>2]|0;H=c[d+(r+1<<3)+4>>2]|0;J=bf(M,H,1)|0;O=z;K=bf(M,H,8)|0;D=z;G=Cf(M|0,H|0,7)|0;D=z^O^D;F=lg(I|0,E|0,L|0,F|0)|0;D=lg(F|0,z|0,G^J^K|0,D|0)|0;K=z;c[d+(r+16<<3)>>2]=D;c[d+(r+16<<3)+4>>2]=K;J=bf(C,N,19)|0;G=z;F=bf(C,N,61)|0;L=z;N=Cf(C|0,N|0,6)|0;L=lg(N^J^F|0,z^G^L|0,c[d+(b+9<<3)>>2]|0,c[d+(b+9<<3)+4>>2]|0)|0;G=z;F=c[d+(f<<3)>>2]|0;J=c[d+(f<<3)+4>>2]|0;N=bf(F,J,1)|0;C=z;E=bf(F,J,8)|0;I=z;O=Cf(F|0,J|0,7)|0;I=z^C^I;H=lg(L|0,G|0,M|0,H|0)|0;I=lg(H|0,z|0,O^N^E|0,I|0)|0;E=z;c[d+(b+16<<3)>>2]=I;c[d+(b+16<<3)+4>>2]=E;N=bf(D,K,19)|0;b=z;O=bf(D,K,61)|0;H=z;K=Cf(D|0,K|0,6)|0;H=lg(K^N^O|0,z^b^H|0,c[d+(f+9<<3)>>2]|0,c[d+(f+9<<3)+4>>2]|0)|0;b=z;O=c[d+(f+1<<3)>>2]|0;N=c[d+(f+1<<3)+4>>2]|0;K=bf(O,N,1)|0;D=z;M=bf(O,N,8)|0;G=z;L=Cf(O|0,N|0,7)|0;G=z^D^G;J=lg(H|0,b|0,F|0,J|0)|0;G=lg(J|0,z|0,L^K^M|0,G|0)|0;M=z;c[d+(f+16<<3)>>2]=G;c[d+(f+16<<3)+4>>2]=M;K=bf(I,E,19)|0;L=z;J=bf(I,E,61)|0;F=z;b=Cf(I|0,E|0,6)|0;F=lg(b^K^J|0,z^L^F|0,c[d+(g+9<<3)>>2]|0,c[d+(g+9<<3)+4>>2]|0)|0;L=z;J=c[d+(t<<3)>>2]|0;K=c[d+(t<<3)+4>>2]|0;b=bf(J,K,1)|0;E=z;I=bf(J,K,8)|0;f=z;H=Cf(J|0,K|0,7)|0;f=z^E^f;N=lg(F|0,L|0,O|0,N|0)|0;f=lg(N|0,z|0,H^b^I|0,f|0)|0;c[d+(g+16<<3)>>2]=f;c[d+(g+16<<3)+4>>2]=z;f=bf(G,M,19)|0;I=z;b=bf(G,M,61)|0;H=z;M=Cf(G|0,M|0,6)|0;H=lg(M^f^b|0,z^I^H|0,c[d+(t+9<<3)>>2]|0,c[d+(t+9<<3)+4>>2]|0)|0;I=z;b=c[d+(t+1<<3)>>2]|0;f=c[d+(t+1<<3)+4>>2]|0;M=bf(b,f,1)|0;G=z;N=bf(b,f,8)|0;O=z;L=Cf(b|0,f|0,7)|0;O=z^G^O;K=lg(H|0,I|0,J|0,K|0)|0;O=lg(K|0,z|0,L^M^N|0,O|0)|0;c[d+(t+16<<3)>>2]=O;c[d+(t+16<<3)+4>>2]=z;if((s|0)>=80){b=0;break}}do{N=e+(b<<3)|0;O=a+(b<<3)|0;N=lg(c[O>>2]|0,c[O+4>>2]|0,c[N>>2]|0,c[N+4>>2]|0)|0;c[O>>2]=N;c[O+4>>2]=z;b=b+1|0}while((b|0)!=8);return}function ja(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=l;p=l=l+63&-64;l=l+16|0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;m=c[8842]|0;if(m>>>(o>>>3)&3|0){a=35408+((m>>>(o>>>3)&1^1)+(o>>>3)<<1<<2)|0;b=c[a+8>>2]|0;d=c[b+8>>2]|0;if((a|0)==(d|0))c[8842]=m&~(1<<(m>>>(o>>>3)&1^1)+(o>>>3));else{c[d+12>>2]=a;c[a+8>>2]=d}w=(m>>>(o>>>3)&1^1)+(o>>>3)<<3;c[b+4>>2]=w|3;c[b+w+4>>2]=c[b+w+4>>2]|1;w=b+8|0;l=x;return w|0}n=c[8844]|0;if(o>>>0>n>>>0){if(m>>>(o>>>3)|0){a=m>>>(o>>>3)<<(o>>>3)&(2<<(o>>>3)|0-(2<<(o>>>3)));f=((a&0-a)+-1|0)>>>(((a&0-a)+-1|0)>>>12&16);e=f>>>(f>>>5&8)>>>(f>>>(f>>>5&8)>>>2&4);e=(f>>>5&8|((a&0-a)+-1|0)>>>12&16|f>>>(f>>>5&8)>>>2&4|e>>>1&2|e>>>(e>>>1&2)>>>1&1)+(e>>>(e>>>1&2)>>>(e>>>(e>>>1&2)>>>1&1))|0;f=c[35408+(e<<1<<2)+8>>2]|0;a=c[f+8>>2]|0;if((35408+(e<<1<<2)|0)==(a|0)){c[8842]=m&~(1<<e);a=m&~(1<<e)}else{c[a+12>>2]=35408+(e<<1<<2);c[35408+(e<<1<<2)+8>>2]=a;a=m}c[f+4>>2]=o|3;c[f+o+4>>2]=(e<<3)-o|1;c[f+o+((e<<3)-o)>>2]=(e<<3)-o;if(n|0){d=c[8847]|0;if(!(a&1<<(n>>>3))){c[8842]=a|1<<(n>>>3);a=35408+(n>>>3<<1<<2)|0;b=35408+(n>>>3<<1<<2)+8|0}else{a=c[35408+(n>>>3<<1<<2)+8>>2]|0;b=35408+(n>>>3<<1<<2)+8|0}c[b>>2]=d;c[a+12>>2]=d;c[d+8>>2]=a;c[d+12>>2]=35408+(n>>>3<<1<<2)}c[8844]=(e<<3)-o;c[8847]=f+o;w=f+8|0;l=x;return w|0}k=c[8843]|0;if(k){b=((k&0-k)+-1|0)>>>(((k&0-k)+-1|0)>>>12&16);a=b>>>(b>>>5&8)>>>(b>>>(b>>>5&8)>>>2&4);a=c[35672+((b>>>5&8|((k&0-k)+-1|0)>>>12&16|b>>>(b>>>5&8)>>>2&4|a>>>1&2|a>>>(a>>>1&2)>>>1&1)+(a>>>(a>>>1&2)>>>(a>>>(a>>>1&2)>>>1&1))<<2)>>2]|0;b=(c[a+4>>2]&-8)-o|0;d=c[a+16+(((c[a+16>>2]|0)==0&1)<<2)>>2]|0;if(!d){j=a;h=b}else{do{i=(c[d+4>>2]&-8)-o|0;j=i>>>0<b>>>0;b=j?i:b;a=j?d:a;d=c[d+16+(((c[d+16>>2]|0)==0&1)<<2)>>2]|0}while((d|0)!=0);j=a;h=b}i=j+o|0;if(j>>>0<i>>>0){f=c[j+24>>2]|0;a=c[j+12>>2]|0;do if((a|0)==(j|0)){b=j+20|0;a=c[b>>2]|0;if(!a){b=j+16|0;a=c[b>>2]|0;if(!a){b=0;break}}while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}c[b>>2]=0;b=a}else{b=c[j+8>>2]|0;c[b+12>>2]=a;c[a+8>>2]=b;b=a}while(0);do if(f|0){a=c[j+28>>2]|0;if((j|0)==(c[35672+(a<<2)>>2]|0)){c[35672+(a<<2)>>2]=b;if(!b){c[8843]=k&~(1<<a);break}}else{c[f+16+(((c[f+16>>2]|0)!=(j|0)&1)<<2)>>2]=b;if(!b)break}c[b+24>>2]=f;a=c[j+16>>2]|0;if(a|0){c[b+16>>2]=a;c[a+24>>2]=b}a=c[j+20>>2]|0;if(a|0){c[b+20>>2]=a;c[a+24>>2]=b}}while(0);if(h>>>0<16){w=h+o|0;c[j+4>>2]=w|3;w=j+w+4|0;c[w>>2]=c[w>>2]|1}else{c[j+4>>2]=o|3;c[i+4>>2]=h|1;c[i+h>>2]=h;if(n|0){d=c[8847]|0;if(!(m&1<<(n>>>3))){c[8842]=m|1<<(n>>>3);a=35408+(n>>>3<<1<<2)|0;b=35408+(n>>>3<<1<<2)+8|0}else{a=c[35408+(n>>>3<<1<<2)+8>>2]|0;b=35408+(n>>>3<<1<<2)+8|0}c[b>>2]=d;c[a+12>>2]=d;c[d+8>>2]=a;c[d+12>>2]=35408+(n>>>3<<1<<2)}c[8844]=h;c[8847]=i}w=j+8|0;l=x;return w|0}}}}else if(a>>>0<=4294967231){o=a+11&-8;j=c[8843]|0;if(j){if((a+11|0)>>>8)if(o>>>0>16777215)i=31;else{i=(a+11|0)>>>8<<((((a+11|0)>>>8)+1048320|0)>>>16&8);i=14-((i+520192|0)>>>16&4|(((a+11|0)>>>8)+1048320|0)>>>16&8|((i<<((i+520192|0)>>>16&4))+245760|0)>>>16&2)+(i<<((i+520192|0)>>>16&4)<<(((i<<((i+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;i=o>>>(i+7|0)&1|i<<1}else i=0;b=c[35672+(i<<2)>>2]|0;a:do if(!b){b=0;a=0;d=0-o|0;v=57}else{a=0;d=0-o|0;h=o<<((i|0)==31?0:25-(i>>>1)|0);f=0;while(1){e=(c[b+4>>2]&-8)-o|0;if(e>>>0<d>>>0)if(!e){a=b;d=0;e=b;v=61;break a}else{a=b;d=e}e=c[b+20>>2]|0;b=c[b+16+(h>>>31<<2)>>2]|0;f=(e|0)==0|(e|0)==(b|0)?f:e;e=(b|0)==0;if(e){b=f;v=57;break}else h=h<<((e^1)&1)}}while(0);if((v|0)==57){if((b|0)==0&(a|0)==0){a=2<<i;if(!(j&(a|0-a)))break;m=(j&(a|0-a)&0-(j&(a|0-a)))+-1|0;n=m>>>(m>>>12&16)>>>(m>>>(m>>>12&16)>>>5&8);b=n>>>(n>>>2&4)>>>(n>>>(n>>>2&4)>>>1&2);a=0;b=c[35672+((m>>>(m>>>12&16)>>>5&8|m>>>12&16|n>>>2&4|n>>>(n>>>2&4)>>>1&2|b>>>1&1)+(b>>>(b>>>1&1))<<2)>>2]|0}if(!b){i=a;h=d}else{e=b;v=61}}if((v|0)==61)while(1){v=0;b=(c[e+4>>2]&-8)-o|0;n=b>>>0<d>>>0;b=n?b:d;a=n?e:a;e=c[e+16+(((c[e+16>>2]|0)==0&1)<<2)>>2]|0;if(!e){i=a;h=b;break}else{d=b;v=61}}if((i|0)!=0?h>>>0<((c[8844]|0)-o|0)>>>0:0){g=i+o|0;if(i>>>0>=g>>>0){w=0;l=x;return w|0}f=c[i+24>>2]|0;a=c[i+12>>2]|0;do if((a|0)==(i|0)){b=i+20|0;a=c[b>>2]|0;if(!a){b=i+16|0;a=c[b>>2]|0;if(!a){a=0;break}}while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}c[b>>2]=0}else{w=c[i+8>>2]|0;c[w+12>>2]=a;c[a+8>>2]=w}while(0);do if(f){b=c[i+28>>2]|0;if((i|0)==(c[35672+(b<<2)>>2]|0)){c[35672+(b<<2)>>2]=a;if(!a){c[8843]=j&~(1<<b);e=j&~(1<<b);break}}else{c[f+16+(((c[f+16>>2]|0)!=(i|0)&1)<<2)>>2]=a;if(!a){e=j;break}}c[a+24>>2]=f;b=c[i+16>>2]|0;if(b|0){c[a+16>>2]=b;c[b+24>>2]=a}b=c[i+20>>2]|0;if(b){c[a+20>>2]=b;c[b+24>>2]=a;e=j}else e=j}else e=j;while(0);do if(h>>>0>=16){c[i+4>>2]=o|3;c[g+4>>2]=h|1;c[g+h>>2]=h;d=h>>>3;if(h>>>0<256){a=c[8842]|0;if(!(a&1<<d)){c[8842]=a|1<<d;a=35408+(d<<1<<2)|0;b=35408+(d<<1<<2)+8|0}else{a=c[35408+(d<<1<<2)+8>>2]|0;b=35408+(d<<1<<2)+8|0}c[b>>2]=g;c[a+12>>2]=g;c[g+8>>2]=a;c[g+12>>2]=35408+(d<<1<<2);break}a=h>>>8;if(a)if(h>>>0>16777215)a=31;else{w=a<<((a+1048320|0)>>>16&8)<<(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4);a=14-(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4|(a+1048320|0)>>>16&8|(w+245760|0)>>>16&2)+(w<<((w+245760|0)>>>16&2)>>>15)|0;a=h>>>(a+7|0)&1|a<<1}else a=0;d=35672+(a<<2)|0;c[g+28>>2]=a;c[g+16+4>>2]=0;c[g+16>>2]=0;b=1<<a;if(!(e&b)){c[8843]=e|b;c[d>>2]=g;c[g+24>>2]=d;c[g+12>>2]=g;c[g+8>>2]=g;break}b=h<<((a|0)==31?0:25-(a>>>1)|0);d=c[d>>2]|0;while(1){if((c[d+4>>2]&-8|0)==(h|0)){v=97;break}e=d+16+(b>>>31<<2)|0;a=c[e>>2]|0;if(!a){v=96;break}else{b=b<<1;d=a}}if((v|0)==96){c[e>>2]=g;c[g+24>>2]=d;c[g+12>>2]=g;c[g+8>>2]=g;break}else if((v|0)==97){v=d+8|0;w=c[v>>2]|0;c[w+12>>2]=g;c[v>>2]=g;c[g+8>>2]=w;c[g+12>>2]=d;c[g+24>>2]=0;break}}else{w=h+o|0;c[i+4>>2]=w|3;w=i+w+4|0;c[w>>2]=c[w>>2]|1}while(0);w=i+8|0;l=x;return w|0}}}else o=-1;while(0);d=c[8844]|0;if(d>>>0>=o>>>0){a=d-o|0;b=c[8847]|0;if(a>>>0>15){w=b+o|0;c[8847]=w;c[8844]=a;c[w+4>>2]=a|1;c[w+a>>2]=a;c[b+4>>2]=o|3}else{c[8844]=0;c[8847]=0;c[b+4>>2]=d|3;c[b+d+4>>2]=c[b+d+4>>2]|1}w=b+8|0;l=x;return w|0}f=c[8845]|0;if(f>>>0>o>>>0){u=f-o|0;c[8845]=u;w=c[8848]|0;v=w+o|0;c[8848]=v;c[v+4>>2]=u|1;c[w+4>>2]=o|3;w=w+8|0;l=x;return w|0}if(!(c[8960]|0)){c[8962]=4096;c[8961]=4096;c[8963]=-1;c[8964]=-1;c[8965]=0;c[8953]=0;c[p>>2]=p&-16^1431655768;c[8960]=p&-16^1431655768;a=4096}else a=c[8962]|0;h=o+48|0;i=o+47|0;k=a+i|0;j=0-a|0;if((k&j)>>>0<=o>>>0){w=0;l=x;return w|0}a=c[8952]|0;if(a|0?(p=c[8950]|0,(p+(k&j)|0)>>>0<=p>>>0?1:(p+(k&j)|0)>>>0>a>>>0):0){w=0;l=x;return w|0}b:do if(!(c[8953]&4)){d=c[8848]|0;c:do if(d){b=35816;while(1){a=c[b>>2]|0;if(a>>>0<=d>>>0?(q=b+4|0,(a+(c[q>>2]|0)|0)>>>0>d>>>0):0)break;a=c[b+8>>2]|0;if(!a){v=118;break c}else b=a}if((k-f&j)>>>0<2147483647){a=qd(k-f&j|0)|0;if((a|0)==((c[b>>2]|0)+(c[q>>2]|0)|0))if((a|0)==(-1|0))a=k-f&j;else{h=k-f&j;g=a;v=135;break b}else{e=a;d=k-f&j;v=126}}else a=0}else v=118;while(0);do if((v|0)==118){b=qd(0)|0;if((b|0)!=(-1|0)?(s=c[8961]|0,s=((s+-1&b|0)==0?0:(s+-1+b&0-s)-b|0)+(k&j)|0,r=c[8950]|0,s>>>0>o>>>0&s>>>0<2147483647):0){q=c[8952]|0;if(q|0?(s+r|0)>>>0<=r>>>0|(s+r|0)>>>0>q>>>0:0){a=0;break}a=qd(s|0)|0;if((a|0)==(b|0)){h=s;g=b;v=135;break b}else{e=a;d=s;v=126}}else a=0}while(0);do if((v|0)==126){b=0-d|0;if(!(h>>>0>d>>>0&(d>>>0<2147483647&(e|0)!=(-1|0))))if((e|0)==(-1|0)){a=0;break}else{h=d;g=e;v=135;break b}a=c[8962]|0;a=i-d+a&0-a;if(a>>>0>=2147483647){h=d;g=e;v=135;break b}if((qd(a|0)|0)==(-1|0)){qd(b|0)|0;a=0;break}else{h=a+d|0;g=e;v=135;break b}}while(0);c[8953]=c[8953]|4;v=133}else{a=0;v=133}while(0);if(((v|0)==133?(k&j)>>>0<2147483647:0)?(g=qd(k&j|0)|0,t=qd(0)|0,u=(t-g|0)>>>0>(o+40|0)>>>0,!((g|0)==(-1|0)|u^1|g>>>0<t>>>0&((g|0)!=(-1|0)&(t|0)!=(-1|0))^1)):0){h=u?t-g|0:a;v=135}if((v|0)==135){a=(c[8950]|0)+h|0;c[8950]=a;if(a>>>0>(c[8951]|0)>>>0)c[8951]=a;j=c[8848]|0;do if(j){a=35816;while(1){b=c[a>>2]|0;d=a+4|0;e=c[d>>2]|0;if((g|0)==(b+e|0)){v=145;break}f=c[a+8>>2]|0;if(!f)break;else a=f}if(((v|0)==145?(c[a+12>>2]&8|0)==0:0)?j>>>0<g>>>0&j>>>0>=b>>>0:0){c[d>>2]=e+h;v=(j+8&7|0)==0?0:0-(j+8)&7;w=(c[8845]|0)+(h-v)|0;c[8848]=j+v;c[8845]=w;c[j+v+4>>2]=w|1;c[j+v+w+4>>2]=40;c[8849]=c[8964];break}if(g>>>0<(c[8846]|0)>>>0)c[8846]=g;d=g+h|0;a=35816;while(1){if((c[a>>2]|0)==(d|0)){v=153;break}b=c[a+8>>2]|0;if(!b)break;else a=b}if((v|0)==153?(c[a+12>>2]&8|0)==0:0){c[a>>2]=g;m=a+4|0;c[m>>2]=(c[m>>2]|0)+h;m=g+8|0;m=g+((m&7|0)==0?0:0-m&7)|0;a=d+((d+8&7|0)==0?0:0-(d+8)&7)|0;k=m+o|0;i=a-m-o|0;c[m+4>>2]=o|3;do if((a|0)!=(j|0)){if((a|0)==(c[8847]|0)){w=(c[8844]|0)+i|0;c[8844]=w;c[8847]=k;c[k+4>>2]=w|1;c[k+w>>2]=w;break}h=c[a+4>>2]|0;if((h&3|0)==1){d:do if(h>>>0<256){b=c[a+8>>2]|0;d=c[a+12>>2]|0;if((d|0)==(b|0)){c[8842]=c[8842]&~(1<<(h>>>3));break}else{c[b+12>>2]=d;c[d+8>>2]=b;break}}else{g=c[a+24>>2]|0;b=c[a+12>>2]|0;do if((b|0)==(a|0)){b=c[a+16+4>>2]|0;if(!b){b=c[a+16>>2]|0;if(!b){b=0;break}else f=a+16|0}else f=a+16+4|0;while(1){d=b+20|0;e=c[d>>2]|0;if(e|0){b=e;f=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;f=d}}c[f>>2]=0}else{w=c[a+8>>2]|0;c[w+12>>2]=b;c[b+8>>2]=w}while(0);if(!g)break;d=c[a+28>>2]|0;do if((a|0)!=(c[35672+(d<<2)>>2]|0)){c[g+16+(((c[g+16>>2]|0)!=(a|0)&1)<<2)>>2]=b;if(!b)break d}else{c[35672+(d<<2)>>2]=b;if(b|0)break;c[8843]=c[8843]&~(1<<d);break d}while(0);c[b+24>>2]=g;d=c[a+16>>2]|0;if(d|0){c[b+16>>2]=d;c[d+24>>2]=b}d=c[a+16+4>>2]|0;if(!d)break;c[b+20>>2]=d;c[d+24>>2]=b}while(0);a=a+(h&-8)|0;f=(h&-8)+i|0}else f=i;d=a+4|0;c[d>>2]=c[d>>2]&-2;c[k+4>>2]=f|1;c[k+f>>2]=f;d=f>>>3;if(f>>>0<256){a=c[8842]|0;if(!(a&1<<d)){c[8842]=a|1<<d;a=35408+(d<<1<<2)|0;b=35408+(d<<1<<2)+8|0}else{a=c[35408+(d<<1<<2)+8>>2]|0;b=35408+(d<<1<<2)+8|0}c[b>>2]=k;c[a+12>>2]=k;c[k+8>>2]=a;c[k+12>>2]=35408+(d<<1<<2);break}a=f>>>8;do if(!a)a=0;else{if(f>>>0>16777215){a=31;break}w=a<<((a+1048320|0)>>>16&8)<<(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4);a=14-(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4|(a+1048320|0)>>>16&8|(w+245760|0)>>>16&2)+(w<<((w+245760|0)>>>16&2)>>>15)|0;a=f>>>(a+7|0)&1|a<<1}while(0);e=35672+(a<<2)|0;c[k+28>>2]=a;c[k+16+4>>2]=0;c[k+16>>2]=0;b=c[8843]|0;d=1<<a;if(!(b&d)){c[8843]=b|d;c[e>>2]=k;c[k+24>>2]=e;c[k+12>>2]=k;c[k+8>>2]=k;break}b=f<<((a|0)==31?0:25-(a>>>1)|0);d=c[e>>2]|0;while(1){if((c[d+4>>2]&-8|0)==(f|0)){v=194;break}e=d+16+(b>>>31<<2)|0;a=c[e>>2]|0;if(!a){v=193;break}else{b=b<<1;d=a}}if((v|0)==193){c[e>>2]=k;c[k+24>>2]=d;c[k+12>>2]=k;c[k+8>>2]=k;break}else if((v|0)==194){v=d+8|0;w=c[v>>2]|0;c[w+12>>2]=k;c[v>>2]=k;c[k+8>>2]=w;c[k+12>>2]=d;c[k+24>>2]=0;break}}else{w=(c[8845]|0)+i|0;c[8845]=w;c[8848]=k;c[k+4>>2]=w|1}while(0);w=m+8|0;l=x;return w|0}a=35816;while(1){b=c[a>>2]|0;if(b>>>0<=j>>>0?(w=b+(c[a+4>>2]|0)|0,w>>>0>j>>>0):0)break;a=c[a+8>>2]|0}f=w+-47+((w+-47+8&7|0)==0?0:0-(w+-47+8)&7)|0;f=f>>>0<(j+16|0)>>>0?j:f;a=g+8|0;a=(a&7|0)==0?0:0-a&7;v=g+a|0;a=h+-40-a|0;c[8848]=v;c[8845]=a;c[v+4>>2]=a|1;c[v+a+4>>2]=40;c[8849]=c[8964];c[f+4>>2]=27;c[f+8>>2]=c[8954];c[f+8+4>>2]=c[8955];c[f+8+8>>2]=c[8956];c[f+8+12>>2]=c[8957];c[8954]=g;c[8955]=h;c[8957]=0;c[8956]=f+8;a=f+24|0;do{v=a;a=a+4|0;c[a>>2]=7}while((v+8|0)>>>0<w>>>0);if((f|0)!=(j|0)){c[f+4>>2]=c[f+4>>2]&-2;c[j+4>>2]=f-j|1;c[f>>2]=f-j;if((f-j|0)>>>0<256){d=35408+((f-j|0)>>>3<<1<<2)|0;a=c[8842]|0;if(!(a&1<<((f-j|0)>>>3))){c[8842]=a|1<<((f-j|0)>>>3);a=d;b=d+8|0}else{a=c[d+8>>2]|0;b=d+8|0}c[b>>2]=j;c[a+12>>2]=j;c[j+8>>2]=a;c[j+12>>2]=d;break}if((f-j|0)>>>8)if((f-j|0)>>>0>16777215)a=31;else{a=(f-j|0)>>>8<<((((f-j|0)>>>8)+1048320|0)>>>16&8);a=14-((a+520192|0)>>>16&4|(((f-j|0)>>>8)+1048320|0)>>>16&8|((a<<((a+520192|0)>>>16&4))+245760|0)>>>16&2)+(a<<((a+520192|0)>>>16&4)<<(((a<<((a+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;a=(f-j|0)>>>(a+7|0)&1|a<<1}else a=0;e=35672+(a<<2)|0;c[j+28>>2]=a;c[j+20>>2]=0;c[j+16>>2]=0;b=c[8843]|0;d=1<<a;if(!(b&d)){c[8843]=b|d;c[e>>2]=j;c[j+24>>2]=e;c[j+12>>2]=j;c[j+8>>2]=j;break}b=f-j<<((a|0)==31?0:25-(a>>>1)|0);d=c[e>>2]|0;while(1){if((c[d+4>>2]&-8|0)==(f-j|0)){v=216;break}e=d+16+(b>>>31<<2)|0;a=c[e>>2]|0;if(!a){v=215;break}else{b=b<<1;d=a}}if((v|0)==215){c[e>>2]=j;c[j+24>>2]=d;c[j+12>>2]=j;c[j+8>>2]=j;break}else if((v|0)==216){v=d+8|0;w=c[v>>2]|0;c[w+12>>2]=j;c[v>>2]=j;c[j+8>>2]=w;c[j+12>>2]=d;c[j+24>>2]=0;break}}}else{w=c[8846]|0;if((w|0)==0|g>>>0<w>>>0)c[8846]=g;c[8954]=g;c[8955]=h;c[8957]=0;c[8851]=c[8960];c[8850]=-1;a=0;do{w=35408+(a<<1<<2)|0;c[w+12>>2]=w;c[w+8>>2]=w;a=a+1|0}while((a|0)!=32);w=g+8|0;w=(w&7|0)==0?0:0-w&7;v=g+w|0;w=h+-40-w|0;c[8848]=v;c[8845]=w;c[v+4>>2]=w|1;c[v+w+4>>2]=40;c[8849]=c[8964]}while(0);a=c[8845]|0;if(a>>>0>o>>>0){u=a-o|0;c[8845]=u;w=c[8848]|0;v=w+o|0;c[8848]=v;c[v+4>>2]=u|1;c[w+4>>2]=o|3;w=w+8|0;l=x;return w|0}}c[8326]=12;w=0;l=x;return w|0}function ka(b){b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0;R=hf(a[b>>0]|0,a[b+1>>0]|0,a[b+2>>0]|0)|0;d=Yd(b+2|0)|0;d=Cf(d|0,z|0,5)|0;S=hf(a[b+5>>0]|0,a[b+6>>0]|0,a[b+7>>0]|0)|0;S=Cf(S|0,z|0,2)|0;V=Yd(b+7|0)|0;V=Cf(V|0,z|0,7)|0;w=Yd(b+10|0)|0;w=Cf(w|0,z|0,4)|0;X=hf(a[b+13>>0]|0,a[b+14>>0]|0,a[b+15>>0]|0)|0;X=Cf(X|0,z|0,1)|0;Q=Yd(b+15|0)|0;Q=Cf(Q|0,z|0,6)|0;fa=hf(a[b+18>>0]|0,a[b+19>>0]|0,a[b+20>>0]|0)|0;fa=Cf(fa|0,z|0,3)|0;ma=hf(a[b+21>>0]|0,a[b+22>>0]|0,a[b+23>>0]|0)|0;ca=Yd(b+23|0)|0;ca=Cf(ca|0,z|0,5)|0;la=hf(a[b+26>>0]|0,a[b+27>>0]|0,a[b+28>>0]|0)|0;la=Cf(la|0,z|0,2)|0;t=Yd(b+28|0)|0;t=Cf(t|0,z|0,7)|0;qa=Yd(b+31|0)|0;qa=Cf(qa|0,z|0,4)|0;u=hf(a[b+34>>0]|0,a[b+35>>0]|0,a[b+36>>0]|0)|0;u=Cf(u|0,z|0,1)|0;A=Yd(b+36|0)|0;A=Cf(A|0,z|0,6)|0;o=hf(a[b+39>>0]|0,a[b+40>>0]|0,a[b+41>>0]|0)|0;o=Cf(o|0,z|0,3)|0;Z=hf(a[b+42>>0]|0,a[b+43>>0]|0,a[b+44>>0]|0)|0;O=Yd(b+44|0)|0;O=Cf(O|0,z|0,5)|0;$=hf(a[b+47>>0]|0,a[b+48>>0]|0,a[b+49>>0]|0)|0;$=Cf($|0,z|0,2)|0;ra=Yd(b+49|0)|0;ra=Cf(ra|0,z|0,7)|0;v=Yd(b+52|0)|0;v=Cf(v|0,z|0,4)|0;s=hf(a[b+55>>0]|0,a[b+56>>0]|0,a[b+57>>0]|0)|0;s=Cf(s|0,z|0,1)|0;g=Yd(b+57|0)|0;g=Cf(g|0,z|0,6)|0;H=Yd(b+60|0)|0;H=Cf(H|0,z|0,3)|0;c=z;h=ef(H|0,c|0,666643,0)|0;e=z;ha=ef(H|0,c|0,470296,0)|0;k=z;P=ef(H|0,c|0,654183,0)|0;l=z;F=ef(H|0,c|0,-997805,-1)|0;K=z;j=ef(H|0,c|0,136657,0)|0;o=lg(j|0,z|0,o&2097151|0,0)|0;j=z;c=ef(H|0,c|0,-683901,-1)|0;Z=lg(c|0,z|0,Z&2097151|0,0)|0;c=z;H=ef(g&2097151|0,0,666643,0)|0;C=z;r=ef(g&2097151|0,0,470296,0)|0;D=z;f=ef(g&2097151|0,0,654183,0)|0;n=z;B=ef(g&2097151|0,0,-997805,-1)|0;I=z;Y=ef(g&2097151|0,0,136657,0)|0;G=z;g=ef(g&2097151|0,0,-683901,-1)|0;g=lg(o|0,j|0,g|0,z|0)|0;j=z;o=ef(s&2097151|0,0,666643,0)|0;m=z;J=ef(s&2097151|0,0,470296,0)|0;x=z;y=ef(s&2097151|0,0,654183,0)|0;U=z;na=ef(s&2097151|0,0,-997805,-1)|0;ga=z;p=ef(s&2097151|0,0,136657,0)|0;_=z;s=ef(s&2097151|0,0,-683901,-1)|0;A=lg(s|0,z|0,A&2097151|0,0)|0;K=lg(A|0,z|0,F|0,K|0)|0;G=lg(K|0,z|0,Y|0,G|0)|0;Y=z;K=ef(v&2097151|0,0,666643,0)|0;F=z;A=ef(v&2097151|0,0,470296,0)|0;s=z;ia=ef(v&2097151|0,0,654183,0)|0;i=z;N=ef(v&2097151|0,0,-997805,-1)|0;q=z;pa=ef(v&2097151|0,0,136657,0)|0;oa=z;v=ef(v&2097151|0,0,-683901,-1)|0;W=z;E=ef(ra&2097151|0,0,666643,0)|0;T=z;da=ef(ra&2097151|0,0,470296,0)|0;ea=z;ba=ef(ra&2097151|0,0,654183,0)|0;aa=z;ka=ef(ra&2097151|0,0,-997805,-1)|0;ja=z;L=ef(ra&2097151|0,0,136657,0)|0;M=z;ra=ef(ra&2097151|0,0,-683901,-1)|0;qa=lg(ra|0,z|0,qa&2097151|0,0)|0;oa=lg(qa|0,z|0,pa|0,oa|0)|0;ga=lg(oa|0,z|0,na|0,ga|0)|0;k=lg(ga|0,z|0,ha|0,k|0)|0;n=lg(k|0,z|0,f|0,n|0)|0;f=z;k=ef($&2097151|0,0,666643,0)|0;Q=lg(k|0,z|0,Q&2097151|0,0)|0;k=z;ha=ef($&2097151|0,0,470296,0)|0;ga=z;na=ef($&2097151|0,0,654183,0)|0;ma=lg(na|0,z|0,ma&2097151|0,0)|0;ea=lg(ma|0,z|0,da|0,ea|0)|0;F=lg(ea|0,z|0,K|0,F|0)|0;K=z;ea=ef($&2097151|0,0,-997805,-1)|0;da=z;ma=ef($&2097151|0,0,136657,0)|0;la=lg(ma|0,z|0,la&2097151|0,0)|0;ja=lg(la|0,z|0,ka|0,ja|0)|0;i=lg(ja|0,z|0,ia|0,i|0)|0;x=lg(i|0,z|0,J|0,x|0)|0;C=lg(x|0,z|0,H|0,C|0)|0;H=z;$=ef($&2097151|0,0,-683901,-1)|0;x=z;J=lg(Q|0,k|0,1048576,0)|0;J=Cf(J|0,z|0,21)|0;i=z;fa=lg(ha|0,ga|0,fa&2097151|0,0)|0;T=lg(fa|0,z|0,E|0,T|0)|0;T=lg(T|0,z|0,J|0,i|0)|0;E=z;i=zf(J|0,i|0,21)|0;i=ig(Q|0,k|0,i|0,z|0)|0;k=z;Q=lg(F|0,K|0,1048576,0)|0;Q=Cf(Q|0,z|0,21)|0;J=z;ca=lg(ea|0,da|0,ca&2097151|0,0)|0;aa=lg(ca|0,z|0,ba|0,aa|0)|0;s=lg(aa|0,z|0,A|0,s|0)|0;m=lg(s|0,z|0,o|0,m|0)|0;m=lg(m|0,z|0,Q|0,J|0)|0;o=z;J=zf(Q|0,J|0,21)|0;Q=z;s=lg(C|0,H|0,1048576,0)|0;s=$e(s|0,z|0,21)|0;A=z;t=lg($|0,x|0,t&2097151|0,0)|0;M=lg(t|0,z|0,L|0,M|0)|0;q=lg(M|0,z|0,N|0,q|0)|0;U=lg(q|0,z|0,y|0,U|0)|0;e=lg(U|0,z|0,h|0,e|0)|0;D=lg(e|0,z|0,r|0,D|0)|0;D=lg(D|0,z|0,s|0,A|0)|0;r=z;A=zf(s|0,A|0,21)|0;s=z;e=lg(n|0,f|0,1048576,0)|0;e=$e(e|0,z|0,21)|0;h=z;u=lg(v|0,W|0,u&2097151|0,0)|0;_=lg(u|0,z|0,p|0,_|0)|0;l=lg(_|0,z|0,P|0,l|0)|0;I=lg(l|0,z|0,B|0,I|0)|0;I=lg(I|0,z|0,e|0,h|0)|0;B=z;h=zf(e|0,h|0,21)|0;h=ig(n|0,f|0,h|0,z|0)|0;f=z;n=lg(G|0,Y|0,1048576,0)|0;n=$e(n|0,z|0,21)|0;e=z;j=lg(g|0,j|0,n|0,e|0)|0;g=z;e=zf(n|0,e|0,21)|0;e=ig(G|0,Y|0,e|0,z|0)|0;Y=z;G=lg(Z|0,c|0,1048576,0)|0;G=$e(G|0,z|0,21)|0;n=z;O=lg(G|0,n|0,O&2097151|0,0)|0;l=z;n=zf(G|0,n|0,21)|0;n=ig(Z|0,c|0,n|0,z|0)|0;c=z;Z=lg(T|0,E|0,1048576,0)|0;Z=Cf(Z|0,z|0,21)|0;G=z;P=zf(Z|0,G|0,21)|0;P=ig(T|0,E|0,P|0,z|0)|0;E=z;T=lg(m|0,o|0,1048576,0)|0;T=$e(T|0,z|0,21)|0;_=z;p=zf(T|0,_|0,21)|0;u=z;W=lg(D|0,r|0,1048576,0)|0;W=$e(W|0,z|0,21)|0;v=z;f=lg(W|0,v|0,h|0,f|0)|0;h=z;v=zf(W|0,v|0,21)|0;v=ig(D|0,r|0,v|0,z|0)|0;r=z;D=lg(I|0,B|0,1048576,0)|0;D=$e(D|0,z|0,21)|0;W=z;Y=lg(D|0,W|0,e|0,Y|0)|0;e=z;W=zf(D|0,W|0,21)|0;W=ig(I|0,B|0,W|0,z|0)|0;B=z;I=lg(j|0,g|0,1048576,0)|0;I=$e(I|0,z|0,21)|0;D=z;c=lg(I|0,D|0,n|0,c|0)|0;n=z;D=zf(I|0,D|0,21)|0;D=ig(j|0,g|0,D|0,z|0)|0;g=z;j=ef(O|0,l|0,666643,0)|0;X=lg(j|0,z|0,X&2097151|0,0)|0;j=z;I=ef(O|0,l|0,470296,0)|0;I=lg(i|0,k|0,I|0,z|0)|0;k=z;i=ef(O|0,l|0,654183,0)|0;i=lg(P|0,E|0,i|0,z|0)|0;E=z;P=ef(O|0,l|0,-997805,-1)|0;U=z;y=ef(O|0,l|0,136657,0)|0;q=z;l=ef(O|0,l|0,-683901,-1)|0;H=lg(l|0,z|0,C|0,H|0)|0;_=lg(H|0,z|0,T|0,_|0)|0;s=ig(_|0,z|0,A|0,s|0)|0;A=z;_=ef(c|0,n|0,666643,0)|0;w=lg(_|0,z|0,w&2097151|0,0)|0;_=z;T=ef(c|0,n|0,470296,0)|0;T=lg(X|0,j|0,T|0,z|0)|0;j=z;X=ef(c|0,n|0,654183,0)|0;X=lg(I|0,k|0,X|0,z|0)|0;k=z;I=ef(c|0,n|0,-997805,-1)|0;I=lg(i|0,E|0,I|0,z|0)|0;E=z;i=ef(c|0,n|0,136657,0)|0;H=z;n=ef(c|0,n|0,-683901,-1)|0;c=z;C=ef(D|0,g|0,666643,0)|0;V=lg(C|0,z|0,V&2097151|0,0)|0;C=z;l=ef(D|0,g|0,470296,0)|0;l=lg(w|0,_|0,l|0,z|0)|0;_=z;w=ef(D|0,g|0,654183,0)|0;w=lg(T|0,j|0,w|0,z|0)|0;j=z;T=ef(D|0,g|0,-997805,-1)|0;T=lg(X|0,k|0,T|0,z|0)|0;k=z;X=ef(D|0,g|0,136657,0)|0;X=lg(I|0,E|0,X|0,z|0)|0;E=z;g=ef(D|0,g|0,-683901,-1)|0;D=z;K=lg(Z|0,G|0,F|0,K|0)|0;Q=ig(K|0,z|0,J|0,Q|0)|0;U=lg(Q|0,z|0,P|0,U|0)|0;H=lg(U|0,z|0,i|0,H|0)|0;D=lg(H|0,z|0,g|0,D|0)|0;g=z;H=ef(Y|0,e|0,666643,0)|0;S=lg(H|0,z|0,S&2097151|0,0)|0;H=z;i=ef(Y|0,e|0,470296,0)|0;i=lg(V|0,C|0,i|0,z|0)|0;C=z;V=ef(Y|0,e|0,654183,0)|0;V=lg(l|0,_|0,V|0,z|0)|0;_=z;l=ef(Y|0,e|0,-997805,-1)|0;l=lg(w|0,j|0,l|0,z|0)|0;j=z;w=ef(Y|0,e|0,136657,0)|0;w=lg(T|0,k|0,w|0,z|0)|0;k=z;e=ef(Y|0,e|0,-683901,-1)|0;e=lg(X|0,E|0,e|0,z|0)|0;E=z;X=ef(W|0,B|0,666643,0)|0;Y=z;T=ef(W|0,B|0,470296,0)|0;U=z;P=ef(W|0,B|0,654183,0)|0;Q=z;J=ef(W|0,B|0,-997805,-1)|0;K=z;F=ef(W|0,B|0,136657,0)|0;G=z;B=ef(W|0,B|0,-683901,-1)|0;B=lg(w|0,k|0,B|0,z|0)|0;k=z;w=ef(f|0,h|0,666643,0)|0;R=lg(w|0,z|0,R&2097151|0,0)|0;w=z;W=ef(f|0,h|0,470296,0)|0;Z=z;I=ef(f|0,h|0,654183,0)|0;I=lg(S|0,H|0,I|0,z|0)|0;U=lg(I|0,z|0,T|0,U|0)|0;T=z;I=ef(f|0,h|0,-997805,-1)|0;H=z;S=ef(f|0,h|0,136657,0)|0;S=lg(V|0,_|0,S|0,z|0)|0;K=lg(S|0,z|0,J|0,K|0)|0;J=z;h=ef(f|0,h|0,-683901,-1)|0;f=z;S=lg(R|0,w|0,1048576,0)|0;S=$e(S|0,z|0,21)|0;_=z;d=lg(W|0,Z|0,d&2097151|0,0)|0;Y=lg(d|0,z|0,X|0,Y|0)|0;Y=lg(Y|0,z|0,S|0,_|0)|0;X=z;_=zf(S|0,_|0,21)|0;_=ig(R|0,w|0,_|0,z|0)|0;w=z;R=lg(U|0,T|0,1048576,0)|0;R=$e(R|0,z|0,21)|0;S=z;H=lg(i|0,C|0,I|0,H|0)|0;Q=lg(H|0,z|0,P|0,Q|0)|0;Q=lg(Q|0,z|0,R|0,S|0)|0;P=z;S=zf(R|0,S|0,21)|0;R=z;H=lg(K|0,J|0,1048576,0)|0;H=$e(H|0,z|0,21)|0;I=z;f=lg(l|0,j|0,h|0,f|0)|0;G=lg(f|0,z|0,F|0,G|0)|0;G=lg(G|0,z|0,H|0,I|0)|0;F=z;I=zf(H|0,I|0,21)|0;H=z;f=lg(B|0,k|0,1048576,0)|0;f=$e(f|0,z|0,21)|0;h=z;E=lg(e|0,E|0,f|0,h|0)|0;e=z;h=zf(f|0,h|0,21)|0;h=ig(B|0,k|0,h|0,z|0)|0;k=z;B=lg(D|0,g|0,1048576,0)|0;B=$e(B|0,z|0,21)|0;f=z;o=lg(y|0,q|0,m|0,o|0)|0;u=ig(o|0,z|0,p|0,u|0)|0;c=lg(u|0,z|0,n|0,c|0)|0;c=lg(c|0,z|0,B|0,f|0)|0;n=z;f=zf(B|0,f|0,21)|0;f=ig(D|0,g|0,f|0,z|0)|0;g=z;D=lg(s|0,A|0,1048576,0)|0;D=$e(D|0,z|0,21)|0;B=z;r=lg(D|0,B|0,v|0,r|0)|0;v=z;B=zf(D|0,B|0,21)|0;B=ig(s|0,A|0,B|0,z|0)|0;A=z;s=lg(Y|0,X|0,1048576,0)|0;s=$e(s|0,z|0,21)|0;D=z;u=zf(s|0,D|0,21)|0;p=z;o=lg(Q|0,P|0,1048576,0)|0;o=$e(o|0,z|0,21)|0;m=z;q=zf(o|0,m|0,21)|0;y=z;j=lg(G|0,F|0,1048576,0)|0;j=$e(j|0,z|0,21)|0;l=z;k=lg(h|0,k|0,j|0,l|0)|0;h=z;l=zf(j|0,l|0,21)|0;j=z;C=lg(E|0,e|0,1048576,0)|0;C=$e(C|0,z|0,21)|0;i=z;g=lg(f|0,g|0,C|0,i|0)|0;f=z;i=zf(C|0,i|0,21)|0;i=ig(E|0,e|0,i|0,z|0)|0;e=z;E=lg(c|0,n|0,1048576,0)|0;E=$e(E|0,z|0,21)|0;C=z;A=lg(B|0,A|0,E|0,C|0)|0;B=z;C=zf(E|0,C|0,21)|0;C=ig(c|0,n|0,C|0,z|0)|0;n=z;c=lg(r|0,v|0,1048576,0)|0;c=$e(c|0,z|0,21)|0;E=z;d=zf(c|0,E|0,21)|0;d=ig(r|0,v|0,d|0,z|0)|0;v=z;r=ef(c|0,E|0,666643,0)|0;r=lg(_|0,w|0,r|0,z|0)|0;w=z;_=ef(c|0,E|0,470296,0)|0;Z=z;W=ef(c|0,E|0,654183,0)|0;V=z;O=ef(c|0,E|0,-997805,-1)|0;N=z;M=ef(c|0,E|0,136657,0)|0;L=z;E=ef(c|0,E|0,-683901,-1)|0;c=z;t=$e(r|0,w|0,21)|0;x=z;X=lg(_|0,Z|0,Y|0,X|0)|0;p=ig(X|0,z|0,u|0,p|0)|0;p=lg(p|0,z|0,t|0,x|0)|0;u=z;x=zf(t|0,x|0,21)|0;x=ig(r|0,w|0,x|0,z|0)|0;w=z;r=$e(p|0,u|0,21)|0;t=z;T=lg(W|0,V|0,U|0,T|0)|0;R=ig(T|0,z|0,S|0,R|0)|0;D=lg(R|0,z|0,s|0,D|0)|0;D=lg(D|0,z|0,r|0,t|0)|0;s=z;t=zf(r|0,t|0,21)|0;t=ig(p|0,u|0,t|0,z|0)|0;u=z;p=$e(D|0,s|0,21)|0;r=z;N=lg(Q|0,P|0,O|0,N|0)|0;y=ig(N|0,z|0,q|0,y|0)|0;y=lg(y|0,z|0,p|0,r|0)|0;q=z;r=zf(p|0,r|0,21)|0;r=ig(D|0,s|0,r|0,z|0)|0;s=z;D=$e(y|0,q|0,21)|0;p=z;J=lg(M|0,L|0,K|0,J|0)|0;H=ig(J|0,z|0,I|0,H|0)|0;m=lg(H|0,z|0,o|0,m|0)|0;m=lg(m|0,z|0,D|0,p|0)|0;o=z;p=zf(D|0,p|0,21)|0;p=ig(y|0,q|0,p|0,z|0)|0;q=z;y=$e(m|0,o|0,21)|0;D=z;c=lg(G|0,F|0,E|0,c|0)|0;j=ig(c|0,z|0,l|0,j|0)|0;j=lg(j|0,z|0,y|0,D|0)|0;l=z;D=zf(y|0,D|0,21)|0;D=ig(m|0,o|0,D|0,z|0)|0;o=z;m=$e(j|0,l|0,21)|0;y=z;h=lg(k|0,h|0,m|0,y|0)|0;k=z;y=zf(m|0,y|0,21)|0;y=ig(j|0,l|0,y|0,z|0)|0;l=z;j=$e(h|0,k|0,21)|0;m=z;e=lg(j|0,m|0,i|0,e|0)|0;i=z;m=zf(j|0,m|0,21)|0;m=ig(h|0,k|0,m|0,z|0)|0;k=z;h=$e(e|0,i|0,21)|0;j=z;f=lg(g|0,f|0,h|0,j|0)|0;g=z;j=zf(h|0,j|0,21)|0;j=ig(e|0,i|0,j|0,z|0)|0;i=z;e=$e(f|0,g|0,21)|0;h=z;n=lg(e|0,h|0,C|0,n|0)|0;C=z;h=zf(e|0,h|0,21)|0;h=ig(f|0,g|0,h|0,z|0)|0;g=z;f=$e(n|0,C|0,21)|0;e=z;B=lg(A|0,B|0,f|0,e|0)|0;A=z;e=zf(f|0,e|0,21)|0;e=ig(n|0,C|0,e|0,z|0)|0;C=z;n=$e(B|0,A|0,21)|0;f=z;v=lg(n|0,f|0,d|0,v|0)|0;d=z;f=zf(n|0,f|0,21)|0;f=ig(B|0,A|0,f|0,z|0)|0;A=z;B=$e(v|0,d|0,21)|0;n=z;c=zf(B|0,n|0,21)|0;c=ig(v|0,d|0,c|0,z|0)|0;d=z;v=ef(B|0,n|0,666643,0)|0;w=lg(v|0,z|0,x|0,w|0)|0;x=z;v=ef(B|0,n|0,470296,0)|0;v=lg(t|0,u|0,v|0,z|0)|0;u=z;t=ef(B|0,n|0,654183,0)|0;t=lg(r|0,s|0,t|0,z|0)|0;s=z;r=ef(B|0,n|0,-997805,-1)|0;r=lg(p|0,q|0,r|0,z|0)|0;q=z;p=ef(B|0,n|0,136657,0)|0;p=lg(D|0,o|0,p|0,z|0)|0;o=z;n=ef(B|0,n|0,-683901,-1)|0;n=lg(y|0,l|0,n|0,z|0)|0;l=z;y=$e(w|0,x|0,21)|0;B=z;u=lg(v|0,u|0,y|0,B|0)|0;v=z;B=zf(y|0,B|0,21)|0;B=ig(w|0,x|0,B|0,z|0)|0;x=z;w=$e(u|0,v|0,21)|0;y=z;s=lg(t|0,s|0,w|0,y|0)|0;t=z;y=zf(w|0,y|0,21)|0;y=ig(u|0,v|0,y|0,z|0)|0;v=z;u=$e(s|0,t|0,21)|0;w=z;q=lg(r|0,q|0,u|0,w|0)|0;r=z;w=zf(u|0,w|0,21)|0;w=ig(s|0,t|0,w|0,z|0)|0;t=z;s=$e(q|0,r|0,21)|0;u=z;o=lg(p|0,o|0,s|0,u|0)|0;p=z;u=zf(s|0,u|0,21)|0;u=ig(q|0,r|0,u|0,z|0)|0;r=z;q=$e(o|0,p|0,21)|0;s=z;l=lg(n|0,l|0,q|0,s|0)|0;n=z;s=zf(q|0,s|0,21)|0;s=ig(o|0,p|0,s|0,z|0)|0;p=z;o=$e(l|0,n|0,21)|0;q=z;k=lg(o|0,q|0,m|0,k|0)|0;m=z;q=zf(o|0,q|0,21)|0;q=ig(l|0,n|0,q|0,z|0)|0;n=z;l=$e(k|0,m|0,21)|0;o=z;i=lg(l|0,o|0,j|0,i|0)|0;j=z;o=zf(l|0,o|0,21)|0;o=ig(k|0,m|0,o|0,z|0)|0;m=z;k=$e(i|0,j|0,21)|0;l=z;g=lg(k|0,l|0,h|0,g|0)|0;h=z;l=zf(k|0,l|0,21)|0;l=ig(i|0,j|0,l|0,z|0)|0;j=z;i=$e(g|0,h|0,21)|0;k=z;C=lg(i|0,k|0,e|0,C|0)|0;e=z;k=zf(i|0,k|0,21)|0;k=ig(g|0,h|0,k|0,z|0)|0;h=z;g=$e(C|0,e|0,21)|0;i=z;A=lg(g|0,i|0,f|0,A|0)|0;f=z;i=zf(g|0,i|0,21)|0;i=ig(C|0,e|0,i|0,z|0)|0;e=z;C=$e(A|0,f|0,21)|0;g=z;d=lg(C|0,g|0,c|0,d|0)|0;c=z;g=zf(C|0,g|0,21)|0;g=ig(A|0,f|0,g|0,z|0)|0;f=z;a[b>>0]=B;A=Cf(B|0,x|0,8)|0;a[b+1>>0]=A;x=Cf(B|0,x|0,16)|0;B=z;A=zf(y|0,v|0,5)|0;a[b+2>>0]=A|x;x=Cf(y|0,v|0,3)|0;a[b+3>>0]=x;x=Cf(y|0,v|0,11)|0;a[b+4>>0]=x;v=Cf(y|0,v|0,19)|0;y=z;x=zf(w|0,t|0,2)|0;a[b+5>>0]=x|v;v=Cf(w|0,t|0,6)|0;a[b+6>>0]=v;t=Cf(w|0,t|0,14)|0;w=z;v=zf(u|0,r|0,7)|0;a[b+7>>0]=v|t;t=Cf(u|0,r|0,1)|0;a[b+8>>0]=t;t=Cf(u|0,r|0,9)|0;a[b+9>>0]=t;r=Cf(u|0,r|0,17)|0;u=z;t=zf(s|0,p|0,4)|0;a[b+10>>0]=t|r;r=Cf(s|0,p|0,4)|0;a[b+11>>0]=r;r=Cf(s|0,p|0,12)|0;a[b+12>>0]=r;p=Cf(s|0,p|0,20)|0;s=z;r=zf(q|0,n|0,1)|0;a[b+13>>0]=r|p;p=Cf(q|0,n|0,7)|0;a[b+14>>0]=p;n=Cf(q|0,n|0,15)|0;q=z;p=zf(o|0,m|0,6)|0;a[b+15>>0]=p|n;n=Cf(o|0,m|0,2)|0;a[b+16>>0]=n;n=Cf(o|0,m|0,10)|0;a[b+17>>0]=n;m=Cf(o|0,m|0,18)|0;o=z;n=zf(l|0,j|0,3)|0;a[b+18>>0]=n|m;m=Cf(l|0,j|0,5)|0;a[b+19>>0]=m;j=Cf(l|0,j|0,13)|0;a[b+20>>0]=j;a[b+21>>0]=k;j=Cf(k|0,h|0,8)|0;a[b+22>>0]=j;h=Cf(k|0,h|0,16)|0;k=z;j=zf(i|0,e|0,5)|0;a[b+23>>0]=j|h;h=Cf(i|0,e|0,3)|0;a[b+24>>0]=h;h=Cf(i|0,e|0,11)|0;a[b+25>>0]=h;e=Cf(i|0,e|0,19)|0;i=z;h=zf(g|0,f|0,2)|0;a[b+26>>0]=h|e;e=Cf(g|0,f|0,6)|0;a[b+27>>0]=e;f=Cf(g|0,f|0,14)|0;g=z;e=zf(d|0,c|0,7)|0;a[b+28>>0]=f|e;e=Cf(d|0,c|0,1)|0;a[b+29>>0]=e;e=Cf(d|0,c|0,9)|0;a[b+30>>0]=e;c=Cf(d|0,c|0,17)|0;a[b+31>>0]=c;return}function la(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0;o=c[b>>2]|0;n=c[b+4>>2]|0;k=c[b+8>>2]|0;fa=c[b+12>>2]|0;N=c[b+16>>2]|0;M=c[b+20>>2]|0;g=c[b+24>>2]|0;ea=c[b+28>>2]|0;L=c[b+32>>2]|0;q=c[b+36>>2]|0;I=c[d>>2]|0;Oc=c[d+4>>2]|0;cc=c[d+8>>2]|0;sb=c[d+12>>2]|0;Ia=c[d+16>>2]|0;jc=c[d+20>>2]|0;Db=c[d+24>>2]|0;Ta=c[d+28>>2]|0;ga=c[d+32>>2]|0;Pc=c[d+36>>2]|0;Mc=ef(I|0,((I|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;Lc=z;wc=ef(Oc|0,((Oc|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;vc=z;ub=ef(cc|0,((cc|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;tb=z;Ka=ef(sb|0,((sb|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;Ja=z;mc=ef(Ia|0,((Ia|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;lc=z;Gb=ef(jc|0,((jc|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;Fb=z;Wa=ef(Db|0,((Db|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;Va=z;ja=ef(Ta|0,((Ta|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;ia=z;P=ef(ga|0,((ga|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;O=z;o=ef(Pc|0,((Pc|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;l=z;dc=ef(I|0,((I|0)<0)<<31>>31|0,n|0,((n|0)<0)<<31>>31|0)|0;ec=z;yb=ef(Oc|0,((Oc|0)<0)<<31>>31|0,n<<1|0,((n<<1|0)<0)<<31>>31|0)|0;xb=z;Ma=ef(cc|0,((cc|0)<0)<<31>>31|0,n|0,((n|0)<0)<<31>>31|0)|0;La=z;oc=ef(sb|0,((sb|0)<0)<<31>>31|0,n<<1|0,((n<<1|0)<0)<<31>>31|0)|0;nc=z;Ib=ef(Ia|0,((Ia|0)<0)<<31>>31|0,n|0,((n|0)<0)<<31>>31|0)|0;Hb=z;Ya=ef(jc|0,((jc|0)<0)<<31>>31|0,n<<1|0,((n<<1|0)<0)<<31>>31|0)|0;Xa=z;la=ef(Db|0,((Db|0)<0)<<31>>31|0,n|0,((n|0)<0)<<31>>31|0)|0;ka=z;R=ef(Ta|0,((Ta|0)<0)<<31>>31|0,n<<1|0,((n<<1|0)<0)<<31>>31|0)|0;Q=z;t=ef(ga|0,((ga|0)<0)<<31>>31|0,n|0,((n|0)<0)<<31>>31|0)|0;s=z;d=((Pc*19|0)<0)<<31>>31;n=ef(Pc*19|0,d|0,n<<1|0,((n<<1|0)<0)<<31>>31|0)|0;p=z;wb=ef(I|0,((I|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;vb=z;Qa=ef(Oc|0,((Oc|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;Pa=z;qc=ef(cc|0,((cc|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;pc=z;Kb=ef(sb|0,((sb|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;Jb=z;_a=ef(Ia|0,((Ia|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;Za=z;na=ef(jc|0,((jc|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;ma=z;T=ef(Db|0,((Db|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;S=z;v=ef(Ta|0,((Ta|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;u=z;ha=((ga*19|0)<0)<<31>>31;yc=ef(ga*19|0,ha|0,k|0,((k|0)<0)<<31>>31|0)|0;xc=z;k=ef(Pc*19|0,d|0,k|0,((k|0)<0)<<31>>31|0)|0;j=z;Oa=ef(I|0,((I|0)<0)<<31>>31|0,fa|0,((fa|0)<0)<<31>>31|0)|0;Na=z;uc=ef(Oc|0,((Oc|0)<0)<<31>>31|0,fa<<1|0,((fa<<1|0)<0)<<31>>31|0)|0;tc=z;Mb=ef(cc|0,((cc|0)<0)<<31>>31|0,fa|0,((fa|0)<0)<<31>>31|0)|0;Lb=z;ab=ef(sb|0,((sb|0)<0)<<31>>31|0,fa<<1|0,((fa<<1|0)<0)<<31>>31|0)|0;$a=z;pa=ef(Ia|0,((Ia|0)<0)<<31>>31|0,fa|0,((fa|0)<0)<<31>>31|0)|0;oa=z;V=ef(jc|0,((jc|0)<0)<<31>>31|0,fa<<1|0,((fa<<1|0)<0)<<31>>31|0)|0;U=z;x=ef(Db|0,((Db|0)<0)<<31>>31|0,fa|0,((fa|0)<0)<<31>>31|0)|0;w=z;Ua=((Ta*19|0)<0)<<31>>31;Ac=ef(Ta*19|0,Ua|0,fa<<1|0,((fa<<1|0)<0)<<31>>31|0)|0;zc=z;Sb=ef(ga*19|0,ha|0,fa|0,((fa|0)<0)<<31>>31|0)|0;Rb=z;fa=ef(Pc*19|0,d|0,fa<<1|0,((fa<<1|0)<0)<<31>>31|0)|0;f=z;sc=ef(I|0,((I|0)<0)<<31>>31|0,N|0,((N|0)<0)<<31>>31|0)|0;rc=z;Qb=ef(Oc|0,((Oc|0)<0)<<31>>31|0,N|0,((N|0)<0)<<31>>31|0)|0;Pb=z;cb=ef(cc|0,((cc|0)<0)<<31>>31|0,N|0,((N|0)<0)<<31>>31|0)|0;bb=z;ra=ef(sb|0,((sb|0)<0)<<31>>31|0,N|0,((N|0)<0)<<31>>31|0)|0;qa=z;X=ef(Ia|0,((Ia|0)<0)<<31>>31|0,N|0,((N|0)<0)<<31>>31|0)|0;W=z;A=ef(jc|0,((jc|0)<0)<<31>>31|0,N|0,((N|0)<0)<<31>>31|0)|0;y=z;Eb=((Db*19|0)<0)<<31>>31;Cc=ef(Db*19|0,Eb|0,N|0,((N|0)<0)<<31>>31|0)|0;Bc=z;Ub=ef(Ta*19|0,Ua|0,N|0,((N|0)<0)<<31>>31|0)|0;Tb=z;ib=ef(ga*19|0,ha|0,N|0,((N|0)<0)<<31>>31|0)|0;hb=z;N=ef(Pc*19|0,d|0,N|0,((N|0)<0)<<31>>31|0)|0;e=z;Ob=ef(I|0,((I|0)<0)<<31>>31|0,M|0,((M|0)<0)<<31>>31|0)|0;Nb=z;gb=ef(Oc|0,((Oc|0)<0)<<31>>31|0,M<<1|0,((M<<1|0)<0)<<31>>31|0)|0;fb=z;ta=ef(cc|0,((cc|0)<0)<<31>>31|0,M|0,((M|0)<0)<<31>>31|0)|0;sa=z;Z=ef(sb|0,((sb|0)<0)<<31>>31|0,M<<1|0,((M<<1|0)<0)<<31>>31|0)|0;Y=z;C=ef(Ia|0,((Ia|0)<0)<<31>>31|0,M|0,((M|0)<0)<<31>>31|0)|0;B=z;kc=((jc*19|0)<0)<<31>>31;Ec=ef(jc*19|0,kc|0,M<<1|0,((M<<1|0)<0)<<31>>31|0)|0;Dc=z;Wb=ef(Db*19|0,Eb|0,M|0,((M|0)<0)<<31>>31|0)|0;Vb=z;kb=ef(Ta*19|0,Ua|0,M<<1|0,((M<<1|0)<0)<<31>>31|0)|0;jb=z;Aa=ef(ga*19|0,ha|0,M|0,((M|0)<0)<<31>>31|0)|0;za=z;b=ef(Pc*19|0,d|0,M<<1|0,((M<<1|0)<0)<<31>>31|0)|0;M=z;eb=ef(I|0,((I|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;db=z;xa=ef(Oc|0,((Oc|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;wa=z;$=ef(cc|0,((cc|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;_=z;E=ef(sb|0,((sb|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;D=z;Gc=ef(Ia*19|0,((Ia*19|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;Fc=z;Yb=ef(jc*19|0,kc|0,g|0,((g|0)<0)<<31>>31|0)|0;Xb=z;mb=ef(Db*19|0,Eb|0,g|0,((g|0)<0)<<31>>31|0)|0;lb=z;Ca=ef(Ta*19|0,Ua|0,g|0,((g|0)<0)<<31>>31|0)|0;Ba=z;m=ef(ga*19|0,ha|0,g|0,((g|0)<0)<<31>>31|0)|0;r=z;g=ef(Pc*19|0,d|0,g|0,((g|0)<0)<<31>>31|0)|0;ya=z;va=ef(I|0,((I|0)<0)<<31>>31|0,ea|0,((ea|0)<0)<<31>>31|0)|0;ua=z;da=ef(Oc|0,((Oc|0)<0)<<31>>31|0,ea<<1|0,((ea<<1|0)<0)<<31>>31|0)|0;ca=z;G=ef(cc|0,((cc|0)<0)<<31>>31|0,ea|0,((ea|0)<0)<<31>>31|0)|0;F=z;Ic=ef(sb*19|0,((sb*19|0)<0)<<31>>31|0,ea<<1|0,((ea<<1|0)<0)<<31>>31|0)|0;Hc=z;_b=ef(Ia*19|0,((Ia*19|0)<0)<<31>>31|0,ea|0,((ea|0)<0)<<31>>31|0)|0;Zb=z;ob=ef(jc*19|0,kc|0,ea<<1|0,((ea<<1|0)<0)<<31>>31|0)|0;nb=z;Ea=ef(Db*19|0,Eb|0,ea|0,((ea|0)<0)<<31>>31|0)|0;Da=z;gc=ef(Ta*19|0,Ua|0,ea<<1|0,((ea<<1|0)<0)<<31>>31|0)|0;fc=z;Ab=ef(ga*19|0,ha|0,ea|0,((ea|0)<0)<<31>>31|0)|0;zb=z;ea=ef(Pc*19|0,d|0,ea<<1|0,((ea<<1|0)<0)<<31>>31|0)|0;i=z;ba=ef(I|0,((I|0)<0)<<31>>31|0,L|0,((L|0)<0)<<31>>31|0)|0;aa=z;K=ef(Oc|0,((Oc|0)<0)<<31>>31|0,L|0,((L|0)<0)<<31>>31|0)|0;J=z;Kc=ef(cc*19|0,((cc*19|0)<0)<<31>>31|0,L|0,((L|0)<0)<<31>>31|0)|0;Jc=z;ac=ef(sb*19|0,((sb*19|0)<0)<<31>>31|0,L|0,((L|0)<0)<<31>>31|0)|0;$b=z;qb=ef(Ia*19|0,((Ia*19|0)<0)<<31>>31|0,L|0,((L|0)<0)<<31>>31|0)|0;pb=z;Ga=ef(jc*19|0,kc|0,L|0,((L|0)<0)<<31>>31|0)|0;Fa=z;ic=ef(Db*19|0,Eb|0,L|0,((L|0)<0)<<31>>31|0)|0;hc=z;Cb=ef(Ta*19|0,Ua|0,L|0,((L|0)<0)<<31>>31|0)|0;Bb=z;Sa=ef(ga*19|0,ha|0,L|0,((L|0)<0)<<31>>31|0)|0;Ra=z;L=ef(Pc*19|0,d|0,L|0,((L|0)<0)<<31>>31|0)|0;h=z;I=ef(I|0,((I|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;H=z;Oc=ef(Oc*19|0,((Oc*19|0)<0)<<31>>31|0,q<<1|0,((q<<1|0)<0)<<31>>31|0)|0;Nc=z;cc=ef(cc*19|0,((cc*19|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;bc=z;sb=ef(sb*19|0,((sb*19|0)<0)<<31>>31|0,q<<1|0,((q<<1|0)<0)<<31>>31|0)|0;rb=z;Ia=ef(Ia*19|0,((Ia*19|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;Ha=z;kc=ef(jc*19|0,kc|0,q<<1|0,((q<<1|0)<0)<<31>>31|0)|0;jc=z;Eb=ef(Db*19|0,Eb|0,q|0,((q|0)<0)<<31>>31|0)|0;Db=z;Ua=ef(Ta*19|0,Ua|0,q<<1|0,((q<<1|0)<0)<<31>>31|0)|0;Ta=z;ha=ef(ga*19|0,ha|0,q|0,((q|0)<0)<<31>>31|0)|0;ga=z;q=ef(Pc*19|0,d|0,q<<1|0,((q<<1|0)<0)<<31>>31|0)|0;d=z;Lc=lg(Oc|0,Nc|0,Mc|0,Lc|0)|0;Jc=lg(Lc|0,z|0,Kc|0,Jc|0)|0;Hc=lg(Jc|0,z|0,Ic|0,Hc|0)|0;Fc=lg(Hc|0,z|0,Gc|0,Fc|0)|0;Dc=lg(Fc|0,z|0,Ec|0,Dc|0)|0;Bc=lg(Dc|0,z|0,Cc|0,Bc|0)|0;zc=lg(Bc|0,z|0,Ac|0,zc|0)|0;xc=lg(zc|0,z|0,yc|0,xc|0)|0;p=lg(xc|0,z|0,n|0,p|0)|0;n=z;ec=lg(wc|0,vc|0,dc|0,ec|0)|0;dc=z;rc=lg(uc|0,tc|0,sc|0,rc|0)|0;pc=lg(rc|0,z|0,qc|0,pc|0)|0;nc=lg(pc|0,z|0,oc|0,nc|0)|0;lc=lg(nc|0,z|0,mc|0,lc|0)|0;jc=lg(lc|0,z|0,kc|0,jc|0)|0;hc=lg(jc|0,z|0,ic|0,hc|0)|0;fc=lg(hc|0,z|0,gc|0,fc|0)|0;r=lg(fc|0,z|0,m|0,r|0)|0;M=lg(r|0,z|0,b|0,M|0)|0;b=z;r=lg(p|0,n|0,33554432,0)|0;r=$e(r|0,z|0,26)|0;m=z;bc=lg(ec|0,dc|0,cc|0,bc|0)|0;$b=lg(bc|0,z|0,ac|0,$b|0)|0;Zb=lg($b|0,z|0,_b|0,Zb|0)|0;Xb=lg(Zb|0,z|0,Yb|0,Xb|0)|0;Vb=lg(Xb|0,z|0,Wb|0,Vb|0)|0;Tb=lg(Vb|0,z|0,Ub|0,Tb|0)|0;Rb=lg(Tb|0,z|0,Sb|0,Rb|0)|0;j=lg(Rb|0,z|0,k|0,j|0)|0;j=lg(j|0,z|0,r|0,m|0)|0;k=z;m=zf(r|0,m|0,26)|0;m=ig(p|0,n|0,m|0,z|0)|0;n=z;p=lg(M|0,b|0,33554432,0)|0;p=$e(p|0,z|0,26)|0;r=z;Nb=lg(Qb|0,Pb|0,Ob|0,Nb|0)|0;Lb=lg(Nb|0,z|0,Mb|0,Lb|0)|0;Jb=lg(Lb|0,z|0,Kb|0,Jb|0)|0;Hb=lg(Jb|0,z|0,Ib|0,Hb|0)|0;Fb=lg(Hb|0,z|0,Gb|0,Fb|0)|0;Db=lg(Fb|0,z|0,Eb|0,Db|0)|0;Bb=lg(Db|0,z|0,Cb|0,Bb|0)|0;zb=lg(Bb|0,z|0,Ab|0,zb|0)|0;ya=lg(zb|0,z|0,g|0,ya|0)|0;ya=lg(ya|0,z|0,p|0,r|0)|0;g=z;r=zf(p|0,r|0,26)|0;r=ig(M|0,b|0,r|0,z|0)|0;b=z;M=lg(j|0,k|0,16777216,0)|0;M=$e(M|0,z|0,25)|0;p=z;vb=lg(yb|0,xb|0,wb|0,vb|0)|0;tb=lg(vb|0,z|0,ub|0,tb|0)|0;rb=lg(tb|0,z|0,sb|0,rb|0)|0;pb=lg(rb|0,z|0,qb|0,pb|0)|0;nb=lg(pb|0,z|0,ob|0,nb|0)|0;lb=lg(nb|0,z|0,mb|0,lb|0)|0;jb=lg(lb|0,z|0,kb|0,jb|0)|0;hb=lg(jb|0,z|0,ib|0,hb|0)|0;f=lg(hb|0,z|0,fa|0,f|0)|0;f=lg(f|0,z|0,M|0,p|0)|0;fa=z;p=zf(M|0,p|0,25)|0;p=ig(j|0,k|0,p|0,z|0)|0;k=z;j=lg(ya|0,g|0,16777216,0)|0;j=$e(j|0,z|0,25)|0;M=z;db=lg(gb|0,fb|0,eb|0,db|0)|0;bb=lg(db|0,z|0,cb|0,bb|0)|0;$a=lg(bb|0,z|0,ab|0,$a|0)|0;Za=lg($a|0,z|0,_a|0,Za|0)|0;Xa=lg(Za|0,z|0,Ya|0,Xa|0)|0;Va=lg(Xa|0,z|0,Wa|0,Va|0)|0;Ta=lg(Va|0,z|0,Ua|0,Ta|0)|0;Ra=lg(Ta|0,z|0,Sa|0,Ra|0)|0;i=lg(Ra|0,z|0,ea|0,i|0)|0;i=lg(i|0,z|0,j|0,M|0)|0;ea=z;M=zf(j|0,M|0,25)|0;M=ig(ya|0,g|0,M|0,z|0)|0;g=z;ya=lg(f|0,fa|0,33554432,0)|0;ya=$e(ya|0,z|0,26)|0;j=z;Na=lg(Qa|0,Pa|0,Oa|0,Na|0)|0;La=lg(Na|0,z|0,Ma|0,La|0)|0;Ja=lg(La|0,z|0,Ka|0,Ja|0)|0;Ha=lg(Ja|0,z|0,Ia|0,Ha|0)|0;Fa=lg(Ha|0,z|0,Ga|0,Fa|0)|0;Da=lg(Fa|0,z|0,Ea|0,Da|0)|0;Ba=lg(Da|0,z|0,Ca|0,Ba|0)|0;za=lg(Ba|0,z|0,Aa|0,za|0)|0;e=lg(za|0,z|0,N|0,e|0)|0;e=lg(e|0,z|0,ya|0,j|0)|0;N=z;j=zf(ya|0,j|0,26)|0;j=ig(f|0,fa|0,j|0,z|0)|0;fa=lg(i|0,ea|0,33554432,0)|0;fa=$e(fa|0,z|0,26)|0;f=z;ua=lg(xa|0,wa|0,va|0,ua|0)|0;sa=lg(ua|0,z|0,ta|0,sa|0)|0;qa=lg(sa|0,z|0,ra|0,qa|0)|0;oa=lg(qa|0,z|0,pa|0,oa|0)|0;ma=lg(oa|0,z|0,na|0,ma|0)|0;ka=lg(ma|0,z|0,la|0,ka|0)|0;ia=lg(ka|0,z|0,ja|0,ia|0)|0;ga=lg(ia|0,z|0,ha|0,ga|0)|0;h=lg(ga|0,z|0,L|0,h|0)|0;h=lg(h|0,z|0,fa|0,f|0)|0;L=z;f=zf(fa|0,f|0,26)|0;f=ig(i|0,ea|0,f|0,z|0)|0;ea=lg(e|0,N|0,16777216,0)|0;ea=$e(ea|0,z|0,25)|0;i=z;b=lg(ea|0,i|0,r|0,b|0)|0;r=z;i=zf(ea|0,i|0,25)|0;i=ig(e|0,N|0,i|0,z|0)|0;N=lg(h|0,L|0,16777216,0)|0;N=$e(N|0,z|0,25)|0;e=z;aa=lg(da|0,ca|0,ba|0,aa|0)|0;_=lg(aa|0,z|0,$|0,_|0)|0;Y=lg(_|0,z|0,Z|0,Y|0)|0;W=lg(Y|0,z|0,X|0,W|0)|0;U=lg(W|0,z|0,V|0,U|0)|0;S=lg(U|0,z|0,T|0,S|0)|0;Q=lg(S|0,z|0,R|0,Q|0)|0;O=lg(Q|0,z|0,P|0,O|0)|0;d=lg(O|0,z|0,q|0,d|0)|0;d=lg(d|0,z|0,N|0,e|0)|0;q=z;e=zf(N|0,e|0,25)|0;e=ig(h|0,L|0,e|0,z|0)|0;L=lg(b|0,r|0,33554432,0)|0;L=$e(L|0,z|0,26)|0;h=z;g=lg(M|0,g|0,L|0,h|0)|0;h=zf(L|0,h|0,26)|0;h=ig(b|0,r|0,h|0,z|0)|0;r=lg(d|0,q|0,33554432,0)|0;r=$e(r|0,z|0,26)|0;b=z;H=lg(K|0,J|0,I|0,H|0)|0;F=lg(H|0,z|0,G|0,F|0)|0;D=lg(F|0,z|0,E|0,D|0)|0;B=lg(D|0,z|0,C|0,B|0)|0;y=lg(B|0,z|0,A|0,y|0)|0;w=lg(y|0,z|0,x|0,w|0)|0;u=lg(w|0,z|0,v|0,u|0)|0;s=lg(u|0,z|0,t|0,s|0)|0;l=lg(s|0,z|0,o|0,l|0)|0;l=lg(l|0,z|0,r|0,b|0)|0;o=z;b=zf(r|0,b|0,26)|0;b=ig(d|0,q|0,b|0,z|0)|0;q=lg(l|0,o|0,16777216,0)|0;q=$e(q|0,z|0,25)|0;d=z;r=ef(q|0,d|0,19,0)|0;n=lg(r|0,z|0,m|0,n|0)|0;m=z;d=zf(q|0,d|0,25)|0;d=ig(l|0,o|0,d|0,z|0)|0;o=lg(n|0,m|0,33554432,0)|0;o=$e(o|0,z|0,26)|0;l=z;k=lg(p|0,k|0,o|0,l|0)|0;l=zf(o|0,l|0,26)|0;l=ig(n|0,m|0,l|0,z|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=b;c[a+36>>2]=d;return}function ma(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;e=l;f=l=l+63&-64;l=l+2048|0;Dh(f+1024|0,b);ae(f+1024|0,a);Dh(f,f+1024|0);ae(f,d);a=0;do{b=a<<4;u=c[f+1024+((b|4)<<3)>>2]|0;x=c[f+1024+((b|4)<<3)+4>>2]|0;A=ke(c[f+1024+(b<<3)>>2]|0,c[f+1024+(b<<3)+4>>2]|0,u,x)|0;G=z;y=bf(c[f+1024+((b|12)<<3)>>2]^A,c[f+1024+((b|12)<<3)+4>>2]^G,32)|0;t=z;D=ke(c[f+1024+((b|8)<<3)>>2]|0,c[f+1024+((b|8)<<3)+4>>2]|0,y,t)|0;q=z;x=bf(u^D,x^q,24)|0;u=z;G=ke(A,G,x,u)|0;A=z;t=bf(y^G,t^A,16)|0;y=z;c[f+1024+((b|12)<<3)>>2]=t;c[f+1024+((b|12)<<3)+4>>2]=y;q=ke(D,q,t,y)|0;D=z;c[f+1024+((b|8)<<3)>>2]=q;c[f+1024+((b|8)<<3)+4>>2]=D;D=bf(x^q,u^D,63)|0;c[f+1024+((b|4)<<3)>>2]=D;c[f+1024+((b|4)<<3)+4>>2]=z;D=c[f+1024+((b|5)<<3)>>2]|0;u=c[f+1024+((b|5)<<3)+4>>2]|0;q=ke(c[f+1024+((b|1)<<3)>>2]|0,c[f+1024+((b|1)<<3)+4>>2]|0,D,u)|0;x=z;s=bf(c[f+1024+((b|13)<<3)>>2]^q,c[f+1024+((b|13)<<3)+4>>2]^x,32)|0;m=z;B=ke(c[f+1024+((b|9)<<3)>>2]|0,c[f+1024+((b|9)<<3)+4>>2]|0,s,m)|0;p=z;u=bf(D^B,u^p,24)|0;D=z;x=ke(q,x,u,D)|0;q=z;m=bf(s^x,m^q,16)|0;s=z;p=ke(B,p,m,s)|0;B=z;c[f+1024+((b|9)<<3)>>2]=p;c[f+1024+((b|9)<<3)+4>>2]=B;B=bf(u^p,D^B,63)|0;D=z;p=c[f+1024+((b|6)<<3)>>2]|0;u=c[f+1024+((b|6)<<3)+4>>2]|0;h=ke(c[f+1024+((b|2)<<3)>>2]|0,c[f+1024+((b|2)<<3)+4>>2]|0,p,u)|0;r=z;o=bf(c[f+1024+((b|14)<<3)>>2]^h,c[f+1024+((b|14)<<3)+4>>2]^r,32)|0;i=z;F=ke(c[f+1024+((b|10)<<3)>>2]|0,c[f+1024+((b|10)<<3)+4>>2]|0,o,i)|0;E=z;u=bf(p^F,u^E,24)|0;p=z;r=ke(h,r,u,p)|0;h=z;i=bf(o^r,i^h,16)|0;o=z;E=ke(F,E,i,o)|0;F=z;p=bf(u^E,p^F,63)|0;u=z;j=c[f+1024+((b|7)<<3)>>2]|0;k=c[f+1024+((b|7)<<3)+4>>2]|0;g=ke(c[f+1024+((b|3)<<3)>>2]|0,c[f+1024+((b|3)<<3)+4>>2]|0,j,k)|0;n=z;H=bf(c[f+1024+((b|15)<<3)>>2]^g,c[f+1024+((b|15)<<3)+4>>2]^n,32)|0;C=z;w=ke(c[f+1024+((b|11)<<3)>>2]|0,c[f+1024+((b|11)<<3)+4>>2]|0,H,C)|0;v=z;k=bf(j^w,k^v,24)|0;j=z;n=ke(g,n,k,j)|0;g=z;C=bf(H^n,C^g,16)|0;H=z;v=ke(w,v,C,H)|0;w=z;j=bf(k^v,j^w,63)|0;k=z;A=ke(G,A,B,D)|0;G=z;H=bf(C^A,H^G,32)|0;C=z;F=ke(E,F,H,C)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;G=ke(A,G,D,B)|0;A=z;c[f+1024+(b<<3)>>2]=G;c[f+1024+(b<<3)+4>>2]=A;A=bf(H^G,C^A,16)|0;C=z;c[f+1024+((b|15)<<3)>>2]=A;c[f+1024+((b|15)<<3)+4>>2]=C;C=ke(F,E,A,C)|0;A=z;c[f+1024+((b|10)<<3)>>2]=C;c[f+1024+((b|10)<<3)+4>>2]=A;A=bf(D^C,B^A,63)|0;c[f+1024+((b|5)<<3)>>2]=A;c[f+1024+((b|5)<<3)+4>>2]=z;q=ke(x,q,p,u)|0;x=z;y=bf(t^q,y^x,32)|0;t=z;w=ke(v,w,y,t)|0;v=z;u=bf(p^w,u^v,24)|0;p=z;x=ke(q,x,u,p)|0;q=z;c[f+1024+((b|1)<<3)>>2]=x;c[f+1024+((b|1)<<3)+4>>2]=q;q=bf(y^x,t^q,16)|0;t=z;c[f+1024+((b|12)<<3)>>2]=q;c[f+1024+((b|12)<<3)+4>>2]=t;t=ke(w,v,q,t)|0;q=z;c[f+1024+((b|11)<<3)>>2]=t;c[f+1024+((b|11)<<3)+4>>2]=q;q=bf(u^t,p^q,63)|0;c[f+1024+((b|6)<<3)>>2]=q;c[f+1024+((b|6)<<3)+4>>2]=z;h=ke(r,h,j,k)|0;r=z;s=bf(m^h,s^r,32)|0;m=z;q=ke(c[f+1024+((b|8)<<3)>>2]|0,c[f+1024+((b|8)<<3)+4>>2]|0,s,m)|0;p=z;k=bf(j^q,k^p,24)|0;j=z;r=ke(h,r,k,j)|0;h=z;c[f+1024+((b|2)<<3)>>2]=r;c[f+1024+((b|2)<<3)+4>>2]=h;h=bf(s^r,m^h,16)|0;m=z;c[f+1024+((b|13)<<3)>>2]=h;c[f+1024+((b|13)<<3)+4>>2]=m;m=ke(q,p,h,m)|0;h=z;c[f+1024+((b|8)<<3)>>2]=m;c[f+1024+((b|8)<<3)+4>>2]=h;h=bf(k^m,j^h,63)|0;c[f+1024+((b|7)<<3)>>2]=h;c[f+1024+((b|7)<<3)+4>>2]=z;h=c[f+1024+((b|4)<<3)>>2]|0;j=c[f+1024+((b|4)<<3)+4>>2]|0;g=ke(n,g,h,j)|0;n=z;o=bf(i^g,o^n,32)|0;i=z;m=ke(c[f+1024+((b|9)<<3)>>2]|0,c[f+1024+((b|9)<<3)+4>>2]|0,o,i)|0;k=z;j=bf(h^m,j^k,24)|0;h=z;n=ke(g,n,j,h)|0;g=z;c[f+1024+((b|3)<<3)>>2]=n;c[f+1024+((b|3)<<3)+4>>2]=g;g=bf(o^n,i^g,16)|0;i=z;c[f+1024+((b|14)<<3)>>2]=g;c[f+1024+((b|14)<<3)+4>>2]=i;i=ke(m,k,g,i)|0;g=z;c[f+1024+((b|9)<<3)>>2]=i;c[f+1024+((b|9)<<3)+4>>2]=g;g=bf(j^i,h^g,63)|0;c[f+1024+((b|4)<<3)>>2]=g;c[f+1024+((b|4)<<3)+4>>2]=z;a=a+1|0}while((a|0)!=8);a=0;do{H=a<<1;p=f+1024+(H+32<<3)|0;s=c[p>>2]|0;p=c[p+4>>2]|0;m=ke(c[f+1024+(H<<3)>>2]|0,c[f+1024+(H<<3)+4>>2]|0,s,p)|0;g=z;o=f+1024+(H+96<<3)|0;o=bf(c[o>>2]^m,c[o+4>>2]^g,32)|0;t=z;j=f+1024+(H+64<<3)|0;j=ke(c[j>>2]|0,c[j+4>>2]|0,o,t)|0;x=z;p=bf(s^j,p^x,24)|0;s=z;g=ke(m,g,p,s)|0;m=z;t=bf(o^g,t^m,16)|0;o=z;u=f+1024+(H+96<<3)|0;c[u>>2]=t;c[u+4>>2]=o;x=ke(j,x,t,o)|0;j=z;u=f+1024+(H+64<<3)|0;c[u>>2]=x;c[u+4>>2]=j;j=bf(p^x,s^j,63)|0;s=f+1024+(H+32<<3)|0;c[s>>2]=j;c[s+4>>2]=z;s=f+1024+(H+33<<3)|0;j=c[s>>2]|0;s=c[s+4>>2]|0;x=ke(c[f+1024+((H|1)<<3)>>2]|0,c[f+1024+((H|1)<<3)+4>>2]|0,j,s)|0;p=z;u=f+1024+(H+97<<3)|0;u=bf(c[u>>2]^x,c[u+4>>2]^p,32)|0;B=z;n=f+1024+(H+65<<3)|0;n=ke(c[n>>2]|0,c[n+4>>2]|0,u,B)|0;F=z;s=bf(j^n,s^F,24)|0;j=z;p=ke(x,p,s,j)|0;x=z;B=bf(u^p,B^x,16)|0;u=z;F=ke(n,F,B,u)|0;n=z;w=f+1024+(H+65<<3)|0;c[w>>2]=F;c[w+4>>2]=n;n=bf(s^F,j^n,63)|0;j=z;F=f+1024+(H+16<<3)|0;s=f+1024+(H+48<<3)|0;w=c[s>>2]|0;s=c[s+4>>2]|0;F=ke(c[F>>2]|0,c[F+4>>2]|0,w,s)|0;v=z;y=f+1024+(H+112<<3)|0;y=bf(c[y>>2]^F,c[y+4>>2]^v,32)|0;E=z;h=f+1024+(H+80<<3)|0;h=ke(c[h>>2]|0,c[h+4>>2]|0,y,E)|0;i=z;s=bf(w^h,s^i,24)|0;w=z;v=ke(F,v,s,w)|0;F=z;E=bf(y^v,E^F,16)|0;y=z;i=ke(h,i,E,y)|0;h=z;w=bf(s^i,w^h,63)|0;s=z;G=f+1024+(H+17<<3)|0;C=f+1024+(H+49<<3)|0;D=c[C>>2]|0;C=c[C+4>>2]|0;G=ke(c[G>>2]|0,c[G+4>>2]|0,D,C)|0;A=z;b=f+1024+(H+113<<3)|0;b=bf(c[b>>2]^G,c[b+4>>2]^A,32)|0;k=z;q=f+1024+(H+81<<3)|0;q=ke(c[q>>2]|0,c[q+4>>2]|0,b,k)|0;r=z;C=bf(D^q,C^r,24)|0;D=z;A=ke(G,A,C,D)|0;G=z;k=bf(b^A,k^G,16)|0;b=z;r=ke(q,r,k,b)|0;q=z;D=bf(C^r,D^q,63)|0;C=z;m=ke(g,m,n,j)|0;g=z;b=bf(k^m,b^g,32)|0;k=z;h=ke(i,h,b,k)|0;i=z;j=bf(n^h,j^i,24)|0;n=z;g=ke(m,g,j,n)|0;m=z;c[f+1024+(H<<3)>>2]=g;c[f+1024+(H<<3)+4>>2]=m;m=bf(b^g,k^m,16)|0;k=z;g=f+1024+(H+113<<3)|0;c[g>>2]=m;c[g+4>>2]=k;k=ke(h,i,m,k)|0;m=z;i=f+1024+(H+80<<3)|0;c[i>>2]=k;c[i+4>>2]=m;m=bf(j^k,n^m,63)|0;n=f+1024+(H+33<<3)|0;c[n>>2]=m;c[n+4>>2]=z;x=ke(p,x,w,s)|0;p=z;o=bf(t^x,o^p,32)|0;t=z;q=ke(r,q,o,t)|0;r=z;s=bf(w^q,s^r,24)|0;w=z;p=ke(x,p,s,w)|0;x=z;c[f+1024+((H|1)<<3)>>2]=p;c[f+1024+((H|1)<<3)+4>>2]=x;x=bf(o^p,t^x,16)|0;t=z;p=f+1024+(H+96<<3)|0;c[p>>2]=x;c[p+4>>2]=t;t=ke(q,r,x,t)|0;x=z;r=f+1024+(H+81<<3)|0;c[r>>2]=t;c[r+4>>2]=x;x=bf(s^t,w^x,63)|0;w=f+1024+(H+48<<3)|0;c[w>>2]=x;c[w+4>>2]=z;F=ke(v,F,D,C)|0;v=z;u=bf(B^F,u^v,32)|0;B=z;w=f+1024+(H+64<<3)|0;w=ke(c[w>>2]|0,c[w+4>>2]|0,u,B)|0;x=z;C=bf(D^w,C^x,24)|0;D=z;v=ke(F,v,C,D)|0;F=z;t=f+1024+(H+16<<3)|0;c[t>>2]=v;c[t+4>>2]=F;F=bf(u^v,B^F,16)|0;B=z;v=f+1024+(H+97<<3)|0;c[v>>2]=F;c[v+4>>2]=B;B=ke(w,x,F,B)|0;F=z;x=f+1024+(H+64<<3)|0;c[x>>2]=B;c[x+4>>2]=F;F=bf(C^B,D^F,63)|0;D=f+1024+(H+49<<3)|0;c[D>>2]=F;c[D+4>>2]=z;D=f+1024+(H+32<<3)|0;F=c[D>>2]|0;D=c[D+4>>2]|0;G=ke(A,G,F,D)|0;A=z;y=bf(E^G,y^A,32)|0;E=z;B=f+1024+(H+65<<3)|0;B=ke(c[B>>2]|0,c[B+4>>2]|0,y,E)|0;C=z;D=bf(F^B,D^C,24)|0;F=z;A=ke(G,A,D,F)|0;G=z;x=f+1024+(H+17<<3)|0;c[x>>2]=A;c[x+4>>2]=G;G=bf(y^A,E^G,16)|0;E=z;A=f+1024+(H+112<<3)|0;c[A>>2]=G;c[A+4>>2]=E;E=ke(B,C,G,E)|0;G=z;C=f+1024+(H+65<<3)|0;c[C>>2]=E;c[C+4>>2]=G;G=bf(D^E,F^G,63)|0;H=f+1024+(H+32<<3)|0;c[H>>2]=G;c[H+4>>2]=z;a=a+1|0}while((a|0)!=8);Dh(d,f);ae(d,f+1024|0);l=e;return}function na(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;e=l;f=l=l+63&-64;l=l+2048|0;Dh(f+1024|0,b);ae(f+1024|0,a);Dh(f,f+1024|0);a=0;do{b=a<<4;u=c[f+1024+((b|4)<<3)>>2]|0;x=c[f+1024+((b|4)<<3)+4>>2]|0;A=ke(c[f+1024+(b<<3)>>2]|0,c[f+1024+(b<<3)+4>>2]|0,u,x)|0;G=z;y=bf(c[f+1024+((b|12)<<3)>>2]^A,c[f+1024+((b|12)<<3)+4>>2]^G,32)|0;t=z;D=ke(c[f+1024+((b|8)<<3)>>2]|0,c[f+1024+((b|8)<<3)+4>>2]|0,y,t)|0;q=z;x=bf(u^D,x^q,24)|0;u=z;G=ke(A,G,x,u)|0;A=z;t=bf(y^G,t^A,16)|0;y=z;c[f+1024+((b|12)<<3)>>2]=t;c[f+1024+((b|12)<<3)+4>>2]=y;q=ke(D,q,t,y)|0;D=z;c[f+1024+((b|8)<<3)>>2]=q;c[f+1024+((b|8)<<3)+4>>2]=D;D=bf(x^q,u^D,63)|0;c[f+1024+((b|4)<<3)>>2]=D;c[f+1024+((b|4)<<3)+4>>2]=z;D=c[f+1024+((b|5)<<3)>>2]|0;u=c[f+1024+((b|5)<<3)+4>>2]|0;q=ke(c[f+1024+((b|1)<<3)>>2]|0,c[f+1024+((b|1)<<3)+4>>2]|0,D,u)|0;x=z;s=bf(c[f+1024+((b|13)<<3)>>2]^q,c[f+1024+((b|13)<<3)+4>>2]^x,32)|0;m=z;B=ke(c[f+1024+((b|9)<<3)>>2]|0,c[f+1024+((b|9)<<3)+4>>2]|0,s,m)|0;p=z;u=bf(D^B,u^p,24)|0;D=z;x=ke(q,x,u,D)|0;q=z;m=bf(s^x,m^q,16)|0;s=z;p=ke(B,p,m,s)|0;B=z;c[f+1024+((b|9)<<3)>>2]=p;c[f+1024+((b|9)<<3)+4>>2]=B;B=bf(u^p,D^B,63)|0;D=z;p=c[f+1024+((b|6)<<3)>>2]|0;u=c[f+1024+((b|6)<<3)+4>>2]|0;h=ke(c[f+1024+((b|2)<<3)>>2]|0,c[f+1024+((b|2)<<3)+4>>2]|0,p,u)|0;r=z;o=bf(c[f+1024+((b|14)<<3)>>2]^h,c[f+1024+((b|14)<<3)+4>>2]^r,32)|0;i=z;F=ke(c[f+1024+((b|10)<<3)>>2]|0,c[f+1024+((b|10)<<3)+4>>2]|0,o,i)|0;E=z;u=bf(p^F,u^E,24)|0;p=z;r=ke(h,r,u,p)|0;h=z;i=bf(o^r,i^h,16)|0;o=z;E=ke(F,E,i,o)|0;F=z;p=bf(u^E,p^F,63)|0;u=z;j=c[f+1024+((b|7)<<3)>>2]|0;k=c[f+1024+((b|7)<<3)+4>>2]|0;g=ke(c[f+1024+((b|3)<<3)>>2]|0,c[f+1024+((b|3)<<3)+4>>2]|0,j,k)|0;n=z;H=bf(c[f+1024+((b|15)<<3)>>2]^g,c[f+1024+((b|15)<<3)+4>>2]^n,32)|0;C=z;w=ke(c[f+1024+((b|11)<<3)>>2]|0,c[f+1024+((b|11)<<3)+4>>2]|0,H,C)|0;v=z;k=bf(j^w,k^v,24)|0;j=z;n=ke(g,n,k,j)|0;g=z;C=bf(H^n,C^g,16)|0;H=z;v=ke(w,v,C,H)|0;w=z;j=bf(k^v,j^w,63)|0;k=z;A=ke(G,A,B,D)|0;G=z;H=bf(C^A,H^G,32)|0;C=z;F=ke(E,F,H,C)|0;E=z;D=bf(B^F,D^E,24)|0;B=z;G=ke(A,G,D,B)|0;A=z;c[f+1024+(b<<3)>>2]=G;c[f+1024+(b<<3)+4>>2]=A;A=bf(H^G,C^A,16)|0;C=z;c[f+1024+((b|15)<<3)>>2]=A;c[f+1024+((b|15)<<3)+4>>2]=C;C=ke(F,E,A,C)|0;A=z;c[f+1024+((b|10)<<3)>>2]=C;c[f+1024+((b|10)<<3)+4>>2]=A;A=bf(D^C,B^A,63)|0;c[f+1024+((b|5)<<3)>>2]=A;c[f+1024+((b|5)<<3)+4>>2]=z;q=ke(x,q,p,u)|0;x=z;y=bf(t^q,y^x,32)|0;t=z;w=ke(v,w,y,t)|0;v=z;u=bf(p^w,u^v,24)|0;p=z;x=ke(q,x,u,p)|0;q=z;c[f+1024+((b|1)<<3)>>2]=x;c[f+1024+((b|1)<<3)+4>>2]=q;q=bf(y^x,t^q,16)|0;t=z;c[f+1024+((b|12)<<3)>>2]=q;c[f+1024+((b|12)<<3)+4>>2]=t;t=ke(w,v,q,t)|0;q=z;c[f+1024+((b|11)<<3)>>2]=t;c[f+1024+((b|11)<<3)+4>>2]=q;q=bf(u^t,p^q,63)|0;c[f+1024+((b|6)<<3)>>2]=q;c[f+1024+((b|6)<<3)+4>>2]=z;h=ke(r,h,j,k)|0;r=z;s=bf(m^h,s^r,32)|0;m=z;q=ke(c[f+1024+((b|8)<<3)>>2]|0,c[f+1024+((b|8)<<3)+4>>2]|0,s,m)|0;p=z;k=bf(j^q,k^p,24)|0;j=z;r=ke(h,r,k,j)|0;h=z;c[f+1024+((b|2)<<3)>>2]=r;c[f+1024+((b|2)<<3)+4>>2]=h;h=bf(s^r,m^h,16)|0;m=z;c[f+1024+((b|13)<<3)>>2]=h;c[f+1024+((b|13)<<3)+4>>2]=m;m=ke(q,p,h,m)|0;h=z;c[f+1024+((b|8)<<3)>>2]=m;c[f+1024+((b|8)<<3)+4>>2]=h;h=bf(k^m,j^h,63)|0;c[f+1024+((b|7)<<3)>>2]=h;c[f+1024+((b|7)<<3)+4>>2]=z;h=c[f+1024+((b|4)<<3)>>2]|0;j=c[f+1024+((b|4)<<3)+4>>2]|0;g=ke(n,g,h,j)|0;n=z;o=bf(i^g,o^n,32)|0;i=z;m=ke(c[f+1024+((b|9)<<3)>>2]|0,c[f+1024+((b|9)<<3)+4>>2]|0,o,i)|0;k=z;j=bf(h^m,j^k,24)|0;h=z;n=ke(g,n,j,h)|0;g=z;c[f+1024+((b|3)<<3)>>2]=n;c[f+1024+((b|3)<<3)+4>>2]=g;g=bf(o^n,i^g,16)|0;i=z;c[f+1024+((b|14)<<3)>>2]=g;c[f+1024+((b|14)<<3)+4>>2]=i;i=ke(m,k,g,i)|0;g=z;c[f+1024+((b|9)<<3)>>2]=i;c[f+1024+((b|9)<<3)+4>>2]=g;g=bf(j^i,h^g,63)|0;c[f+1024+((b|4)<<3)>>2]=g;c[f+1024+((b|4)<<3)+4>>2]=z;a=a+1|0}while((a|0)!=8);a=0;do{H=a<<1;p=f+1024+(H+32<<3)|0;s=c[p>>2]|0;p=c[p+4>>2]|0;m=ke(c[f+1024+(H<<3)>>2]|0,c[f+1024+(H<<3)+4>>2]|0,s,p)|0;g=z;o=f+1024+(H+96<<3)|0;o=bf(c[o>>2]^m,c[o+4>>2]^g,32)|0;t=z;j=f+1024+(H+64<<3)|0;j=ke(c[j>>2]|0,c[j+4>>2]|0,o,t)|0;x=z;p=bf(s^j,p^x,24)|0;s=z;g=ke(m,g,p,s)|0;m=z;t=bf(o^g,t^m,16)|0;o=z;u=f+1024+(H+96<<3)|0;c[u>>2]=t;c[u+4>>2]=o;x=ke(j,x,t,o)|0;j=z;u=f+1024+(H+64<<3)|0;c[u>>2]=x;c[u+4>>2]=j;j=bf(p^x,s^j,63)|0;s=f+1024+(H+32<<3)|0;c[s>>2]=j;c[s+4>>2]=z;s=f+1024+(H+33<<3)|0;j=c[s>>2]|0;s=c[s+4>>2]|0;x=ke(c[f+1024+((H|1)<<3)>>2]|0,c[f+1024+((H|1)<<3)+4>>2]|0,j,s)|0;p=z;u=f+1024+(H+97<<3)|0;u=bf(c[u>>2]^x,c[u+4>>2]^p,32)|0;B=z;n=f+1024+(H+65<<3)|0;n=ke(c[n>>2]|0,c[n+4>>2]|0,u,B)|0;F=z;s=bf(j^n,s^F,24)|0;j=z;p=ke(x,p,s,j)|0;x=z;B=bf(u^p,B^x,16)|0;u=z;F=ke(n,F,B,u)|0;n=z;w=f+1024+(H+65<<3)|0;c[w>>2]=F;c[w+4>>2]=n;n=bf(s^F,j^n,63)|0;j=z;F=f+1024+(H+16<<3)|0;s=f+1024+(H+48<<3)|0;w=c[s>>2]|0;s=c[s+4>>2]|0;F=ke(c[F>>2]|0,c[F+4>>2]|0,w,s)|0;v=z;y=f+1024+(H+112<<3)|0;y=bf(c[y>>2]^F,c[y+4>>2]^v,32)|0;E=z;h=f+1024+(H+80<<3)|0;h=ke(c[h>>2]|0,c[h+4>>2]|0,y,E)|0;i=z;s=bf(w^h,s^i,24)|0;w=z;v=ke(F,v,s,w)|0;F=z;E=bf(y^v,E^F,16)|0;y=z;i=ke(h,i,E,y)|0;h=z;w=bf(s^i,w^h,63)|0;s=z;G=f+1024+(H+17<<3)|0;C=f+1024+(H+49<<3)|0;D=c[C>>2]|0;C=c[C+4>>2]|0;G=ke(c[G>>2]|0,c[G+4>>2]|0,D,C)|0;A=z;b=f+1024+(H+113<<3)|0;b=bf(c[b>>2]^G,c[b+4>>2]^A,32)|0;k=z;q=f+1024+(H+81<<3)|0;q=ke(c[q>>2]|0,c[q+4>>2]|0,b,k)|0;r=z;C=bf(D^q,C^r,24)|0;D=z;A=ke(G,A,C,D)|0;G=z;k=bf(b^A,k^G,16)|0;b=z;r=ke(q,r,k,b)|0;q=z;D=bf(C^r,D^q,63)|0;C=z;m=ke(g,m,n,j)|0;g=z;b=bf(k^m,b^g,32)|0;k=z;h=ke(i,h,b,k)|0;i=z;j=bf(n^h,j^i,24)|0;n=z;g=ke(m,g,j,n)|0;m=z;c[f+1024+(H<<3)>>2]=g;c[f+1024+(H<<3)+4>>2]=m;m=bf(b^g,k^m,16)|0;k=z;g=f+1024+(H+113<<3)|0;c[g>>2]=m;c[g+4>>2]=k;k=ke(h,i,m,k)|0;m=z;i=f+1024+(H+80<<3)|0;c[i>>2]=k;c[i+4>>2]=m;m=bf(j^k,n^m,63)|0;n=f+1024+(H+33<<3)|0;c[n>>2]=m;c[n+4>>2]=z;x=ke(p,x,w,s)|0;p=z;o=bf(t^x,o^p,32)|0;t=z;q=ke(r,q,o,t)|0;r=z;s=bf(w^q,s^r,24)|0;w=z;p=ke(x,p,s,w)|0;x=z;c[f+1024+((H|1)<<3)>>2]=p;c[f+1024+((H|1)<<3)+4>>2]=x;x=bf(o^p,t^x,16)|0;t=z;p=f+1024+(H+96<<3)|0;c[p>>2]=x;c[p+4>>2]=t;t=ke(q,r,x,t)|0;x=z;r=f+1024+(H+81<<3)|0;c[r>>2]=t;c[r+4>>2]=x;x=bf(s^t,w^x,63)|0;w=f+1024+(H+48<<3)|0;c[w>>2]=x;c[w+4>>2]=z;F=ke(v,F,D,C)|0;v=z;u=bf(B^F,u^v,32)|0;B=z;w=f+1024+(H+64<<3)|0;w=ke(c[w>>2]|0,c[w+4>>2]|0,u,B)|0;x=z;C=bf(D^w,C^x,24)|0;D=z;v=ke(F,v,C,D)|0;F=z;t=f+1024+(H+16<<3)|0;c[t>>2]=v;c[t+4>>2]=F;F=bf(u^v,B^F,16)|0;B=z;v=f+1024+(H+97<<3)|0;c[v>>2]=F;c[v+4>>2]=B;B=ke(w,x,F,B)|0;F=z;x=f+1024+(H+64<<3)|0;c[x>>2]=B;c[x+4>>2]=F;F=bf(C^B,D^F,63)|0;D=f+1024+(H+49<<3)|0;c[D>>2]=F;c[D+4>>2]=z;D=f+1024+(H+32<<3)|0;F=c[D>>2]|0;D=c[D+4>>2]|0;G=ke(A,G,F,D)|0;A=z;y=bf(E^G,y^A,32)|0;E=z;B=f+1024+(H+65<<3)|0;B=ke(c[B>>2]|0,c[B+4>>2]|0,y,E)|0;C=z;D=bf(F^B,D^C,24)|0;F=z;A=ke(G,A,D,F)|0;G=z;x=f+1024+(H+17<<3)|0;c[x>>2]=A;c[x+4>>2]=G;G=bf(y^A,E^G,16)|0;E=z;A=f+1024+(H+112<<3)|0;c[A>>2]=G;c[A+4>>2]=E;E=ke(B,C,G,E)|0;G=z;C=f+1024+(H+65<<3)|0;c[C>>2]=E;c[C+4>>2]=G;G=bf(D^E,F^G,63)|0;H=f+1024+(H+32<<3)|0;c[H>>2]=G;c[H+4>>2]=z;a=a+1|0}while((a|0)!=8);Dh(d,f);ae(d,f+1024|0);l=e;return}function oa(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0;l=c[b>>2]|0;n=c[b+4>>2]|0;k=c[b+8>>2]|0;f=c[b+12>>2]|0;u=c[b+16>>2]|0;t=c[b+20>>2]|0;g=c[b+24>>2]|0;v=c[b+28>>2]|0;s=c[b+32>>2]|0;q=c[b+36>>2]|0;cb=ef(l|0,((l|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;bb=z;o=((l<<1|0)<0)<<31>>31;Ua=ef(l<<1|0,o|0,n|0,((n|0)<0)<<31>>31|0)|0;Ta=z;Oa=ef(k|0,((k|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Na=z;Ea=ef(f|0,((f|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Da=z;sa=ef(u|0,((u|0)<0)<<31>>31|0,l<<1|0,o|0)|0;ra=z;ia=ef(t|0,((t|0)<0)<<31>>31|0,l<<1|0,o|0)|0;ha=z;_=ef(g|0,((g|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Z=z;Q=ef(v|0,((v|0)<0)<<31>>31|0,l<<1|0,o|0)|0;P=z;G=ef(s|0,((s|0)<0)<<31>>31|0,l<<1|0,o|0)|0;F=z;o=ef(q|0,((q|0)<0)<<31>>31|0,l<<1|0,o|0)|0;l=z;p=((n<<1|0)<0)<<31>>31;Ma=ef(n<<1|0,p|0,n|0,((n|0)<0)<<31>>31|0)|0;La=z;Ca=ef(n<<1|0,p|0,k|0,((k|0)<0)<<31>>31|0)|0;Ba=z;w=((f<<1|0)<0)<<31>>31;wa=ef(f<<1|0,w|0,n<<1|0,p|0)|0;va=z;ma=ef(u|0,((u|0)<0)<<31>>31|0,n<<1|0,p|0)|0;la=z;aa=ef(t<<1|0,((t<<1|0)<0)<<31>>31|0,n<<1|0,p|0)|0;$=z;S=ef(g|0,((g|0)<0)<<31>>31|0,n<<1|0,p|0)|0;R=z;I=ef(v<<1|0,((v<<1|0)<0)<<31>>31|0,n<<1|0,p|0)|0;H=z;m=ef(s|0,((s|0)<0)<<31>>31|0,n<<1|0,p|0)|0;r=z;b=((q*38|0)<0)<<31>>31;p=ef(q*38|0,b|0,n<<1|0,p|0)|0;n=z;ua=ef(k|0,((k|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;ta=z;ka=ef(k<<1|0,((k<<1|0)<0)<<31>>31|0,f|0,((f|0)<0)<<31>>31|0)|0;ja=z;ca=ef(u|0,((u|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;ba=z;W=ef(t|0,((t|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;V=z;O=ef(g|0,((g|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;N=z;A=ef(v|0,((v|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;y=z;Y=((s*19|0)<0)<<31>>31;Ya=ef(s*19|0,Y|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;Xa=z;k=ef(q*38|0,b|0,k|0,((k|0)<0)<<31>>31|0)|0;j=z;ea=ef(f<<1|0,w|0,f|0,((f|0)<0)<<31>>31|0)|0;da=z;U=ef(f<<1|0,w|0,u|0,((u|0)<0)<<31>>31|0)|0;T=z;K=ef(t<<1|0,((t<<1|0)<0)<<31>>31|0,f<<1|0,w|0)|0;J=z;E=ef(g|0,((g|0)<0)<<31>>31|0,f<<1|0,w|0)|0;D=z;qa=((v*38|0)<0)<<31>>31;_a=ef(v*38|0,qa|0,f<<1|0,w|0)|0;Za=z;Qa=ef(s*19|0,Y|0,f<<1|0,w|0)|0;Pa=z;w=ef(q*38|0,b|0,f<<1|0,w|0)|0;f=z;M=ef(u|0,((u|0)<0)<<31>>31|0,u|0,((u|0)<0)<<31>>31|0)|0;L=z;C=ef(u<<1|0,((u<<1|0)<0)<<31>>31|0,t|0,((t|0)<0)<<31>>31|0)|0;B=z;ab=ef(g*19|0,((g*19|0)<0)<<31>>31|0,u<<1|0,((u<<1|0)<0)<<31>>31|0)|0;$a=z;Sa=ef(v*38|0,qa|0,u|0,((u|0)<0)<<31>>31|0)|0;Ra=z;Ga=ef(s*19|0,Y|0,u<<1|0,((u<<1|0)<0)<<31>>31|0)|0;Fa=z;u=ef(q*38|0,b|0,u|0,((u|0)<0)<<31>>31|0)|0;e=z;eb=ef(t*38|0,((t*38|0)<0)<<31>>31|0,t|0,((t|0)<0)<<31>>31|0)|0;db=z;Wa=ef(g*19|0,((g*19|0)<0)<<31>>31|0,t<<1|0,((t<<1|0)<0)<<31>>31|0)|0;Va=z;Ia=ef(v*38|0,qa|0,t<<1|0,((t<<1|0)<0)<<31>>31|0)|0;Ha=z;ya=ef(s*19|0,Y|0,t<<1|0,((t<<1|0)<0)<<31>>31|0)|0;xa=z;t=ef(q*38|0,b|0,t<<1|0,((t<<1|0)<0)<<31>>31|0)|0;d=z;Ka=ef(g*19|0,((g*19|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;Ja=z;Aa=ef(v*38|0,qa|0,g|0,((g|0)<0)<<31>>31|0)|0;za=z;oa=ef(s*19|0,Y|0,g<<1|0,((g<<1|0)<0)<<31>>31|0)|0;na=z;g=ef(q*38|0,b|0,g|0,((g|0)<0)<<31>>31|0)|0;x=z;qa=ef(v*38|0,qa|0,v|0,((v|0)<0)<<31>>31|0)|0;pa=z;ga=ef(s*19|0,Y|0,v<<1|0,((v<<1|0)<0)<<31>>31|0)|0;fa=z;v=ef(q*38|0,b|0,v<<1|0,((v<<1|0)<0)<<31>>31|0)|0;i=z;Y=ef(s*19|0,Y|0,s|0,((s|0)<0)<<31>>31|0)|0;X=z;s=ef(q*38|0,b|0,s|0,((s|0)<0)<<31>>31|0)|0;h=z;q=ef(q*38|0,b|0,q|0,((q|0)<0)<<31>>31|0)|0;b=z;bb=lg(eb|0,db|0,cb|0,bb|0)|0;$a=lg(bb|0,z|0,ab|0,$a|0)|0;Za=lg($a|0,z|0,_a|0,Za|0)|0;Xa=lg(Za|0,z|0,Ya|0,Xa|0)|0;n=lg(Xa|0,z|0,p|0,n|0)|0;p=z;Ta=lg(Wa|0,Va|0,Ua|0,Ta|0)|0;Ra=lg(Ta|0,z|0,Sa|0,Ra|0)|0;Pa=lg(Ra|0,z|0,Qa|0,Pa|0)|0;j=lg(Pa|0,z|0,k|0,j|0)|0;k=z;La=lg(Oa|0,Na|0,Ma|0,La|0)|0;Ja=lg(La|0,z|0,Ka|0,Ja|0)|0;Ha=lg(Ja|0,z|0,Ia|0,Ha|0)|0;Fa=lg(Ha|0,z|0,Ga|0,Fa|0)|0;f=lg(Fa|0,z|0,w|0,f|0)|0;w=z;Ba=lg(Ea|0,Da|0,Ca|0,Ba|0)|0;za=lg(Ba|0,z|0,Aa|0,za|0)|0;xa=lg(za|0,z|0,ya|0,xa|0)|0;e=lg(xa|0,z|0,u|0,e|0)|0;u=z;ta=lg(wa|0,va|0,ua|0,ta|0)|0;ra=lg(ta|0,z|0,sa|0,ra|0)|0;pa=lg(ra|0,z|0,qa|0,pa|0)|0;na=lg(pa|0,z|0,oa|0,na|0)|0;d=lg(na|0,z|0,t|0,d|0)|0;t=z;ja=lg(ma|0,la|0,ka|0,ja|0)|0;ha=lg(ja|0,z|0,ia|0,ha|0)|0;fa=lg(ha|0,z|0,ga|0,fa|0)|0;x=lg(fa|0,z|0,g|0,x|0)|0;g=z;ba=lg(ea|0,da|0,ca|0,ba|0)|0;$=lg(ba|0,z|0,aa|0,$|0)|0;Z=lg($|0,z|0,_|0,Z|0)|0;X=lg(Z|0,z|0,Y|0,X|0)|0;i=lg(X|0,z|0,v|0,i|0)|0;v=z;T=lg(W|0,V|0,U|0,T|0)|0;R=lg(T|0,z|0,S|0,R|0)|0;P=lg(R|0,z|0,Q|0,P|0)|0;h=lg(P|0,z|0,s|0,h|0)|0;s=z;L=lg(O|0,N|0,M|0,L|0)|0;J=lg(L|0,z|0,K|0,J|0)|0;H=lg(J|0,z|0,I|0,H|0)|0;F=lg(H|0,z|0,G|0,F|0)|0;b=lg(F|0,z|0,q|0,b|0)|0;q=z;B=lg(E|0,D|0,C|0,B|0)|0;y=lg(B|0,z|0,A|0,y|0)|0;r=lg(y|0,z|0,m|0,r|0)|0;l=lg(r|0,z|0,o|0,l|0)|0;o=z;p=zf(n|0,p|0,1)|0;n=z;k=zf(j|0,k|0,1)|0;j=z;w=zf(f|0,w|0,1)|0;f=z;u=zf(e|0,u|0,1)|0;e=z;t=zf(d|0,t|0,1)|0;d=z;g=zf(x|0,g|0,1)|0;x=z;v=zf(i|0,v|0,1)|0;i=z;s=zf(h|0,s|0,1)|0;h=z;q=zf(b|0,q|0,1)|0;b=z;o=zf(l|0,o|0,1)|0;l=z;r=lg(p|0,n|0,33554432,0)|0;r=$e(r|0,z|0,26)|0;m=z;j=lg(r|0,m|0,k|0,j|0)|0;k=z;m=zf(r|0,m|0,26)|0;m=ig(p|0,n|0,m|0,z|0)|0;n=z;p=lg(t|0,d|0,33554432,0)|0;p=$e(p|0,z|0,26)|0;r=z;x=lg(p|0,r|0,g|0,x|0)|0;g=z;r=zf(p|0,r|0,26)|0;r=ig(t|0,d|0,r|0,z|0)|0;d=z;t=lg(j|0,k|0,16777216,0)|0;t=$e(t|0,z|0,25)|0;p=z;f=lg(t|0,p|0,w|0,f|0)|0;w=z;p=zf(t|0,p|0,25)|0;p=ig(j|0,k|0,p|0,z|0)|0;k=z;j=lg(x|0,g|0,16777216,0)|0;j=$e(j|0,z|0,25)|0;t=z;i=lg(j|0,t|0,v|0,i|0)|0;v=z;t=zf(j|0,t|0,25)|0;t=ig(x|0,g|0,t|0,z|0)|0;g=z;x=lg(f|0,w|0,33554432,0)|0;x=$e(x|0,z|0,26)|0;j=z;e=lg(x|0,j|0,u|0,e|0)|0;u=z;j=zf(x|0,j|0,26)|0;j=ig(f|0,w|0,j|0,z|0)|0;w=lg(i|0,v|0,33554432,0)|0;w=$e(w|0,z|0,26)|0;f=z;h=lg(w|0,f|0,s|0,h|0)|0;s=z;f=zf(w|0,f|0,26)|0;f=ig(i|0,v|0,f|0,z|0)|0;v=lg(e|0,u|0,16777216,0)|0;v=$e(v|0,z|0,25)|0;i=z;d=lg(v|0,i|0,r|0,d|0)|0;r=z;i=zf(v|0,i|0,25)|0;i=ig(e|0,u|0,i|0,z|0)|0;u=lg(h|0,s|0,16777216,0)|0;u=$e(u|0,z|0,25)|0;e=z;b=lg(u|0,e|0,q|0,b|0)|0;q=z;e=zf(u|0,e|0,25)|0;e=ig(h|0,s|0,e|0,z|0)|0;s=lg(d|0,r|0,33554432,0)|0;s=$e(s|0,z|0,26)|0;h=z;g=lg(t|0,g|0,s|0,h|0)|0;h=zf(s|0,h|0,26)|0;h=ig(d|0,r|0,h|0,z|0)|0;r=lg(b|0,q|0,33554432,0)|0;r=$e(r|0,z|0,26)|0;d=z;l=lg(r|0,d|0,o|0,l|0)|0;o=z;d=zf(r|0,d|0,26)|0;d=ig(b|0,q|0,d|0,z|0)|0;q=lg(l|0,o|0,16777216,0)|0;q=$e(q|0,z|0,25)|0;b=z;r=ef(q|0,b|0,19,0)|0;n=lg(r|0,z|0,m|0,n|0)|0;m=z;b=zf(q|0,b|0,25)|0;b=ig(l|0,o|0,b|0,z|0)|0;o=lg(n|0,m|0,33554432,0)|0;o=$e(o|0,z|0,26)|0;l=z;k=lg(p|0,k|0,o|0,l|0)|0;l=zf(o|0,l|0,26)|0;l=ig(n|0,m|0,l|0,z|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=d;c[a+36>>2]=b;return}function pa(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;xf(d,b);c[e>>2]=c[a>>2];c[e+4>>2]=c[a+4>>2];c[e+8>>2]=c[a+8>>2];c[e+12>>2]=c[a+12>>2];c[e+16>>2]=c[a+16>>2];c[e+20>>2]=c[a+20>>2];c[e+24>>2]=c[a+24>>2];c[e+28>>2]=c[a+28>>2];s=0;b=c[d>>2]|0;while(1){w=c[e+16>>2]|0;m=Jh(w,6)|0;m=(Jh(w,11)|0)^m;m=m^(Jh(w,25)|0);k=c[e+20>>2]|0;j=c[e+24>>2]|0;m=b+m+(c[32984+(s<<2)>>2]|0)+((j^k)&w^j)+(c[e+28>>2]|0)|0;l=m+(c[e+12>>2]|0)|0;c[e+12>>2]=l;i=c[e>>2]|0;v=Jh(i,2)|0;v=(Jh(i,13)|0)^v;v=v^(Jh(i,22)|0);h=c[e+4>>2]|0;g=c[e+8>>2]|0;c[e+28>>2]=m+v+((g|h)&i|g&h);u=Jh(l,6)|0;u=(Jh(l,11)|0)^u;u=u^(Jh(l,25)|0);q=s|1;j=(c[d+(q<<2)>>2]|0)+u+(c[32984+(q<<2)>>2]|0)+((k^w)&l^k)+j|0;c[e+8>>2]=j+g;u=Jh(m+v+((g|h)&i|g&h)|0,2)|0;u=(Jh(m+v+((g|h)&i|g&h)|0,13)|0)^u;u=j+(u^(Jh(m+v+((g|h)&i|g&h)|0,22)|0))+((h|i)&m+v+((g|h)&i|g&h)|h&i)|0;c[e+24>>2]=u;f=Jh(j+g|0,6)|0;f=(Jh(j+g|0,11)|0)^f;f=f^(Jh(j+g|0,25)|0);r=s|2;k=(c[d+(r<<2)>>2]|0)+f+(c[32984+(r<<2)>>2]|0)+((w^l)&j+g^w)+k|0;c[e+4>>2]=k+h;w=Jh(u,2)|0;w=(Jh(u,13)|0)^w;w=k+(w^(Jh(u,22)|0))+((i|m+v+((g|h)&i|g&h))&u|i&m+v+((g|h)&i|g&h))|0;c[e+20>>2]=w;f=Jh(k+h|0,6)|0;f=(Jh(k+h|0,11)|0)^f;f=f^(Jh(k+h|0,25)|0);b=s|3;l=(c[d+(b<<2)>>2]|0)+f+(c[32984+(b<<2)>>2]|0)+((l^j+g)&k+h^l)+(c[e+16>>2]|0)|0;c[e>>2]=l+i;f=Jh(w,2)|0;f=(Jh(w,13)|0)^f;v=l+(f^(Jh(w,22)|0))+((m+v+((g|h)&i|g&h)|u)&w|m+v+((g|h)&i|g&h)&u)|0;c[e+16>>2]=v;m=Jh(l+i|0,6)|0;m=(Jh(l+i|0,11)|0)^m;m=m^(Jh(l+i|0,25)|0);f=s|4;g=(c[d+(f<<2)>>2]|0)+m+(c[32984+(f<<2)>>2]|0)+((j+g^k+h)&l+i^j+g)+(c[e+12>>2]|0)|0;j=g+(c[e+28>>2]|0)|0;c[e+28>>2]=j;m=Jh(v,2)|0;m=(Jh(v,13)|0)^m;u=g+(m^(Jh(v,22)|0))+((u|w)&v|u&w)|0;c[e+12>>2]=u;m=Jh(j,6)|0;m=(Jh(j,11)|0)^m;m=m^(Jh(j,25)|0);g=s|5;h=(c[d+(g<<2)>>2]|0)+m+(c[32984+(g<<2)>>2]|0)+((k+h^l+i)&j^k+h)+(c[e+8>>2]|0)|0;k=h+(c[e+24>>2]|0)|0;c[e+24>>2]=k;m=Jh(u,2)|0;m=(Jh(u,13)|0)^m;w=h+(m^(Jh(u,22)|0))+((w|v)&u|w&v)|0;c[e+8>>2]=w;m=Jh(k,6)|0;m=(Jh(k,11)|0)^m;m=m^(Jh(k,25)|0);h=s|6;i=(c[d+(h<<2)>>2]|0)+m+(c[32984+(h<<2)>>2]|0)+((l+i^j)&k^l+i)+(c[e+4>>2]|0)|0;l=i+(c[e+20>>2]|0)|0;c[e+20>>2]=l;m=Jh(w,2)|0;m=(Jh(w,13)|0)^m;v=i+(m^(Jh(w,22)|0))+((v|u)&w|v&u)|0;c[e+4>>2]=v;m=Jh(l,6)|0;m=(Jh(l,11)|0)^m;m=m^(Jh(l,25)|0);i=s|7;j=(c[d+(i<<2)>>2]|0)+m+(c[32984+(i<<2)>>2]|0)+((j^k)&l^j)+(c[e>>2]|0)|0;m=j+(c[e+16>>2]|0)|0;c[e+16>>2]=m;n=Jh(v,2)|0;n=(Jh(v,13)|0)^n;u=j+(n^(Jh(v,22)|0))+((u|w)&v|u&w)|0;c[e>>2]=u;n=Jh(m,6)|0;n=(Jh(m,11)|0)^n;n=n^(Jh(m,25)|0);j=s|8;k=(c[d+(j<<2)>>2]|0)+n+(c[32984+(j<<2)>>2]|0)+((k^l)&m^k)+(c[e+28>>2]|0)|0;n=k+(c[e+12>>2]|0)|0;c[e+12>>2]=n;o=Jh(u,2)|0;o=(Jh(u,13)|0)^o;w=k+(o^(Jh(u,22)|0))+((w|v)&u|w&v)|0;c[e+28>>2]=w;o=Jh(n,6)|0;o=(Jh(n,11)|0)^o;o=o^(Jh(n,25)|0);k=s|9;l=(c[d+(k<<2)>>2]|0)+o+(c[32984+(k<<2)>>2]|0)+((l^m)&n^l)+(c[e+24>>2]|0)|0;o=l+(c[e+8>>2]|0)|0;c[e+8>>2]=o;p=Jh(w,2)|0;p=(Jh(w,13)|0)^p;v=l+(p^(Jh(w,22)|0))+((v|u)&w|v&u)|0;c[e+24>>2]=v;p=Jh(o,6)|0;p=(Jh(o,11)|0)^p;p=p^(Jh(o,25)|0);l=s|10;m=(c[d+(l<<2)>>2]|0)+p+(c[32984+(l<<2)>>2]|0)+((m^n)&o^m)+(c[e+20>>2]|0)|0;p=m+(c[e+4>>2]|0)|0;c[e+4>>2]=p;t=Jh(v,2)|0;t=(Jh(v,13)|0)^t;u=m+(t^(Jh(v,22)|0))+((u|w)&v|u&w)|0;c[e+20>>2]=u;t=Jh(p,6)|0;t=(Jh(p,11)|0)^t;t=t^(Jh(p,25)|0);m=s|11;n=(c[d+(m<<2)>>2]|0)+t+(c[32984+(m<<2)>>2]|0)+((n^o)&p^n)+(c[e+16>>2]|0)|0;t=n+(c[e>>2]|0)|0;c[e>>2]=t;y=Jh(u,2)|0;y=(Jh(u,13)|0)^y;w=n+(y^(Jh(u,22)|0))+((w|v)&u|w&v)|0;c[e+16>>2]=w;y=Jh(t,6)|0;y=(Jh(t,11)|0)^y;y=y^(Jh(t,25)|0);n=s|12;o=(c[d+(n<<2)>>2]|0)+y+(c[32984+(n<<2)>>2]|0)+((o^p)&t^o)+(c[e+12>>2]|0)|0;y=o+(c[e+28>>2]|0)|0;c[e+28>>2]=y;z=Jh(w,2)|0;z=(Jh(w,13)|0)^z;v=o+(z^(Jh(w,22)|0))+((v|u)&w|v&u)|0;c[e+12>>2]=v;z=Jh(y,6)|0;z=(Jh(y,11)|0)^z;z=z^(Jh(y,25)|0);o=s|13;p=(c[d+(o<<2)>>2]|0)+z+(c[32984+(o<<2)>>2]|0)+((p^t)&y^p)+(c[e+8>>2]|0)|0;z=p+(c[e+24>>2]|0)|0;c[e+24>>2]=z;x=Jh(v,2)|0;x=(Jh(v,13)|0)^x;u=p+(x^(Jh(v,22)|0))+((u|w)&v|u&w)|0;c[e+8>>2]=u;x=Jh(z,6)|0;x=(Jh(z,11)|0)^x;x=x^(Jh(z,25)|0);p=s|14;t=(c[d+(p<<2)>>2]|0)+x+(c[32984+(p<<2)>>2]|0)+((t^y)&z^t)+(c[e+4>>2]|0)|0;x=t+(c[e+20>>2]|0)|0;c[e+20>>2]=x;A=Jh(u,2)|0;A=(Jh(u,13)|0)^A;w=t+(A^(Jh(u,22)|0))+((w|v)&u|w&v)|0;c[e+4>>2]=w;A=Jh(x,6)|0;A=(Jh(x,11)|0)^A;A=A^(Jh(x,25)|0);t=s|15;y=(c[d+(t<<2)>>2]|0)+A+(c[32984+(t<<2)>>2]|0)+((y^z)&x^y)+(c[e>>2]|0)|0;c[e+16>>2]=y+(c[e+16>>2]|0);x=Jh(w,2)|0;x=(Jh(w,13)|0)^x;c[e>>2]=y+(x^(Jh(w,22)|0))+((v|u)&w|v&u);if((s|0)==48){b=0;break}z=c[d+(p<<2)>>2]|0;y=Jh(z,17)|0;z=z>>>10^y^(Jh(z,19)|0);z=z+(c[d+(k<<2)>>2]|0)|0;y=c[d+(q<<2)>>2]|0;x=Jh(y,7)|0;x=y>>>3^x^(Jh(y,18)|0);x=z+(c[d+(s<<2)>>2]|0)+x|0;s=s+16|0;c[d+(s<<2)>>2]=x;z=c[d+(t<<2)>>2]|0;A=Jh(z,17)|0;z=z>>>10^A^(Jh(z,19)|0);z=z+(c[d+(q+9<<2)>>2]|0)|0;A=c[d+(q+1<<2)>>2]|0;w=Jh(A,7)|0;w=z+y+(A>>>3^w^(Jh(A,18)|0))|0;c[d+(q+16<<2)>>2]=w;y=Jh(x,17)|0;x=x>>>10^y^(Jh(x,19)|0);x=x+(c[d+(m<<2)>>2]|0)|0;y=c[d+(b<<2)>>2]|0;z=Jh(y,7)|0;z=x+A+(y>>>3^z^(Jh(y,18)|0))|0;c[d+(r+16<<2)>>2]=z;A=Jh(w,17)|0;w=w>>>10^A^(Jh(w,19)|0);w=w+(c[d+(b+9<<2)>>2]|0)|0;A=c[d+(b+1<<2)>>2]|0;x=Jh(A,7)|0;x=w+y+(A>>>3^x^(Jh(A,18)|0))|0;c[d+(b+16<<2)>>2]=x;b=Jh(z,17)|0;b=z>>>10^b^(Jh(z,19)|0);b=b+(c[d+(o<<2)>>2]|0)|0;z=c[d+(g<<2)>>2]|0;y=Jh(z,7)|0;y=b+A+(z>>>3^y^(Jh(z,18)|0))|0;c[d+(f+16<<2)>>2]=y;A=Jh(x,17)|0;x=x>>>10^A^(Jh(x,19)|0);x=x+(c[d+(g+9<<2)>>2]|0)|0;A=c[d+(g+1<<2)>>2]|0;b=Jh(A,7)|0;b=x+z+(A>>>3^b^(Jh(A,18)|0))|0;c[d+(g+16<<2)>>2]=b;z=Jh(y,17)|0;y=y>>>10^z^(Jh(y,19)|0);y=y+(c[d+(t<<2)>>2]|0)|0;z=c[d+(i<<2)>>2]|0;x=Jh(z,7)|0;x=y+A+(z>>>3^x^(Jh(z,18)|0))|0;c[d+(h+16<<2)>>2]=x;A=Jh(b,17)|0;b=b>>>10^A^(Jh(b,19)|0);b=b+(c[d+(i+9<<2)>>2]|0)|0;A=c[d+(i+1<<2)>>2]|0;y=Jh(A,7)|0;y=b+z+(A>>>3^y^(Jh(A,18)|0))|0;c[d+(i+16<<2)>>2]=y;z=Jh(x,17)|0;x=x>>>10^z^(Jh(x,19)|0);x=x+(c[d+(j+9<<2)>>2]|0)|0;z=c[d+(k<<2)>>2]|0;b=Jh(z,7)|0;b=x+A+(z>>>3^b^(Jh(z,18)|0))|0;c[d+(j+16<<2)>>2]=b;A=Jh(y,17)|0;y=y>>>10^A^(Jh(y,19)|0);y=y+(c[d+(k+9<<2)>>2]|0)|0;A=c[d+(k+1<<2)>>2]|0;x=Jh(A,7)|0;x=y+z+(A>>>3^x^(Jh(A,18)|0))|0;c[d+(k+16<<2)>>2]=x;z=Jh(b,17)|0;b=b>>>10^z^(Jh(b,19)|0);b=b+(c[d+(l+9<<2)>>2]|0)|0;z=c[d+(m<<2)>>2]|0;y=Jh(z,7)|0;y=b+A+(z>>>3^y^(Jh(z,18)|0))|0;c[d+(l+16<<2)>>2]=y;A=Jh(x,17)|0;x=x>>>10^A^(Jh(x,19)|0);x=x+(c[d+(m+9<<2)>>2]|0)|0;A=c[d+(m+1<<2)>>2]|0;b=Jh(A,7)|0;b=x+z+(A>>>3^b^(Jh(A,18)|0))|0;c[d+(m+16<<2)>>2]=b;z=Jh(y,17)|0;y=y>>>10^z^(Jh(y,19)|0);y=y+(c[d+(n+9<<2)>>2]|0)|0;z=c[d+(o<<2)>>2]|0;x=Jh(z,7)|0;x=y+A+(z>>>3^x^(Jh(z,18)|0))|0;c[d+(n+16<<2)>>2]=x;A=Jh(b,17)|0;b=b>>>10^A^(Jh(b,19)|0);b=b+(c[d+(o+9<<2)>>2]|0)|0;A=c[d+(o+1<<2)>>2]|0;y=Jh(A,7)|0;y=b+z+(A>>>3^y^(Jh(A,18)|0))|0;c[d+(o+16<<2)>>2]=y;z=Jh(x,17)|0;x=x>>>10^z^(Jh(x,19)|0);x=x+(c[d+(p+9<<2)>>2]|0)|0;z=c[d+(t<<2)>>2]|0;b=Jh(z,7)|0;c[d+(p+16<<2)>>2]=x+A+(z>>>3^b^(Jh(z,18)|0));b=Jh(y,17)|0;y=y>>>10^b^(Jh(y,19)|0);y=y+(c[d+(t+9<<2)>>2]|0)|0;b=c[d+(t+1<<2)>>2]|0;A=Jh(b,7)|0;c[d+(t+16<<2)>>2]=y+z+(b>>>3^A^(Jh(b,18)|0));if((s|0)>=64){b=0;break}}do{A=a+(b<<2)|0;c[A>>2]=(c[A>>2]|0)+(c[e+(b<<2)>>2]|0);b=b+1|0}while((b|0)!=8);return}function qa(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0;l=c[b>>2]|0;p=c[b+4>>2]|0;k=c[b+8>>2]|0;f=c[b+12>>2]|0;D=c[b+16>>2]|0;d=c[b+20>>2]|0;g=c[b+24>>2]|0;O=c[b+28>>2]|0;B=c[b+32>>2]|0;q=c[b+36>>2]|0;cb=ef(l|0,((l|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;bb=z;o=((l<<1|0)<0)<<31>>31;Ia=ef(l<<1|0,o|0,p|0,((p|0)<0)<<31>>31|0)|0;Ha=z;Wa=ef(k|0,((k|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Va=z;Ua=ef(f|0,((f|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Ta=z;Oa=ef(D|0,((D|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Na=z;ya=ef(d|0,((d|0)<0)<<31>>31|0,l<<1|0,o|0)|0;xa=z;ga=ef(g|0,((g|0)<0)<<31>>31|0,l<<1|0,o|0)|0;fa=z;R=ef(O|0,((O|0)<0)<<31>>31|0,l<<1|0,o|0)|0;Q=z;F=ef(B|0,((B|0)<0)<<31>>31|0,l<<1|0,o|0)|0;E=z;o=ef(q|0,((q|0)<0)<<31>>31|0,l<<1|0,o|0)|0;l=z;n=((p<<1|0)<0)<<31>>31;ta=ef(p<<1|0,n|0,p|0,((p|0)<0)<<31>>31|0)|0;ua=z;ba=ef(p<<1|0,n|0,k|0,((k|0)<0)<<31>>31|0)|0;ca=z;P=((f<<1|0)<0)<<31>>31;Sa=ef(f<<1|0,P|0,p<<1|0,n|0)|0;Ra=z;Ca=ef(D|0,((D|0)<0)<<31>>31|0,p<<1|0,n|0)|0;Ba=z;ia=ef(d<<1|0,((d<<1|0)<0)<<31>>31|0,p<<1|0,n|0)|0;ha=z;T=ef(g|0,((g|0)<0)<<31>>31|0,p<<1|0,n|0)|0;S=z;H=ef(O<<1|0,((O<<1|0)<0)<<31>>31|0,p<<1|0,n|0)|0;G=z;t=ef(B|0,((B|0)<0)<<31>>31|0,p<<1|0,n|0)|0;s=z;b=((q*38|0)<0)<<31>>31;n=ef(q*38|0,b|0,p<<1|0,n|0)|0;p=z;Qa=ef(k|0,((k|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;Pa=z;Aa=ef(k<<1|0,((k<<1|0)<0)<<31>>31|0,f|0,((f|0)<0)<<31>>31|0)|0;za=z;ka=ef(D|0,((D|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;ja=z;X=ef(d|0,((d|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;W=z;N=ef(g|0,((g|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;M=z;v=ef(O|0,((O|0)<0)<<31>>31|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;u=z;ea=((B*19|0)<0)<<31>>31;Ya=ef(B*19|0,ea|0,k<<1|0,((k<<1|0)<0)<<31>>31|0)|0;Xa=z;k=ef(q*38|0,b|0,k|0,((k|0)<0)<<31>>31|0)|0;j=z;ma=ef(f<<1|0,P|0,f|0,((f|0)<0)<<31>>31|0)|0;la=z;V=ef(f<<1|0,P|0,D|0,((D|0)<0)<<31>>31|0)|0;U=z;J=ef(d<<1|0,((d<<1|0)<0)<<31>>31|0,f<<1|0,P|0)|0;I=z;A=ef(g|0,((g|0)<0)<<31>>31|0,f<<1|0,P|0)|0;y=z;Ma=((O*38|0)<0)<<31>>31;_a=ef(O*38|0,Ma|0,f<<1|0,P|0)|0;Za=z;Ea=ef(B*19|0,ea|0,f<<1|0,P|0)|0;Da=z;P=ef(q*38|0,b|0,f<<1|0,P|0)|0;f=z;L=ef(D|0,((D|0)<0)<<31>>31|0,D|0,((D|0)<0)<<31>>31|0)|0;K=z;x=ef(D<<1|0,((D<<1|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;w=z;ab=ef(g*19|0,((g*19|0)<0)<<31>>31|0,D<<1|0,((D<<1|0)<0)<<31>>31|0)|0;$a=z;Ga=ef(O*38|0,Ma|0,D|0,((D|0)<0)<<31>>31|0)|0;Fa=z;oa=ef(B*19|0,ea|0,D<<1|0,((D<<1|0)<0)<<31>>31|0)|0;na=z;D=ef(q*38|0,b|0,D|0,((D|0)<0)<<31>>31|0)|0;e=z;eb=ef(d*38|0,((d*38|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;db=z;Ka=ef(g*19|0,((g*19|0)<0)<<31>>31|0,d<<1|0,((d<<1|0)<0)<<31>>31|0)|0;Ja=z;qa=ef(O*38|0,Ma|0,d<<1|0,((d<<1|0)<0)<<31>>31|0)|0;pa=z;_=ef(B*19|0,ea|0,d<<1|0,((d<<1|0)<0)<<31>>31|0)|0;Z=z;d=ef(q*38|0,b|0,d<<1|0,((d<<1|0)<0)<<31>>31|0)|0;C=z;sa=ef(g*19|0,((g*19|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;ra=z;aa=ef(O*38|0,Ma|0,g|0,((g|0)<0)<<31>>31|0)|0;$=z;m=ef(B*19|0,ea|0,g<<1|0,((g<<1|0)<0)<<31>>31|0)|0;r=z;g=ef(q*38|0,b|0,g|0,((g|0)<0)<<31>>31|0)|0;Y=z;Ma=ef(O*38|0,Ma|0,O|0,((O|0)<0)<<31>>31|0)|0;La=z;wa=ef(B*19|0,ea|0,O<<1|0,((O<<1|0)<0)<<31>>31|0)|0;va=z;O=ef(q*38|0,b|0,O<<1|0,((O<<1|0)<0)<<31>>31|0)|0;i=z;ea=ef(B*19|0,ea|0,B|0,((B|0)<0)<<31>>31|0)|0;da=z;B=ef(q*38|0,b|0,B|0,((B|0)<0)<<31>>31|0)|0;h=z;q=ef(q*38|0,b|0,q|0,((q|0)<0)<<31>>31|0)|0;b=z;bb=lg(eb|0,db|0,cb|0,bb|0)|0;$a=lg(bb|0,z|0,ab|0,$a|0)|0;Za=lg($a|0,z|0,_a|0,Za|0)|0;Xa=lg(Za|0,z|0,Ya|0,Xa|0)|0;p=lg(Xa|0,z|0,n|0,p|0)|0;n=z;ua=lg(Wa|0,Va|0,ta|0,ua|0)|0;ta=z;ca=lg(Ua|0,Ta|0,ba|0,ca|0)|0;ba=z;Pa=lg(Sa|0,Ra|0,Qa|0,Pa|0)|0;Na=lg(Pa|0,z|0,Oa|0,Na|0)|0;La=lg(Na|0,z|0,Ma|0,La|0)|0;r=lg(La|0,z|0,m|0,r|0)|0;C=lg(r|0,z|0,d|0,C|0)|0;d=z;r=lg(p|0,n|0,33554432,0)|0;r=$e(r|0,z|0,26)|0;m=z;Ha=lg(Ka|0,Ja|0,Ia|0,Ha|0)|0;Fa=lg(Ha|0,z|0,Ga|0,Fa|0)|0;Da=lg(Fa|0,z|0,Ea|0,Da|0)|0;j=lg(Da|0,z|0,k|0,j|0)|0;j=lg(j|0,z|0,r|0,m|0)|0;k=z;m=zf(r|0,m|0,26)|0;m=ig(p|0,n|0,m|0,z|0)|0;n=z;p=lg(C|0,d|0,33554432,0)|0;p=$e(p|0,z|0,26)|0;r=z;za=lg(Ca|0,Ba|0,Aa|0,za|0)|0;xa=lg(za|0,z|0,ya|0,xa|0)|0;va=lg(xa|0,z|0,wa|0,va|0)|0;Y=lg(va|0,z|0,g|0,Y|0)|0;Y=lg(Y|0,z|0,p|0,r|0)|0;g=z;r=zf(p|0,r|0,26)|0;r=ig(C|0,d|0,r|0,z|0)|0;d=z;C=lg(j|0,k|0,16777216,0)|0;C=$e(C|0,z|0,25)|0;p=z;ra=lg(ua|0,ta|0,sa|0,ra|0)|0;pa=lg(ra|0,z|0,qa|0,pa|0)|0;na=lg(pa|0,z|0,oa|0,na|0)|0;f=lg(na|0,z|0,P|0,f|0)|0;f=lg(f|0,z|0,C|0,p|0)|0;P=z;p=zf(C|0,p|0,25)|0;p=ig(j|0,k|0,p|0,z|0)|0;k=z;j=lg(Y|0,g|0,16777216,0)|0;j=$e(j|0,z|0,25)|0;C=z;ja=lg(ma|0,la|0,ka|0,ja|0)|0;ha=lg(ja|0,z|0,ia|0,ha|0)|0;fa=lg(ha|0,z|0,ga|0,fa|0)|0;da=lg(fa|0,z|0,ea|0,da|0)|0;i=lg(da|0,z|0,O|0,i|0)|0;i=lg(i|0,z|0,j|0,C|0)|0;O=z;C=zf(j|0,C|0,25)|0;C=ig(Y|0,g|0,C|0,z|0)|0;g=z;Y=lg(f|0,P|0,33554432,0)|0;Y=$e(Y|0,z|0,26)|0;j=z;$=lg(ca|0,ba|0,aa|0,$|0)|0;Z=lg($|0,z|0,_|0,Z|0)|0;e=lg(Z|0,z|0,D|0,e|0)|0;e=lg(e|0,z|0,Y|0,j|0)|0;D=z;j=zf(Y|0,j|0,26)|0;j=ig(f|0,P|0,j|0,z|0)|0;P=lg(i|0,O|0,33554432,0)|0;P=$e(P|0,z|0,26)|0;f=z;U=lg(X|0,W|0,V|0,U|0)|0;S=lg(U|0,z|0,T|0,S|0)|0;Q=lg(S|0,z|0,R|0,Q|0)|0;h=lg(Q|0,z|0,B|0,h|0)|0;h=lg(h|0,z|0,P|0,f|0)|0;B=z;f=zf(P|0,f|0,26)|0;f=ig(i|0,O|0,f|0,z|0)|0;O=lg(e|0,D|0,16777216,0)|0;O=$e(O|0,z|0,25)|0;i=z;d=lg(O|0,i|0,r|0,d|0)|0;r=z;i=zf(O|0,i|0,25)|0;i=ig(e|0,D|0,i|0,z|0)|0;D=lg(h|0,B|0,16777216,0)|0;D=$e(D|0,z|0,25)|0;e=z;K=lg(N|0,M|0,L|0,K|0)|0;I=lg(K|0,z|0,J|0,I|0)|0;G=lg(I|0,z|0,H|0,G|0)|0;E=lg(G|0,z|0,F|0,E|0)|0;b=lg(E|0,z|0,q|0,b|0)|0;b=lg(b|0,z|0,D|0,e|0)|0;q=z;e=zf(D|0,e|0,25)|0;e=ig(h|0,B|0,e|0,z|0)|0;B=lg(d|0,r|0,33554432,0)|0;B=$e(B|0,z|0,26)|0;h=z;g=lg(C|0,g|0,B|0,h|0)|0;h=zf(B|0,h|0,26)|0;h=ig(d|0,r|0,h|0,z|0)|0;r=lg(b|0,q|0,33554432,0)|0;r=$e(r|0,z|0,26)|0;d=z;w=lg(A|0,y|0,x|0,w|0)|0;u=lg(w|0,z|0,v|0,u|0)|0;s=lg(u|0,z|0,t|0,s|0)|0;l=lg(s|0,z|0,o|0,l|0)|0;l=lg(l|0,z|0,r|0,d|0)|0;o=z;d=zf(r|0,d|0,26)|0;d=ig(b|0,q|0,d|0,z|0)|0;q=lg(l|0,o|0,16777216,0)|0;q=$e(q|0,z|0,25)|0;b=z;r=ef(q|0,b|0,19,0)|0;n=lg(r|0,z|0,m|0,n|0)|0;m=z;b=zf(q|0,b|0,25)|0;b=ig(l|0,o|0,b|0,z|0)|0;o=lg(n|0,m|0,33554432,0)|0;o=$e(o|0,z|0,26)|0;l=z;k=lg(p|0,k|0,o|0,l|0)|0;l=zf(o|0,l|0,26)|0;l=ig(n|0,m|0,l|0,z|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=d;c[a+36>>2]=b;return}function ra(a,b,c,e,f){a=a|0;b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;m=Xe(f)|0;o=z;g=Xe(f+8|0)|0;h=z;e=zf(c|0,e|0,56)|0;f=z;if((b+c+(0-(c&7))|0)==(b|0)){q=g^2037671283;j=h^1952801890;n=m^1886610805;k=o^1936682341;i=g^1852075907;r=h^1685025377;h=m^1852142177;g=o^1819895653}else{s=b;q=g^2037671283;j=h^1952801890;n=m^1886610805;l=o^1936682341;k=g^1852075907;i=h^1685025377;h=m^1852142177;g=o^1819895653;while(1){p=Xe(s)|0;t=z;v=p^q;j=t^j;l=lg(n|0,l|0,k|0,i|0)|0;r=z;n=cf(k,i,13)|0;k=z^r;r=cf(l,r,32)|0;q=z;m=lg(v|0,j|0,h|0,g|0)|0;o=z;j=cf(v,j,16)|0;i=z^o;q=lg(j^m|0,i|0,r|0,q|0)|0;r=z;i=cf(j^m,i,21)|0;j=r^z;o=lg(m|0,o|0,n^l|0,k|0)|0;m=z;k=cf(n^l,k,17)|0;g=z^m;m=cf(o,m,32)|0;h=z;r=lg(k^o|0,g|0,q|0,r|0)|0;l=z;g=cf(k^o,g,13)|0;o=z^l;l=cf(r,l,32)|0;k=z;h=lg(m|0,h|0,q^i|0,j|0)|0;m=z;j=cf(q^i,j,16)|0;i=z^m;k=lg(j^h|0,i|0,l|0,k|0)|0;l=z;i=cf(j^h,i,21)|0;j=l^z;m=lg(g^r|0,o|0,h|0,m|0)|0;h=z;o=cf(g^r,o,17)|0;r=z^h;h=cf(m,h,32)|0;g=z;s=s+8|0;if((s|0)==(b+c+(0-(c&7))|0)){b=b+c+(0-(c&7))|0;q=k^i;n=k^p;k=l^t;i=o^m;break}else{q=k^i;n=k^p;l=l^t;k=o^m;i=r}}}switch(c&7){case 7:{e=zf(d[b+6>>0]|0|0,0,48)|0|e;f=z|f;u=5;break}case 6:{u=5;break}case 5:{u=6;break}case 4:{u=7;break}case 3:{u=8;break}case 2:{u=9;break}case 1:{u=10;break}default:{}}if((u|0)==5){v=zf(d[b+5>>0]|0|0,0,40)|0;f=z|f;e=v|e;u=6}if((u|0)==6){f=d[b+4>>0]|0|f;u=7}if((u|0)==7){v=zf(d[b+3>>0]|0|0,0,24)|0;e=v|e;f=z|f;u=8}if((u|0)==8){v=zf(d[b+2>>0]|0|0,0,16)|0;e=v|e;f=z|f;u=9}if((u|0)==9){v=zf(d[b+1>>0]|0|0,0,8)|0;e=v|e;f=z|f;u=10}if((u|0)==10)e=d[b>>0]|0|e;t=e^q;c=f^j;b=lg(n|0,k|0,i|0,r|0)|0;v=z;u=cf(i,r,13)|0;o=z^v;v=cf(b,v,32)|0;q=z;s=lg(t|0,c|0,h|0,g|0)|0;p=z;r=cf(t,c,16)|0;c=z^p;q=lg(r^s|0,c|0,v|0,q|0)|0;v=z;c=cf(r^s,c,21)|0;r=v^z;p=lg(s|0,p|0,u^b|0,o|0)|0;s=z;o=cf(u^b,o,17)|0;b=z^s;s=cf(p,s,32)|0;u=z;v=lg(o^p|0,b|0,q|0,v|0)|0;t=z;b=cf(o^p,b,13)|0;p=z^t;t=cf(v,t,32)|0;o=z;u=lg(s|0,u|0,q^c|0,r|0)|0;s=z;r=cf(q^c,r,16)|0;c=z^s;o=lg(r^u|0,c|0,t|0,o|0)|0;t=z;c=cf(r^u,c,21)|0;r=t^z;s=lg(b^v|0,p|0,u|0,s|0)|0;u=z;p=cf(b^v,p,17)|0;v=z^u;u=cf(s,u,32)|0;b=z;t=lg(o^e|0,t^f|0,p^s|0,v|0)|0;q=z;v=cf(p^s,v,13)|0;s=z^q;q=cf(t,q,32)|0;p=z;b=lg(u^238|0,b|0,o^c|0,r|0)|0;u=z;r=cf(o^c,r,16)|0;c=z^u;p=lg(r^b|0,c|0,q|0,p|0)|0;q=z;c=cf(r^b,c,21)|0;r=q^z;u=lg(b|0,u|0,v^t|0,s|0)|0;b=z;s=cf(v^t,s,17)|0;t=z^b;b=cf(u,b,32)|0;v=z;q=lg(s^u|0,t|0,p|0,q|0)|0;o=z;t=cf(s^u,t,13)|0;u=z^o;o=cf(q,o,32)|0;s=z;v=lg(b|0,v|0,p^c|0,r|0)|0;b=z;r=cf(p^c,r,16)|0;c=z^b;s=lg(r^v|0,c|0,o|0,s|0)|0;o=z;c=cf(r^v,c,21)|0;r=o^z;b=lg(t^q|0,u|0,v|0,b|0)|0;v=z;u=cf(t^q,u,17)|0;q=z^v;v=cf(b,v,32)|0;t=z;o=lg(u^b|0,q|0,s|0,o|0)|0;p=z;q=cf(u^b,q,13)|0;b=z^p;p=cf(o,p,32)|0;u=z;t=lg(v|0,t|0,s^c|0,r|0)|0;v=z;r=cf(s^c,r,16)|0;c=z^v;u=lg(r^t|0,c|0,p|0,u|0)|0;p=z;c=cf(r^t,c,21)|0;r=p^z;v=lg(q^o|0,b|0,t|0,v|0)|0;t=z;b=cf(q^o,b,17)|0;o=z^t;t=cf(v,t,32)|0;q=z;p=lg(b^v|0,o|0,u|0,p|0)|0;s=z;o=cf(b^v,o,13)|0;v=z^s;s=cf(p,s,32)|0;b=z;q=lg(t|0,q|0,u^c|0,r|0)|0;t=z;r=cf(u^c,r,16)|0;c=z^t;b=lg(r^q|0,c|0,s|0,b|0)|0;s=z;c=cf(r^q,c,21)|0;r=s^z;t=lg(o^p|0,v|0,q|0,t|0)|0;q=z;v=cf(o^p,v,17)|0;p=z^q;q=cf(t,q,32)|0;o=z;ze(a,v^t^b^q^(b^c),p^s^o^r);s=lg(v^t^221|0,p|0,b|0,s|0)|0;u=z;p=cf(v^t^221,p,13)|0;t=z^u;u=cf(s,u,32)|0;v=z;o=lg(q|0,o|0,b^c|0,r|0)|0;q=z;r=cf(b^c,r,16)|0;c=z^q;v=lg(r^o|0,c|0,u|0,v|0)|0;u=z;c=cf(r^o,c,21)|0;r=u^z;q=lg(p^s|0,t|0,o|0,q|0)|0;o=z;t=cf(p^s,t,17)|0;s=z^o;o=cf(q,o,32)|0;p=z;u=lg(t^q|0,s|0,v|0,u|0)|0;b=z;s=cf(t^q,s,13)|0;q=z^b;b=cf(u,b,32)|0;t=z;p=lg(o|0,p|0,v^c|0,r|0)|0;o=z;r=cf(v^c,r,16)|0;c=z^o;t=lg(r^p|0,c|0,b|0,t|0)|0;b=z;c=cf(r^p,c,21)|0;r=b^z;o=lg(s^u|0,q|0,p|0,o|0)|0;p=z;q=cf(s^u,q,17)|0;u=z^p;p=cf(o,p,32)|0;s=z;b=lg(q^o|0,u|0,t|0,b|0)|0;v=z;u=cf(q^o,u,13)|0;o=z^v;v=cf(b,v,32)|0;q=z;s=lg(p|0,s|0,t^c|0,r|0)|0;p=z;r=cf(t^c,r,16)|0;c=z^p;q=lg(r^s|0,c|0,v|0,q|0)|0;v=z;c=cf(r^s,c,21)|0;r=v^z;p=lg(u^b|0,o|0,s|0,p|0)|0;s=z;o=cf(u^b,o,17)|0;b=z^s;s=cf(p,s,32)|0;u=z;v=lg(o^p|0,b|0,q|0,v|0)|0;t=z;b=cf(o^p,b,13)|0;t=z^t;u=lg(s|0,u|0,q^c|0,r|0)|0;s=z;r=cf(q^c,r,16)|0;r=cf(r^u,z^s,21)|0;c=z;s=lg(b^v|0,t|0,u|0,s|0)|0;u=z;t=cf(b^v,t,17)|0;v=z;b=cf(s,u,32)|0;ze(a+8|0,r^s^t^b,c^u^v^z);return 0}function sa(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;if(!a)return;b=c[8846]|0;d=c[a+-4>>2]|0;j=a+-8+(d&-8)|0;do if(!(d&1)){e=c[a+-8>>2]|0;if(!(d&3))return;h=a+-8+(0-e)|0;g=e+(d&-8)|0;if(h>>>0<b>>>0)return;if((h|0)==(c[8847]|0)){a=c[j+4>>2]|0;if((a&3|0)!=3){i=h;b=g;break}c[8844]=g;c[j+4>>2]=a&-2;c[h+4>>2]=g|1;c[h+g>>2]=g;return}if(e>>>0<256){a=c[h+8>>2]|0;b=c[h+12>>2]|0;if((b|0)==(a|0)){c[8842]=c[8842]&~(1<<(e>>>3));i=h;b=g;break}else{c[a+12>>2]=b;c[b+8>>2]=a;i=h;b=g;break}}f=c[h+24>>2]|0;a=c[h+12>>2]|0;do if((a|0)==(h|0)){a=c[h+16+4>>2]|0;if(!a){a=c[h+16>>2]|0;if(!a){a=0;break}else e=h+16|0}else e=h+16+4|0;while(1){b=a+20|0;d=c[b>>2]|0;if(d|0){a=d;e=b;continue}b=a+16|0;d=c[b>>2]|0;if(!d)break;else{a=d;e=b}}c[e>>2]=0}else{i=c[h+8>>2]|0;c[i+12>>2]=a;c[a+8>>2]=i}while(0);if(f){b=c[h+28>>2]|0;if((h|0)==(c[35672+(b<<2)>>2]|0)){c[35672+(b<<2)>>2]=a;if(!a){c[8843]=c[8843]&~(1<<b);i=h;b=g;break}}else{c[f+16+(((c[f+16>>2]|0)!=(h|0)&1)<<2)>>2]=a;if(!a){i=h;b=g;break}}c[a+24>>2]=f;b=c[h+16>>2]|0;if(b|0){c[a+16>>2]=b;c[b+24>>2]=a}b=c[h+16+4>>2]|0;if(b){c[a+20>>2]=b;c[b+24>>2]=a;i=h;b=g}else{i=h;b=g}}else{i=h;b=g}}else{i=a+-8|0;b=d&-8;h=a+-8|0}while(0);if(h>>>0>=j>>>0)return;d=c[j+4>>2]|0;if(!(d&1))return;if(!(d&2)){a=c[8847]|0;if((j|0)==(c[8848]|0)){j=(c[8845]|0)+b|0;c[8845]=j;c[8848]=i;c[i+4>>2]=j|1;if((i|0)!=(a|0))return;c[8847]=0;c[8844]=0;return}if((j|0)==(a|0)){j=(c[8844]|0)+b|0;c[8844]=j;c[8847]=h;c[i+4>>2]=j|1;c[h+j>>2]=j;return}f=(d&-8)+b|0;do if(d>>>0<256){b=c[j+8>>2]|0;a=c[j+12>>2]|0;if((a|0)==(b|0)){c[8842]=c[8842]&~(1<<(d>>>3));break}else{c[b+12>>2]=a;c[a+8>>2]=b;break}}else{g=c[j+24>>2]|0;a=c[j+12>>2]|0;do if((a|0)==(j|0)){a=c[j+16+4>>2]|0;if(!a){a=c[j+16>>2]|0;if(!a){b=0;break}else e=j+16|0}else e=j+16+4|0;while(1){b=a+20|0;d=c[b>>2]|0;if(d|0){a=d;e=b;continue}b=a+16|0;d=c[b>>2]|0;if(!d)break;else{a=d;e=b}}c[e>>2]=0;b=a}else{b=c[j+8>>2]|0;c[b+12>>2]=a;c[a+8>>2]=b;b=a}while(0);if(g|0){a=c[j+28>>2]|0;if((j|0)==(c[35672+(a<<2)>>2]|0)){c[35672+(a<<2)>>2]=b;if(!b){c[8843]=c[8843]&~(1<<a);break}}else{c[g+16+(((c[g+16>>2]|0)!=(j|0)&1)<<2)>>2]=b;if(!b)break}c[b+24>>2]=g;a=c[j+16>>2]|0;if(a|0){c[b+16>>2]=a;c[a+24>>2]=b}a=c[j+16+4>>2]|0;if(a|0){c[b+20>>2]=a;c[a+24>>2]=b}}}while(0);c[i+4>>2]=f|1;c[h+f>>2]=f;if((i|0)==(c[8847]|0)){c[8844]=f;return}}else{c[j+4>>2]=d&-2;c[i+4>>2]=b|1;c[h+b>>2]=b;f=b}d=f>>>3;if(f>>>0<256){a=c[8842]|0;if(!(a&1<<d)){c[8842]=a|1<<d;a=35408+(d<<1<<2)|0;b=35408+(d<<1<<2)+8|0}else{a=c[35408+(d<<1<<2)+8>>2]|0;b=35408+(d<<1<<2)+8|0}c[b>>2]=i;c[a+12>>2]=i;c[i+8>>2]=a;c[i+12>>2]=35408+(d<<1<<2);return}a=f>>>8;if(a)if(f>>>0>16777215)a=31;else{j=a<<((a+1048320|0)>>>16&8)<<(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4);a=14-(((a<<((a+1048320|0)>>>16&8))+520192|0)>>>16&4|(a+1048320|0)>>>16&8|(j+245760|0)>>>16&2)+(j<<((j+245760|0)>>>16&2)>>>15)|0;a=f>>>(a+7|0)&1|a<<1}else a=0;e=35672+(a<<2)|0;c[i+28>>2]=a;c[i+20>>2]=0;c[i+16>>2]=0;b=c[8843]|0;d=1<<a;do if(b&d){b=f<<((a|0)==31?0:25-(a>>>1)|0);d=c[e>>2]|0;while(1){if((c[d+4>>2]&-8|0)==(f|0)){a=73;break}e=d+16+(b>>>31<<2)|0;a=c[e>>2]|0;if(!a){a=72;break}else{b=b<<1;d=a}}if((a|0)==72){c[e>>2]=i;c[i+24>>2]=d;c[i+12>>2]=i;c[i+8>>2]=i;break}else if((a|0)==73){h=d+8|0;j=c[h>>2]|0;c[j+12>>2]=i;c[h>>2]=i;c[i+8>>2]=j;c[i+12>>2]=d;c[i+24>>2]=0;break}}else{c[8843]=b|d;c[e>>2]=i;c[i+24>>2]=e;c[i+12>>2]=i;c[i+8>>2]=i}while(0);j=(c[8850]|0)+-1|0;c[8850]=j;if(!j)a=35824;else return;while(1){a=c[a>>2]|0;if(!a)break;else a=a+8|0}c[8850]=-1;return}function ta(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=c[a+4>>2]|0;do if(!(d&1)){i=c[a>>2]|0;if(!(d&3))return;if((a+(0-i)|0)==(c[8847]|0)){d=c[a+b+4>>2]|0;if((d&3|0)!=3){j=a+(0-i)|0;d=i+b|0;break}c[8844]=i+b;c[a+b+4>>2]=d&-2;c[a+(0-i)+4>>2]=i+b|1;c[a+(0-i)+(i+b)>>2]=i+b;return}if(i>>>0<256){d=c[a+(0-i)+8>>2]|0;e=c[a+(0-i)+12>>2]|0;if((e|0)==(d|0)){c[8842]=c[8842]&~(1<<(i>>>3));j=a+(0-i)|0;d=i+b|0;break}else{c[d+12>>2]=e;c[e+8>>2]=d;j=a+(0-i)|0;d=i+b|0;break}}h=c[a+(0-i)+24>>2]|0;d=c[a+(0-i)+12>>2]|0;do if((d|0)==(a+(0-i)|0)){e=a+(0-i)+16|0;d=c[e+4>>2]|0;if(!d){d=c[e>>2]|0;if(!d){d=0;break}}else e=e+4|0;while(1){f=d+20|0;g=c[f>>2]|0;if(g|0){d=g;e=f;continue}f=d+16|0;g=c[f>>2]|0;if(!g)break;else{d=g;e=f}}c[e>>2]=0}else{j=c[a+(0-i)+8>>2]|0;c[j+12>>2]=d;c[d+8>>2]=j}while(0);if(h){e=c[a+(0-i)+28>>2]|0;if((a+(0-i)|0)==(c[35672+(e<<2)>>2]|0)){c[35672+(e<<2)>>2]=d;if(!d){c[8843]=c[8843]&~(1<<e);j=a+(0-i)|0;d=i+b|0;break}}else{c[h+16+(((c[h+16>>2]|0)!=(a+(0-i)|0)&1)<<2)>>2]=d;if(!d){j=a+(0-i)|0;d=i+b|0;break}}c[d+24>>2]=h;e=c[a+(0-i)+16>>2]|0;if(e|0){c[d+16>>2]=e;c[e+24>>2]=d}e=c[a+(0-i)+16+4>>2]|0;if(e){c[d+20>>2]=e;c[e+24>>2]=d;j=a+(0-i)|0;d=i+b|0}else{j=a+(0-i)|0;d=i+b|0}}else{j=a+(0-i)|0;d=i+b|0}}else{j=a;d=b}while(0);f=c[a+b+4>>2]|0;if(!(f&2)){e=c[8847]|0;if((a+b|0)==(c[8848]|0)){b=(c[8845]|0)+d|0;c[8845]=b;c[8848]=j;c[j+4>>2]=b|1;if((j|0)!=(e|0))return;c[8847]=0;c[8844]=0;return}if((a+b|0)==(e|0)){b=(c[8844]|0)+d|0;c[8844]=b;c[8847]=j;c[j+4>>2]=b|1;c[j+b>>2]=b;return}h=(f&-8)+d|0;do if(f>>>0<256){e=c[a+b+8>>2]|0;d=c[a+b+12>>2]|0;if((d|0)==(e|0)){c[8842]=c[8842]&~(1<<(f>>>3));break}else{c[e+12>>2]=d;c[d+8>>2]=e;break}}else{i=c[a+b+24>>2]|0;d=c[a+b+12>>2]|0;do if((d|0)==(a+b|0)){d=c[a+b+16+4>>2]|0;if(!d){d=c[a+b+16>>2]|0;if(!d){e=0;break}else g=a+b+16|0}else g=a+b+16+4|0;while(1){e=d+20|0;f=c[e>>2]|0;if(f|0){d=f;g=e;continue}e=d+16|0;f=c[e>>2]|0;if(!f)break;else{d=f;g=e}}c[g>>2]=0;e=d}else{e=c[a+b+8>>2]|0;c[e+12>>2]=d;c[d+8>>2]=e;e=d}while(0);if(i|0){d=c[a+b+28>>2]|0;if((a+b|0)==(c[35672+(d<<2)>>2]|0)){c[35672+(d<<2)>>2]=e;if(!e){c[8843]=c[8843]&~(1<<d);break}}else{c[i+16+(((c[i+16>>2]|0)!=(a+b|0)&1)<<2)>>2]=e;if(!e)break}c[e+24>>2]=i;d=c[a+b+16>>2]|0;if(d|0){c[e+16>>2]=d;c[d+24>>2]=e}d=c[a+b+16+4>>2]|0;if(d|0){c[e+20>>2]=d;c[d+24>>2]=e}}}while(0);c[j+4>>2]=h|1;c[j+h>>2]=h;if((j|0)==(c[8847]|0)){c[8844]=h;return}}else{c[a+b+4>>2]=f&-2;c[j+4>>2]=d|1;c[j+d>>2]=d;h=d}f=h>>>3;if(h>>>0<256){d=c[8842]|0;if(!(d&1<<f)){c[8842]=d|1<<f;d=35408+(f<<1<<2)|0;e=35408+(f<<1<<2)+8|0}else{d=c[35408+(f<<1<<2)+8>>2]|0;e=35408+(f<<1<<2)+8|0}c[e>>2]=j;c[d+12>>2]=j;c[j+8>>2]=d;c[j+12>>2]=35408+(f<<1<<2);return}d=h>>>8;if(d)if(h>>>0>16777215)d=31;else{b=d<<((d+1048320|0)>>>16&8)<<(((d<<((d+1048320|0)>>>16&8))+520192|0)>>>16&4);d=14-(((d<<((d+1048320|0)>>>16&8))+520192|0)>>>16&4|(d+1048320|0)>>>16&8|(b+245760|0)>>>16&2)+(b<<((b+245760|0)>>>16&2)>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;g=35672+(d<<2)|0;c[j+28>>2]=d;c[j+20>>2]=0;c[j+16>>2]=0;e=c[8843]|0;f=1<<d;if(!(e&f)){c[8843]=e|f;c[g>>2]=j;c[j+24>>2]=g;c[j+12>>2]=j;c[j+8>>2]=j;return}e=h<<((d|0)==31?0:25-(d>>>1)|0);f=c[g>>2]|0;while(1){if((c[f+4>>2]&-8|0)==(h|0)){d=69;break}g=f+16+(e>>>31<<2)|0;d=c[g>>2]|0;if(!d){d=68;break}else{e=e<<1;f=d}}if((d|0)==68){c[g>>2]=j;c[j+24>>2]=f;c[j+12>>2]=j;c[j+8>>2]=j;return}else if((d|0)==69){a=f+8|0;b=c[a>>2]|0;c[b+12>>2]=j;c[a>>2]=j;c[j+8>>2]=b;c[j+12>>2]=f;c[j+24>>2]=0;return}}function ua(a,b,c,e,f){a=a|0;b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;m=Xe(f)|0;o=z;g=Xe(f+8|0)|0;h=z;e=zf(c|0,e|0,56)|0;f=z;if((b+c+(0-(c&7))|0)==(b|0)){q=g^2037671283;j=h^1952801890;n=m^1886610805;k=o^1936682341;i=g^1852075885;r=h^1685025377;h=m^1852142177;g=o^1819895653}else{s=b;q=g^2037671283;j=h^1952801890;n=m^1886610805;l=o^1936682341;k=g^1852075885;i=h^1685025377;h=m^1852142177;g=o^1819895653;while(1){p=Xe(s)|0;t=z;v=p^q;j=t^j;l=lg(n|0,l|0,k|0,i|0)|0;r=z;n=cf(k,i,13)|0;k=z^r;r=cf(l,r,32)|0;q=z;m=lg(v|0,j|0,h|0,g|0)|0;o=z;j=cf(v,j,16)|0;i=z^o;q=lg(j^m|0,i|0,r|0,q|0)|0;r=z;i=cf(j^m,i,21)|0;j=r^z;o=lg(m|0,o|0,n^l|0,k|0)|0;m=z;k=cf(n^l,k,17)|0;g=z^m;m=cf(o,m,32)|0;h=z;r=lg(k^o|0,g|0,q|0,r|0)|0;l=z;g=cf(k^o,g,13)|0;o=z^l;l=cf(r,l,32)|0;k=z;h=lg(m|0,h|0,q^i|0,j|0)|0;m=z;j=cf(q^i,j,16)|0;i=z^m;k=lg(j^h|0,i|0,l|0,k|0)|0;l=z;i=cf(j^h,i,21)|0;j=l^z;m=lg(g^r|0,o|0,h|0,m|0)|0;h=z;o=cf(g^r,o,17)|0;r=z^h;h=cf(m,h,32)|0;g=z;s=s+8|0;if((s|0)==(b+c+(0-(c&7))|0)){b=b+c+(0-(c&7))|0;q=k^i;n=k^p;k=l^t;i=o^m;break}else{q=k^i;n=k^p;l=l^t;k=o^m;i=r}}}switch(c&7){case 7:{e=zf(d[b+6>>0]|0|0,0,48)|0|e;f=z|f;u=5;break}case 6:{u=5;break}case 5:{u=6;break}case 4:{u=7;break}case 3:{u=8;break}case 2:{u=9;break}case 1:{u=10;break}default:{}}if((u|0)==5){v=zf(d[b+5>>0]|0|0,0,40)|0;f=z|f;e=v|e;u=6}if((u|0)==6){f=d[b+4>>0]|0|f;u=7}if((u|0)==7){v=zf(d[b+3>>0]|0|0,0,24)|0;e=v|e;f=z|f;u=8}if((u|0)==8){v=zf(d[b+2>>0]|0|0,0,16)|0;e=v|e;f=z|f;u=9}if((u|0)==9){v=zf(d[b+1>>0]|0|0,0,8)|0;e=v|e;f=z|f;u=10}if((u|0)==10)e=d[b>>0]|0|e;s=e^q;c=f^j;o=lg(n|0,k|0,i|0,r|0)|0;p=z;q=cf(i,r,13)|0;b=z^p;p=cf(o,p,32)|0;u=z;t=lg(s|0,c|0,h|0,g|0)|0;v=z;r=cf(s,c,16)|0;c=z^v;u=lg(r^t|0,c|0,p|0,u|0)|0;p=z;c=cf(r^t,c,21)|0;r=p^z;v=lg(t|0,v|0,q^o|0,b|0)|0;t=z;b=cf(q^o,b,17)|0;o=z^t;t=cf(v,t,32)|0;q=z;p=lg(b^v|0,o|0,u|0,p|0)|0;s=z;o=cf(b^v,o,13)|0;v=z^s;s=cf(p,s,32)|0;b=z;q=lg(t|0,q|0,u^c|0,r|0)|0;t=z;r=cf(u^c,r,16)|0;c=z^t;b=lg(r^q|0,c|0,s|0,b|0)|0;s=z;c=cf(r^q,c,21)|0;r=s^z;t=lg(o^p|0,v|0,q|0,t|0)|0;q=z;v=cf(o^p,v,17)|0;p=z^q;q=cf(t,q,32)|0;o=z;s=lg(b^e|0,s^f|0,v^t|0,p|0)|0;u=z;p=cf(v^t,p,13)|0;t=z^u;u=cf(s,u,32)|0;v=z;o=lg(q^255|0,o|0,b^c|0,r|0)|0;q=z;r=cf(b^c,r,16)|0;c=z^q;v=lg(r^o|0,c|0,u|0,v|0)|0;u=z;c=cf(r^o,c,21)|0;r=u^z;q=lg(o|0,q|0,p^s|0,t|0)|0;o=z;t=cf(p^s,t,17)|0;s=z^o;o=cf(q,o,32)|0;p=z;u=lg(t^q|0,s|0,v|0,u|0)|0;b=z;s=cf(t^q,s,13)|0;q=z^b;b=cf(u,b,32)|0;t=z;p=lg(o|0,p|0,v^c|0,r|0)|0;o=z;r=cf(v^c,r,16)|0;c=z^o;t=lg(r^p|0,c|0,b|0,t|0)|0;b=z;c=cf(r^p,c,21)|0;r=b^z;o=lg(s^u|0,q|0,p|0,o|0)|0;p=z;q=cf(s^u,q,17)|0;u=z^p;p=cf(o,p,32)|0;s=z;b=lg(q^o|0,u|0,t|0,b|0)|0;v=z;u=cf(q^o,u,13)|0;o=z^v;v=cf(b,v,32)|0;q=z;s=lg(p|0,s|0,t^c|0,r|0)|0;p=z;r=cf(t^c,r,16)|0;c=z^p;q=lg(r^s|0,c|0,v|0,q|0)|0;v=z;c=cf(r^s,c,21)|0;r=v^z;p=lg(u^b|0,o|0,s|0,p|0)|0;s=z;o=cf(u^b,o,17)|0;b=z^s;s=cf(p,s,32)|0;u=z;v=lg(o^p|0,b|0,q|0,v|0)|0;t=z;b=cf(o^p,b,13)|0;t=z^t;u=lg(s|0,u|0,q^c|0,r|0)|0;s=z;r=cf(q^c,r,16)|0;r=cf(r^u,z^s,21)|0;c=z;s=lg(b^v|0,t|0,u|0,s|0)|0;u=z;t=cf(b^v,t,17)|0;v=z;b=cf(s,u,32)|0;ze(a,r^s^t^b,c^u^v^z);return 0}function va(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0;T=l;S=l=l+63&-64;l=l+64|0;if(!((f|0)==0&(g|0)==0)){if(g>>>0>63|(g|0)==63&f>>>0>4294967232)Z();E=c[b>>2]|0;F=c[b+4>>2]|0;G=c[b+8>>2]|0;H=c[b+12>>2]|0;I=c[b+16>>2]|0;J=c[b+20>>2]|0;K=c[b+24>>2]|0;L=c[b+28>>2]|0;M=c[b+32>>2]|0;N=c[b+36>>2]|0;O=c[b+40>>2]|0;P=c[b+44>>2]|0;Q=c[b+56>>2]|0;R=c[b+60>>2]|0;h=0;B=c[b+52>>2]|0;y=c[b+48>>2]|0;C=g;D=f;while(1){A=C>>>0<0|(C|0)==0&D>>>0<64;if(A){g=S;f=g+64|0;do{a[g>>0]=0;g=g+1|0}while((g|0)<(f|0));g=0;do{a[S+g>>0]=a[d+g>>0]|0;g=g+1|0}while(0<C>>>0|0==(C|0)&g>>>0<D>>>0);h=e;d=S;e=S}g=E;f=F;i=G;j=H;k=I;m=J;n=K;o=L;p=M;q=N;r=O;s=R;t=Q;u=B;v=y;w=P;x=20;do{ma=g+k|0;ba=Gh(ma^v,16)|0;aa=ba+p|0;na=Gh(aa^k,12)|0;ba=Gh(na+ma^ba,8)|0;Y=Gh(ba+aa^na,7)|0;ia=f+m|0;W=Gh(ia^u,16)|0;V=W+q|0;ja=Gh(V^m,12)|0;W=Gh(ja+ia^W,8)|0;oa=Gh(W+V^ja,7)|0;da=i+n|0;X=Gh(da^t,16)|0;ca=X+r|0;ea=Gh(ca^n,12)|0;X=Gh(ea+da^X,8)|0;ka=Gh(X+ca^ea,7)|0;_=j+o|0;ga=Gh(_^s,16)|0;U=ga+w|0;$=Gh(U^o,12)|0;ga=Gh($+_^ga,8)|0;fa=Gh(ga+U^$,7)|0;la=Gh(ga^oa+(na+ma),16)|0;ha=Gh(la+(X+ca)^oa,12)|0;g=ha+(oa+(na+ma))|0;s=Gh(g^la,8)|0;r=s+(la+(X+ca))|0;m=Gh(r^ha,7)|0;ha=Gh(ka+(ja+ia)^ba,16)|0;ca=Gh(ha+(ga+U)^ka,12)|0;f=ca+(ka+(ja+ia))|0;v=Gh(f^ha,8)|0;w=v+(ha+(ga+U))|0;n=Gh(w^ca,7)|0;ca=Gh(fa+(ea+da)^W,16)|0;U=Gh(ca+(ba+aa)^fa,12)|0;i=U+(fa+(ea+da))|0;u=Gh(i^ca,8)|0;p=u+(ca+(ba+aa))|0;o=Gh(p^U,7)|0;X=Gh($+_+Y^X,16)|0;U=Gh(X+(W+V)^Y,12)|0;j=U+($+_+Y)|0;t=Gh(j^X,8)|0;q=t+(X+(W+V))|0;k=Gh(q^U,7)|0;x=x+-2|0}while((x|0)!=0);$=(Wg(d)|0)^g+E;aa=(Wg(d+4|0)|0)^f+F;ba=(Wg(d+8|0)|0)^i+G;ca=(Wg(d+12|0)|0)^j+H;da=(Wg(d+16|0)|0)^k+I;ea=(Wg(d+20|0)|0)^m+J;fa=(Wg(d+24|0)|0)^n+K;ga=(Wg(d+28|0)|0)^o+L;ha=(Wg(d+32|0)|0)^p+M;ia=(Wg(d+36|0)|0)^q+N;ja=(Wg(d+40|0)|0)^r+O;ka=(Wg(d+44|0)|0)^w+P;la=(Wg(d+48|0)|0)^v+y;ma=(Wg(d+52|0)|0)^u+B;na=(Wg(d+56|0)|0)^t+Q;oa=(Wg(d+60|0)|0)^s+R;f=y+1|0;g=((f|0)==0&1)+B|0;pg(e,$);pg(e+4|0,aa);pg(e+8|0,ba);pg(e+12|0,ca);pg(e+16|0,da);pg(e+20|0,ea);pg(e+24|0,fa);pg(e+28|0,ga);pg(e+32|0,ha);pg(e+36|0,ia);pg(e+40|0,ja);pg(e+44|0,ka);pg(e+48|0,la);pg(e+52|0,ma);pg(e+56|0,na);pg(e+60|0,oa);if(C>>>0<0|(C|0)==0&D>>>0<65)break;oa=lg(D|0,C|0,-64,-1)|0;d=d+64|0;e=e+64|0;B=g;y=f;C=z;D=oa}if(A?D|0:0){d=0;do{a[h+d>>0]=a[e+d>>0]|0;d=d+1|0}while((d|0)!=(D|0))}c[b+48>>2]=f;c[b+52>>2]=g}l=T;return}function wa(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0;s=a[b+80>>0]|0?0:16777216;t=c[b+4>>2]|0;o=c[b+8>>2]|0;p=c[b+12>>2]|0;q=c[b+16>>2]|0;k=c[b+20>>2]|0;j=c[b+24>>2]|0;i=c[b+28>>2]|0;h=c[b+32>>2]|0;g=c[b+36>>2]|0;if(f>>>0>0|(f|0)==0&e>>>0>15){r=c[b>>2]|0;m=e;while(1){y=((Wg(d)|0)&67108863)+k|0;A=((Wg(d+3|0)|0)>>>2&67108863)+j|0;x=((Wg(d+6|0)|0)>>>4&67108863)+i|0;w=((Wg(d+9|0)|0)>>>6)+h|0;k=((Wg(d+12|0)|0)>>>8|s)+g|0;g=ef(y|0,0,r|0,0)|0;e=z;i=ef(A|0,0,q*5|0,0)|0;e=lg(i|0,z|0,g|0,e|0)|0;g=z;i=ef(x|0,0,p*5|0,0)|0;i=lg(e|0,g|0,i|0,z|0)|0;g=z;e=ef(w|0,0,o*5|0,0)|0;e=lg(i|0,g|0,e|0,z|0)|0;g=z;i=ef(k|0,0,t*5|0,0)|0;i=lg(e|0,g|0,i|0,z|0)|0;g=z;e=ef(y|0,0,t|0,0)|0;l=z;v=ef(A|0,0,r|0,0)|0;l=lg(v|0,z|0,e|0,l|0)|0;e=z;v=ef(x|0,0,q*5|0,0)|0;v=lg(l|0,e|0,v|0,z|0)|0;e=z;l=ef(w|0,0,p*5|0,0)|0;l=lg(v|0,e|0,l|0,z|0)|0;e=z;v=ef(k|0,0,o*5|0,0)|0;v=lg(l|0,e|0,v|0,z|0)|0;e=z;l=ef(y|0,0,o|0,0)|0;n=z;u=ef(A|0,0,t|0,0)|0;n=lg(u|0,z|0,l|0,n|0)|0;l=z;u=ef(x|0,0,r|0,0)|0;u=lg(n|0,l|0,u|0,z|0)|0;l=z;n=ef(w|0,0,q*5|0,0)|0;n=lg(u|0,l|0,n|0,z|0)|0;l=z;u=ef(k|0,0,p*5|0,0)|0;u=lg(n|0,l|0,u|0,z|0)|0;l=z;n=ef(y|0,0,p|0,0)|0;h=z;j=ef(A|0,0,o|0,0)|0;h=lg(j|0,z|0,n|0,h|0)|0;n=z;j=ef(x|0,0,t|0,0)|0;j=lg(h|0,n|0,j|0,z|0)|0;n=z;h=ef(w|0,0,r|0,0)|0;h=lg(j|0,n|0,h|0,z|0)|0;n=z;j=ef(k|0,0,q*5|0,0)|0;j=lg(h|0,n|0,j|0,z|0)|0;n=z;h=ef(y|0,0,q|0,0)|0;y=z;A=ef(A|0,0,p|0,0)|0;y=lg(A|0,z|0,h|0,y|0)|0;h=z;x=ef(x|0,0,o|0,0)|0;x=lg(y|0,h|0,x|0,z|0)|0;h=z;w=ef(w|0,0,t|0,0)|0;w=lg(x|0,h|0,w|0,z|0)|0;h=z;k=ef(k|0,0,r|0,0)|0;k=lg(w|0,h|0,k|0,z|0)|0;h=z;g=Cf(i|0,g|0,26)|0;g=lg(v|0,e|0,g|0,0)|0;e=Cf(g|0,z|0,26)|0;e=lg(u|0,l|0,e|0,0)|0;l=Cf(e|0,z|0,26)|0;l=lg(j|0,n|0,l|0,0)|0;n=Cf(l|0,z|0,26)|0;n=lg(k|0,h|0,n|0,0)|0;h=Cf(n|0,z|0,26)|0;m=lg(m|0,f|0,-16,-1)|0;f=z;if(!(f>>>0>0|(f|0)==0&m>>>0>15)){k=(h*5|0)+i&67108863;j=(((h*5|0)+(i&67108863)|0)>>>26)+(g&67108863)|0;i=e&67108863;h=l&67108863;g=n&67108863;break}else{k=(h*5|0)+i&67108863;j=(((h*5|0)+(i&67108863)|0)>>>26)+(g&67108863)|0;i=e&67108863;h=l&67108863;g=n&67108863;d=d+16|0}}}c[b+20>>2]=k;c[b+24>>2]=j;c[b+28>>2]=i;c[b+32>>2]=h;c[b+36>>2]=g;return}function xa(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,A=0,B=0,C=0;y=Yd(d)|0;k=z;x=hf(a[d+4>>0]|0,a[d+5>>0]|0,a[d+6>>0]|0)|0;x=zf(x|0,z|0,6)|0;l=z;w=hf(a[d+7>>0]|0,a[d+8>>0]|0,a[d+9>>0]|0)|0;w=zf(w|0,z|0,5)|0;i=z;t=hf(a[d+10>>0]|0,a[d+11>>0]|0,a[d+12>>0]|0)|0;t=zf(t|0,z|0,3)|0;j=z;s=hf(a[d+13>>0]|0,a[d+14>>0]|0,a[d+15>>0]|0)|0;s=zf(s|0,z|0,2)|0;g=z;f=Yd(d+16|0)|0;h=z;p=hf(a[d+20>>0]|0,a[d+21>>0]|0,a[d+22>>0]|0)|0;p=zf(p|0,z|0,7)|0;e=z;v=hf(a[d+23>>0]|0,a[d+24>>0]|0,a[d+25>>0]|0)|0;v=zf(v|0,z|0,5)|0;u=z;n=hf(a[d+26>>0]|0,a[d+27>>0]|0,a[d+28>>0]|0)|0;n=zf(n|0,z|0,4)|0;o=z;r=hf(a[d+29>>0]|0,a[d+30>>0]|0,a[d+31>>0]|0)|0;r=zf(r|0,z|0,2)|0;d=lg(r&33554428|0,0,16777216,0)|0;d=Cf(d|0,z|0,25)|0;q=z;A=ig(0,0,d|0,q|0)|0;k=lg(A&19|0,0,y|0,k|0)|0;y=z;q=zf(d|0,q|0,25)|0;d=z;A=lg(x|0,l|0,16777216,0)|0;A=$e(A|0,z|0,25)|0;C=z;i=lg(A|0,C|0,w|0,i|0)|0;w=z;C=zf(A|0,C|0,25)|0;C=ig(x|0,l|0,C|0,z|0)|0;l=z;x=lg(t|0,j|0,16777216,0)|0;x=$e(x|0,z|0,25)|0;A=z;g=lg(x|0,A|0,s|0,g|0)|0;s=z;A=zf(x|0,A|0,25)|0;A=ig(t|0,j|0,A|0,z|0)|0;j=z;t=lg(f|0,h|0,16777216,0)|0;t=$e(t|0,z|0,25)|0;x=z;e=lg(p|0,e|0,t|0,x|0)|0;p=z;x=zf(t|0,x|0,25)|0;x=ig(f|0,h|0,x|0,z|0)|0;h=z;f=lg(v|0,u|0,16777216,0)|0;f=$e(f|0,z|0,25)|0;t=z;o=lg(f|0,t|0,n|0,o|0)|0;n=z;t=zf(f|0,t|0,25)|0;f=z;B=lg(k|0,y|0,33554432,0)|0;B=$e(B|0,z|0,26)|0;m=z;l=lg(C|0,l|0,B|0,m|0)|0;m=zf(B|0,m|0,26)|0;m=ig(k|0,y|0,m|0,z|0)|0;y=lg(i|0,w|0,33554432,0)|0;y=$e(y|0,z|0,26)|0;k=z;j=lg(A|0,j|0,y|0,k|0)|0;k=zf(y|0,k|0,26)|0;k=ig(i|0,w|0,k|0,z|0)|0;w=lg(g|0,s|0,33554432,0)|0;w=$e(w|0,z|0,26)|0;i=z;h=lg(x|0,h|0,w|0,i|0)|0;i=zf(w|0,i|0,26)|0;i=ig(g|0,s|0,i|0,z|0)|0;s=lg(e|0,p|0,33554432,0)|0;s=$e(s|0,z|0,26)|0;g=z;u=lg(s|0,g|0,v|0,u|0)|0;f=ig(u|0,z|0,t|0,f|0)|0;g=zf(s|0,g|0,26)|0;g=ig(e|0,p|0,g|0,z|0)|0;p=lg(o|0,n|0,33554432,0)|0;p=$e(p|0,z|0,26)|0;e=z;r=lg(p|0,e|0,r&33554428|0,0)|0;d=ig(r|0,z|0,q|0,d|0)|0;e=zf(p|0,e|0,26)|0;e=ig(o|0,n|0,e|0,z|0)|0;c[b>>2]=m;c[b+4>>2]=l;c[b+8>>2]=k;c[b+12>>2]=j;c[b+16>>2]=i;c[b+20>>2]=h;c[b+24>>2]=g;c[b+28>>2]=f;c[b+32>>2]=e;c[b+36>>2]=d;return}function ya(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;u=c[b>>2]|0;t=c[b+4>>2]|0;s=c[b+8>>2]|0;r=c[b+12>>2]|0;q=c[b+16>>2]|0;l=c[b+20>>2]|0;o=c[b+24>>2]|0;w=c[b+28>>2]|0;m=c[b+32>>2]|0;v=c[b+36>>2]|0;u=ef(u|0,((u|0)<0)<<31>>31|0,121666,0)|0;j=z;t=ef(t|0,((t|0)<0)<<31>>31|0,121666,0)|0;k=z;s=ef(s|0,((s|0)<0)<<31>>31|0,121666,0)|0;h=z;r=ef(r|0,((r|0)<0)<<31>>31|0,121666,0)|0;i=z;q=ef(q|0,((q|0)<0)<<31>>31|0,121666,0)|0;f=z;l=ef(l|0,((l|0)<0)<<31>>31|0,121666,0)|0;g=z;o=ef(o|0,((o|0)<0)<<31>>31|0,121666,0)|0;d=z;w=ef(w|0,((w|0)<0)<<31>>31|0,121666,0)|0;e=z;m=ef(m|0,((m|0)<0)<<31>>31|0,121666,0)|0;n=z;v=ef(v|0,((v|0)<0)<<31>>31|0,121666,0)|0;b=z;x=lg(v|0,b|0,16777216,0)|0;x=$e(x|0,z|0,25)|0;p=z;y=ef(x|0,p|0,19,0)|0;j=lg(y|0,z|0,u|0,j|0)|0;u=z;p=zf(x|0,p|0,25)|0;p=ig(v|0,b|0,p|0,z|0)|0;b=z;v=lg(t|0,k|0,16777216,0)|0;v=$e(v|0,z|0,25)|0;x=z;h=lg(v|0,x|0,s|0,h|0)|0;s=z;x=zf(v|0,x|0,25)|0;x=ig(t|0,k|0,x|0,z|0)|0;k=z;t=lg(r|0,i|0,16777216,0)|0;t=$e(t|0,z|0,25)|0;v=z;f=lg(t|0,v|0,q|0,f|0)|0;q=z;v=zf(t|0,v|0,25)|0;v=ig(r|0,i|0,v|0,z|0)|0;i=z;r=lg(l|0,g|0,16777216,0)|0;r=$e(r|0,z|0,25)|0;t=z;d=lg(r|0,t|0,o|0,d|0)|0;o=z;t=zf(r|0,t|0,25)|0;t=ig(l|0,g|0,t|0,z|0)|0;g=z;l=lg(w|0,e|0,16777216,0)|0;l=$e(l|0,z|0,25)|0;r=z;n=lg(l|0,r|0,m|0,n|0)|0;m=z;r=zf(l|0,r|0,25)|0;r=ig(w|0,e|0,r|0,z|0)|0;e=z;w=lg(j|0,u|0,33554432,0)|0;w=$e(w|0,z|0,26)|0;l=z;k=lg(x|0,k|0,w|0,l|0)|0;l=zf(w|0,l|0,26)|0;l=ig(j|0,u|0,l|0,z|0)|0;u=lg(h|0,s|0,33554432,0)|0;u=$e(u|0,z|0,26)|0;j=z;i=lg(v|0,i|0,u|0,j|0)|0;j=zf(u|0,j|0,26)|0;j=ig(h|0,s|0,j|0,z|0)|0;s=lg(f|0,q|0,33554432,0)|0;s=$e(s|0,z|0,26)|0;h=z;g=lg(t|0,g|0,s|0,h|0)|0;h=zf(s|0,h|0,26)|0;h=ig(f|0,q|0,h|0,z|0)|0;q=lg(d|0,o|0,33554432,0)|0;q=$e(q|0,z|0,26)|0;f=z;e=lg(r|0,e|0,q|0,f|0)|0;f=zf(q|0,f|0,26)|0;f=ig(d|0,o|0,f|0,z|0)|0;o=lg(n|0,m|0,33554432,0)|0;o=$e(o|0,z|0,26)|0;d=z;b=lg(p|0,b|0,o|0,d|0)|0;d=zf(o|0,d|0,26)|0;d=ig(n|0,m|0,d|0,z|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=d;c[a+36>>2]=b;return}function za(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if(!b)if(!e){if(f|0){c[f>>2]=(a>>>0)%(d>>>0);c[f+4>>2]=0}e=0;f=(a>>>0)/(d>>>0)>>>0;return (z=e,f)|0}else{if(!f){e=0;f=0;return (z=e,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;e=0;f=0;return (z=e,f)|0}do if(d){if(e|0){h=(R(e|0)|0)-(R(b|0)|0)|0;if(h>>>0<=31){n=h+1|0;i=a>>>((h+1|0)>>>0)&h-31>>31|b<<31-h;m=b>>>((h+1|0)>>>0)&h-31>>31;g=0;h=a<<31-h;break}if(!f){e=0;f=0;return (z=e,f)|0}c[f>>2]=a|0;c[f+4>>2]=b|b&0;e=0;f=0;return (z=e,f)|0}if(d-1&d|0){h=(R(d|0)|0)+33-(R(b|0)|0)|0;n=h;i=32-h-1>>31&b>>>((h-32|0)>>>0)|(b<<32-h|a>>>(h>>>0))&h-32>>31;m=h-32>>31&b>>>(h>>>0);g=a<<64-h&32-h>>31;h=(b<<64-h|a>>>((h-32|0)>>>0))&32-h>>31|a<<32-h&h-33>>31;break}if(f|0){c[f>>2]=d-1&a;c[f+4>>2]=0}if((d|0)==1){e=b|b&0;f=a|0|0;return (z=e,f)|0}else{f=ee(d|0)|0;e=b>>>(f>>>0)|0;f=b<<32-f|a>>>(f>>>0)|0;return (z=e,f)|0}}else{if(!e){if(f|0){c[f>>2]=(b>>>0)%(d>>>0);c[f+4>>2]=0}e=0;f=(b>>>0)/(d>>>0)>>>0;return (z=e,f)|0}if(!a){if(f|0){c[f>>2]=0;c[f+4>>2]=(b>>>0)%(e>>>0)}d=0;f=(b>>>0)/(e>>>0)>>>0;return (z=d,f)|0}if(!(e-1&e)){if(f|0){c[f>>2]=a|0;c[f+4>>2]=e-1&b|b&0}d=0;f=b>>>((ee(e|0)|0)>>>0);return (z=d,f)|0}h=(R(e|0)|0)-(R(b|0)|0)|0;if(h>>>0<=30){n=h+1|0;i=b<<31-h|a>>>((h+1|0)>>>0);m=b>>>((h+1|0)>>>0);g=0;h=a<<31-h;break}if(!f){e=0;f=0;return (z=e,f)|0}c[f>>2]=a|0;c[f+4>>2]=b|b&0;e=0;f=0;return (z=e,f)|0}while(0);if(!n){j=h;b=m;a=0;h=0}else{k=lg(d|0|0,e|e&0|0,-1,-1)|0;l=z;j=h;b=m;a=n;h=0;do{p=j;j=g>>>31|j<<1;g=h|g<<1;p=i<<1|p>>>31|0;o=i>>>31|b<<1|0;ig(k|0,l|0,p|0,o|0)|0;n=z;m=n>>31|((n|0)<0?-1:0)<<1;h=m&1;i=ig(p|0,o|0,m&(d|0)|0,(((n|0)<0?-1:0)>>31|((n|0)<0?-1:0)<<1)&(e|e&0)|0)|0;b=z;a=a-1|0}while((a|0)!=0);a=0}if(f|0){c[f>>2]=i;c[f+4>>2]=b}o=(g|0)>>>31|j<<1|(0<<1|g>>>31)&0|a;p=(g<<1|0>>>31)&-2|h;return (z=o,p)|0}function Aa(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;if(!d){G=857760878;H=2036477234;I=1634760805;y=1797285236}else{I=Wg(d)|0;G=Wg(d+4|0)|0;H=Wg(d+8|0)|0;y=Wg(d+12|0)|0}z=Wg(c)|0;A=Wg(c+4|0)|0;B=Wg(c+8|0)|0;C=Wg(c+12|0)|0;D=Wg(c+16|0)|0;E=Wg(c+20|0)|0;F=Wg(c+24|0)|0;u=Wg(c+28|0)|0;v=Wg(b)|0;w=Wg(b+4|0)|0;x=Wg(b+8|0)|0;t=Wg(b+12|0)|0;if((e|0)>0){g=z;i=A;l=B;o=C;r=v;q=w;p=x;n=t;m=D;k=u;j=F;h=E;s=0;b=G;c=H;d=y;f=I;do{o=(Gh(f+h|0,7)|0)^o;p=(Gh(o+f|0,9)|0)^p;h=(Gh(p+o|0,13)|0)^h;f=(Gh(h+p|0,18)|0)^f;n=(Gh(g+b|0,7)|0)^n;j=(Gh(n+b|0,9)|0)^j;g=(Gh(j+n|0,13)|0)^g;b=(Gh(g+j|0,18)|0)^b;k=(Gh(r+c|0,7)|0)^k;i=(Gh(k+c|0,9)|0)^i;r=(Gh(i+k|0,13)|0)^r;c=(Gh(r+i|0,18)|0)^c;l=(Gh(m+d|0,7)|0)^l;q=(Gh(l+d|0,9)|0)^q;m=(Gh(q+l|0,13)|0)^m;d=(Gh(m+q|0,18)|0)^d;g=(Gh(l+f|0,7)|0)^g;i=(Gh(g+f|0,9)|0)^i;l=(Gh(i+g|0,13)|0)^l;f=(Gh(l+i|0,18)|0)^f;r=(Gh(b+o|0,7)|0)^r;q=(Gh(r+b|0,9)|0)^q;o=(Gh(q+r|0,13)|0)^o;b=(Gh(o+q|0,18)|0)^b;m=(Gh(c+n|0,7)|0)^m;p=(Gh(m+c|0,9)|0)^p;n=(Gh(p+m|0,13)|0)^n;c=(Gh(n+p|0,18)|0)^c;h=(Gh(d+k|0,7)|0)^h;j=(Gh(h+d|0,9)|0)^j;k=(Gh(j+h|0,13)|0)^k;d=(Gh(k+j|0,18)|0)^d;s=s+2|0}while((s|0)<(e|0))}else{g=z;i=A;l=B;o=C;r=v;q=w;p=x;n=t;m=D;k=u;j=F;h=E;f=I;b=G;c=H;d=y}pg(a,f+I|0);pg(a+4|0,g+z|0);pg(a+8|0,i+A|0);pg(a+12|0,l+B|0);pg(a+16|0,o+C|0);pg(a+20|0,b+G|0);pg(a+24|0,r+v|0);pg(a+28|0,q+w|0);pg(a+32|0,p+x|0);pg(a+36|0,n+t|0);pg(a+40|0,c+H|0);pg(a+44|0,m+D|0);pg(a+48|0,h+E|0);pg(a+52|0,j+F|0);pg(a+56|0,k+u|0);pg(a+60|0,d+y|0);return}function Ba(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+2272|0;Ab(g+2016|0,c);Ab(g+1760|0,e);de(g+480|0,d);Ge(g+320|0,d);Qd(g,g+320|0);Rb(g+320|0,g,g+480|0);Qd(g+160|0,g+320|0);de(g+480+160|0,g+160|0);Rb(g+320|0,g,g+480+160|0);Qd(g+160|0,g+320|0);de(g+480+320|0,g+160|0);Rb(g+320|0,g,g+480+320|0);Qd(g+160|0,g+320|0);de(g+480+480|0,g+160|0);Rb(g+320|0,g,g+480+480|0);Qd(g+160|0,g+320|0);de(g+480+640|0,g+160|0);Rb(g+320|0,g,g+480+640|0);Qd(g+160|0,g+320|0);de(g+480+800|0,g+160|0);Rb(g+320|0,g,g+480+800|0);Qd(g+160|0,g+320|0);de(g+480+960|0,g+160|0);Rb(g+320|0,g,g+480+960|0);Qd(g+160|0,g+320|0);de(g+480+1120|0,g+160|0);Rf(b);c=255;while(1){if(a[g+2016+c>>0]|0)break;if(a[g+1760+c>>0]|0)break;d=c+-1|0;if((c|0)>0)c=d;else{c=d;break}}if((c|0)>-1)while(1){mc(g+320|0,b);d=a[g+2016+c>>0]|0;if(d<<24>>24<=0){if(d<<24>>24<0){Qd(g+160|0,g+320|0);Qb(g+320|0,g+160|0,g+480+((((d<<24>>24)/-2|0)<<24>>24)*160|0)|0)}}else{Qd(g+160|0,g+320|0);Rb(g+320|0,g+160|0,g+480+(((d&255)>>>1&255)*160|0)|0)}d=a[g+1760+c>>0]|0;if(d<<24>>24<=0){if(d<<24>>24<0){Qd(g+160|0,g+320|0);Wb(g+320|0,g+160|0,1272+((((d<<24>>24)/-2|0)<<24>>24)*120|0)|0)}}else{Qd(g+160|0,g+320|0);Xb(g+320|0,g+160|0,1272+(((d&255)>>>1&255)*120|0)|0)}He(b,g+320|0);if((c|0)>0)c=c+-1|0;else break}l=f;return}function Ca(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;u=l;v=l=l+63&-64;l=l+64|0;Kf(v,a);b=0;e=c[v+44>>2]|0;f=c[v+60>>2]|0;g=c[v+12>>2]|0;h=c[v+28>>2]|0;i=c[v+48>>2]|0;j=c[v>>2]|0;k=c[v+16>>2]|0;m=c[v+32>>2]|0;d=c[v+4>>2]|0;n=c[v+20>>2]|0;o=c[v+36>>2]|0;p=c[v+52>>2]|0;q=c[v+24>>2]|0;r=c[v+40>>2]|0;s=c[v+56>>2]|0;t=c[v+8>>2]|0;do{F=i+j|0;F=(F<<7|F>>>25)^k;C=F+j|0;C=(C<<9|C>>>23)^m;z=(C+F<<13|(C+F|0)>>>19)^i;I=(z+C<<18|(z+C|0)>>>14)^j;B=d+n|0;B=(B<<7|B>>>25)^o;y=B+n|0;y=(y<<9|y>>>23)^p;L=(y+B<<13|(y+B|0)>>>19)^d;E=(L+y<<18|(L+y|0)>>>14)^n;x=q+r|0;x=(x<<7|x>>>25)^s;K=x+r|0;K=(K<<9|K>>>23)^t;H=(K+x<<13|(K+x|0)>>>19)^q;A=(H+K<<18|(H+K|0)>>>14)^r;J=e+f|0;J=(J<<7|J>>>25)^g;G=J+f|0;G=(G<<9|G>>>23)^h;D=(G+J<<13|(G+J|0)>>>19)^e;w=(D+G<<18|(D+G|0)>>>14)^f;d=(J+I<<7|(J+I|0)>>>25)^L;L=d+I|0;t=(L<<9|L>>>23)^K;K=t+d|0;g=(K<<13|K>>>19)^J;J=g+t|0;j=(J<<18|J>>>14)^I;q=(F+E<<7|(F+E|0)>>>25)^H;H=q+E|0;h=(H<<9|H>>>23)^G;G=h+q|0;k=(G<<13|G>>>19)^F;F=k+h|0;n=(F<<18|F>>>14)^E;e=(B+A<<7|(B+A|0)>>>25)^D;D=e+A|0;m=(D<<9|D>>>23)^C;C=m+e|0;o=(C<<13|C>>>19)^B;B=o+m|0;r=(B<<18|B>>>14)^A;i=(x+w<<7|(x+w|0)>>>25)^z;z=i+w|0;p=(z<<9|z>>>23)^y;y=p+i|0;s=(y<<13|y>>>19)^x;x=s+p|0;f=(x<<18|x>>>14)^w;b=b+2|0}while(b>>>0<8);c[v>>2]=j;c[v+48>>2]=i;c[v+16>>2]=k;c[v+32>>2]=m;c[v+20>>2]=n;c[v+4>>2]=d;c[v+36>>2]=o;c[v+52>>2]=p;c[v+40>>2]=r;c[v+24>>2]=q;c[v+56>>2]=s;c[v+8>>2]=t;c[v+60>>2]=f;c[v+44>>2]=e;c[v+12>>2]=g;c[v+28>>2]=h;c[a>>2]=(c[a>>2]|0)+j;b=1;while(1){L=a+(b<<2)|0;c[L>>2]=(c[L>>2]|0)+d;b=b+1|0;if((b|0)==16)break;d=c[v+(b<<2)>>2]|0}l=u;return}function Da(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0;n=l;j=l=l+63&-64;l=l+16|0;switch(f|0){case 2:{if(d>>>0<13)f=-31;else{f=b;g=34173;h=f+13|0;do{a[f>>0]=a[g>>0]|0;f=f+1|0;g=g+1|0}while((f|0)<(h|0));b=b+12|0;g=d+-12|0;h=6}break}case 1:{if(d>>>0<12)f=-31;else{f=b;g=34186;h=f+12|0;do{a[f>>0]=a[g>>0]|0;f=f+1|0;g=g+1|0}while((f|0)<(h|0));b=b+11|0;g=d+-11|0;h=6}break}default:f=-31}do if((h|0)==6){f=ib(e)|0;if(!f){kd(j,19);f=xc(j)|0;h=b+f|0;i=g-f|0;if(g>>>0<=f>>>0){f=-31;break}fb(b|0,j|0,f+1|0)|0;if(i>>>0>=4){a[h>>0]=36;a[h+1>>0]=109;a[h+2>>0]=61;a[h+3>>0]=0;kd(j,c[e+44>>2]|0);g=xc(j)|0;b=h+3+g|0;if((i+-3|0)>>>0<=g>>>0){f=-31;break}fb(h+3|0,j|0,g+1|0)|0;if((i+-3-g|0)>>>0>=4){a[b>>0]=44;a[b+1>>0]=116;a[b+2>>0]=61;a[b+3>>0]=0;kd(j,c[e+40>>2]|0);f=xc(j)|0;h=b+3+f|0;d=i+-3-g+-3-f|0;if((i+-3-g+-3|0)>>>0<=f>>>0){f=-31;break}fb(b+3|0,j|0,f+1|0)|0;if(d>>>0>=4){a[h>>0]=44;a[h+1>>0]=112;a[h+2>>0]=61;a[h+3>>0]=0;kd(j,c[e+48>>2]|0);g=xc(j)|0;if((d+-3|0)>>>0<=g>>>0){f=-31;break}fb(h+3|0,j|0,g+1|0)|0;f=h+3+g+1|0;if((d+-3-g|0)>>>0>=2?(a[h+3+g>>0]=36,a[h+3+g+1>>0]=0,j=Eb(f,d+-3-g+-1|0,c[e+16>>2]|0,c[e+20>>2]|0)|0,m=d+-3-g+-1-((j|0)==-1?0:j)|0,k=(j|0)==-1?f:f+j|0,!((j|0)==-1|m>>>0<2)):0){a[k>>0]=36;a[k+1>>0]=0;e=(Eb(k+1|0,m+-1|0,c[e>>2]|0,c[e+4>>2]|0)|0)!=-1;l=n;return (e?0:-31)|0}else f=-31}else f=-31}else f=-31}else f=-31}}while(0);l=n;return f|0}function Ea(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;if(!d){d=1797285236;e=2036477234;f=857760878;g=1634760805}else{g=Wg(d)|0;f=Wg(d+4|0)|0;e=Wg(d+8|0)|0;d=Wg(d+12|0)|0}r=Wg(c)|0;q=Wg(c+4|0)|0;p=Wg(c+8|0)|0;o=Wg(c+12|0)|0;n=Wg(c+16|0)|0;m=Wg(c+20|0)|0;l=Wg(c+24|0)|0;k=Wg(c+28|0)|0;j=Wg(b)|0;i=Wg(b+4|0)|0;h=Wg(b+8|0)|0;s=0;b=Wg(b+12|0)|0;c=g;do{L=r+c|0;A=Gh(j^L,16)|0;z=A+n|0;M=Gh(z^r,12)|0;A=Gh(M+L^A,8)|0;w=Gh(A+z^M,7)|0;H=q+f|0;u=Gh(i^H,16)|0;t=u+m|0;I=Gh(t^q,12)|0;u=Gh(I+H^u,8)|0;N=Gh(u+t^I,7)|0;C=p+e|0;v=Gh(h^C,16)|0;B=v+l|0;D=Gh(B^p,12)|0;v=Gh(D+C^v,8)|0;J=Gh(v+B^D,7)|0;x=o+d|0;F=Gh(b^x,16)|0;g=F+k|0;y=Gh(g^o,12)|0;F=Gh(y+x^F,8)|0;E=Gh(F+g^y,7)|0;K=Gh(F^N+(M+L),16)|0;G=Gh(K+(v+B)^N,12)|0;c=G+(N+(M+L))|0;b=Gh(c^K,8)|0;l=b+(K+(v+B))|0;q=Gh(l^G,7)|0;G=Gh(J+(I+H)^A,16)|0;B=Gh(G+(F+g)^J,12)|0;f=B+(J+(I+H))|0;j=Gh(f^G,8)|0;k=j+(G+(F+g))|0;p=Gh(k^B,7)|0;B=Gh(E+(D+C)^u,16)|0;g=Gh(B+(A+z)^E,12)|0;e=g+(E+(D+C))|0;i=Gh(e^B,8)|0;n=i+(B+(A+z))|0;o=Gh(n^g,7)|0;v=Gh(y+x+w^v,16)|0;g=Gh(v+(u+t)^w,12)|0;d=g+(y+x+w)|0;h=Gh(d^v,8)|0;m=h+(v+(u+t))|0;r=Gh(m^g,7)|0;s=s+1|0}while((s|0)!=10);pg(a,c);pg(a+4|0,f);pg(a+8|0,e);pg(a+12|0,d);pg(a+16|0,j);pg(a+20|0,i);pg(a+24|0,h);pg(a+28|0,b);return 0}function Fa(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0;n=l;m=l=l+63&-64;l=l+704|0;a:do if(!((e|0)==0&(f|0)==0)){r=c[b+72>>2]|0;p=c[b+72+4>>2]|0;k=Cf(r|0,p|0,3)|0;o=zf(e|0,f|0,3)|0;q=z;i=Cf(e|0,f|0,61)|0;j=z;p=lg(r|0,p|0,o|0,q|0)|0;r=z;c[b+72>>2]=p;c[b+72+4>>2]=r;g=c[b+64>>2]|0;h=c[b+64+4>>2]|0;if(r>>>0<q>>>0|(r|0)==(q|0)&p>>>0<o>>>0){g=lg(g|0,h|0,1,0)|0;h=z;c[b+64>>2]=g;c[b+64+4>>2]=h}j=lg(g|0,h|0,i|0,j|0)|0;c[b+64>>2]=j;c[b+64+4>>2]=z;j=ig(128,0,k&127|0,0)|0;g=z;if(g>>>0>f>>>0|(g|0)==(f|0)&j>>>0>e>>>0){g=0;h=0;while(1){q=a[d+g>>0]|0;r=lg(g|0,h|0,k&127|0,0)|0;a[b+80+r>>0]=q;g=lg(g|0,h|0,1,0)|0;h=z;if(!(h>>>0<f>>>0|(h|0)==(f|0)&g>>>0<e>>>0))break a}}if(!((j|0)==0&(g|0)==0)){h=0;i=0;do{q=a[d+h>>0]|0;r=lg(h|0,i|0,k&127|0,0)|0;a[b+80+r>>0]=q;h=lg(h|0,i|0,1,0)|0;i=z}while(i>>>0<g>>>0|(i|0)==(g|0)&h>>>0<j>>>0)}ia(b,b+80|0,m,m+640|0);g=ig(e|0,f|0,j|0,g|0)|0;h=z;if(h>>>0>0|(h|0)==0&g>>>0>127){i=d+j|0;do{ia(b,i,m,m+640|0);i=i+128|0;g=lg(g|0,h|0,-128,-1)|0;h=z}while(h>>>0>0|(h|0)==0&g>>>0>127);j=i}else j=d+j|0;g=g&127;if(!((g|0)==0&0==0)){h=0;i=0;do{a[b+80+h>>0]=a[j+h>>0]|0;h=lg(h|0,i|0,1,0)|0;i=z}while(i>>>0<0|(i|0)==0&h>>>0<g>>>0)}_d(m,704)}while(0);l=n;return 0}function Ga(a,b){a=a|0;b=b|0;var c=0,d=0;c=l;d=l=l+63&-64;l=l+160|0;qa(d+120|0,b);qa(d+80|0,d+120|0);qa(d+80|0,d+80|0);la(d+80|0,b,d+80|0);la(d+120|0,d+120|0,d+80|0);qa(d+40|0,d+120|0);la(d+80|0,d+80|0,d+40|0);qa(d+40|0,d+80|0);b=1;do{qa(d+40|0,d+40|0);b=b+1|0}while((b|0)!=5);la(d+80|0,d+40|0,d+80|0);qa(d+40|0,d+80|0);b=1;do{qa(d+40|0,d+40|0);b=b+1|0}while((b|0)!=10);la(d+40|0,d+40|0,d+80|0);qa(d,d+40|0);b=1;do{qa(d,d);b=b+1|0}while((b|0)!=20);la(d+40|0,d,d+40|0);qa(d+40|0,d+40|0);b=1;do{qa(d+40|0,d+40|0);b=b+1|0}while((b|0)!=10);la(d+80|0,d+40|0,d+80|0);qa(d+40|0,d+80|0);b=1;do{qa(d+40|0,d+40|0);b=b+1|0}while((b|0)!=50);la(d+40|0,d+40|0,d+80|0);qa(d,d+40|0);b=1;do{qa(d,d);b=b+1|0}while((b|0)!=100);la(d+40|0,d,d+40|0);qa(d+40|0,d+40|0);b=1;do{qa(d+40|0,d+40|0);b=b+1|0}while((b|0)!=50);la(d+80|0,d+40|0,d+80|0);qa(d+80|0,d+80|0);b=1;do{qa(d+80|0,d+80|0);b=b+1|0}while((b|0)!=5);la(a,d+80|0,d+120|0);l=c;return}function Ha(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;if(!d){d=1797285236;e=2036477234;f=857760878;o=1634760805}else{o=Wg(d)|0;f=Wg(d+4|0)|0;e=Wg(d+8|0)|0;d=Wg(d+12|0)|0}n=Wg(c)|0;m=Wg(c+4|0)|0;l=Wg(c+8|0)|0;k=Wg(c+12|0)|0;t=Wg(c+16|0)|0;s=Wg(c+20|0)|0;r=Wg(c+24|0)|0;q=Wg(c+28|0)|0;j=Wg(b)|0;i=Wg(b+4|0)|0;h=Wg(b+8|0)|0;g=Wg(b+12|0)|0;p=20;b=f;c=o;while(1){B=(Gh(s+c|0,7)|0)^k;y=(Gh(B+c|0,9)|0)^h;v=(Gh(y+B|0,13)|0)^s;E=(Gh(v+y|0,18)|0)^c;x=(Gh(b+n|0,7)|0)^g;u=(Gh(x+b|0,9)|0)^r;H=(Gh(u+x|0,13)|0)^n;A=(Gh(H+u|0,18)|0)^b;f=(Gh(e+j|0,7)|0)^q;G=(Gh(f+e|0,9)|0)^m;D=(Gh(G+f|0,13)|0)^j;w=(Gh(D+G|0,18)|0)^e;F=(Gh(d+t|0,7)|0)^l;C=(Gh(F+d|0,9)|0)^i;z=(Gh(C+F|0,13)|0)^t;o=(Gh(z+C|0,18)|0)^d;n=(Gh(F+E|0,7)|0)^H;m=(Gh(n+E|0,9)|0)^G;l=(Gh(m+n|0,13)|0)^F;c=(Gh(l+m|0,18)|0)^E;j=(Gh(A+B|0,7)|0)^D;i=(Gh(j+A|0,9)|0)^C;k=(Gh(i+j|0,13)|0)^B;b=(Gh(k+i|0,18)|0)^A;t=(Gh(w+x|0,7)|0)^z;h=(Gh(t+w|0,9)|0)^y;g=(Gh(h+t|0,13)|0)^x;e=(Gh(g+h|0,18)|0)^w;s=(Gh(o+f|0,7)|0)^v;r=(Gh(s+o|0,9)|0)^u;q=(Gh(r+s|0,13)|0)^f;d=(Gh(q+r|0,18)|0)^o;if((p|0)<=2)break;else p=p+-2|0}pg(a,c);pg(a+4|0,b);pg(a+8|0,e);pg(a+12|0,d);pg(a+16|0,j);pg(a+20|0,i);pg(a+24|0,h);pg(a+28|0,g);return 0}function Ia(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=l;e=l=l+63&-64;l=l+128|0;qa(e+80|0,b);qa(e+40|0,e+80|0);qa(e+40|0,e+40|0);la(e+40|0,b,e+40|0);la(e+80|0,e+80|0,e+40|0);qa(e+80|0,e+80|0);la(e+80|0,e+40|0,e+80|0);qa(e+40|0,e+80|0);c=1;do{qa(e+40|0,e+40|0);c=c+1|0}while((c|0)!=5);la(e+80|0,e+40|0,e+80|0);qa(e+40|0,e+80|0);c=1;do{qa(e+40|0,e+40|0);c=c+1|0}while((c|0)!=10);la(e+40|0,e+40|0,e+80|0);qa(e,e+40|0);c=1;do{qa(e,e);c=c+1|0}while((c|0)!=20);la(e+40|0,e,e+40|0);qa(e+40|0,e+40|0);c=1;do{qa(e+40|0,e+40|0);c=c+1|0}while((c|0)!=10);la(e+80|0,e+40|0,e+80|0);qa(e+40|0,e+80|0);c=1;do{qa(e+40|0,e+40|0);c=c+1|0}while((c|0)!=50);la(e+40|0,e+40|0,e+80|0);qa(e,e+40|0);c=1;do{qa(e,e);c=c+1|0}while((c|0)!=100);la(e+40|0,e,e+40|0);qa(e+40|0,e+40|0);c=1;do{qa(e+40|0,e+40|0);c=c+1|0}while((c|0)!=50);la(e+80|0,e+40|0,e+80|0);qa(e+80|0,e+80|0);qa(e+80|0,e+80|0);la(a,e+80|0,b);l=d;return}function Ja(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;m=c[d>>2]|0;h=c[d+4>>2]|0;i=c[d+8>>2]|0;j=c[d+12>>2]|0;p=c[d+16>>2]|0;f=c[d+20>>2]|0;g=c[d+24>>2]|0;n=c[d+28>>2]|0;e=c[d+32>>2]|0;d=c[d+36>>2]|0;o=((((((((((((((d*19|0)+16777216|0)>>>25)+m>>26)+h>>25)+i>>26)+j>>25)+p>>26)+f>>25)+g>>26)+n>>25)+e>>26)+d>>25)*19|0)+m>>26;m=((((((((((((((d*19|0)+16777216|0)>>>25)+m>>26)+h>>25)+i>>26)+j>>25)+p>>26)+f>>25)+g>>26)+n>>25)+e>>26)+d>>25)*19|0)+m-(o<<26)|0;l=o+h-(o+h>>25<<25)|0;k=(o+h>>25)+i-((o+h>>25)+i>>26<<26)|0;q=((o+h>>25)+i>>26)+j>>25;j=((o+h>>25)+i>>26)+j-(q<<25)|0;i=q+p-(q+p>>26<<26)|0;h=(q+p>>26)+f-((q+p>>26)+f>>25<<25)|0;o=((q+p>>26)+f>>25)+g>>26;g=((q+p>>26)+f>>25)+g-(o<<26)|0;f=o+n-(o+n>>25<<25)|0;d=((o+n>>25)+e>>26)+d|0;e=(o+n>>25)+e-((o+n>>25)+e>>26<<26)|0;a[b>>0]=m;a[b+1>>0]=m>>>8;a[b+2>>0]=m>>>16;a[b+3>>0]=l<<2|m>>>24;a[b+4>>0]=l>>>6;a[b+5>>0]=l>>>14;a[b+6>>0]=k<<3|l>>>22;a[b+7>>0]=k>>>5;a[b+8>>0]=k>>>13;a[b+9>>0]=j<<5|k>>>21;a[b+10>>0]=j>>>3;a[b+11>>0]=j>>>11;a[b+12>>0]=i<<6|j>>>19;a[b+13>>0]=i>>>2;a[b+14>>0]=i>>>10;a[b+15>>0]=i>>>18;a[b+16>>0]=h;a[b+17>>0]=h>>>8;a[b+18>>0]=h>>>16;a[b+19>>0]=g<<1|h>>>24;a[b+20>>0]=g>>>7;a[b+21>>0]=g>>>15;a[b+22>>0]=f<<3|g>>>23;a[b+23>>0]=f>>>5;a[b+24>>0]=f>>>13;a[b+25>>0]=e<<4|f>>>21;a[b+26>>0]=e>>>4;a[b+27>>0]=e>>>12;a[b+28>>0]=e>>>20|(d&33554431)<<6;a[b+29>>0]=d>>>2;a[b+30>>0]=d>>>10;a[b+31>>0]=(d&33554431)>>>18;return}function Ka(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0,h=0,i=0;h=l;i=l=l+63&-64;l=l+320|0;g=i+280|0;f=g+32|0;do{a[g>>0]=a[c>>0]|0;g=g+1|0;c=c+1|0}while((g|0)<(f|0));a[i+280>>0]=a[i+280>>0]&-8;a[i+280+31>>0]=a[i+280+31>>0]&63|64;xa(i+240|0,e);Gf(i+200|0);rg(i+160|0);tc(i+120|0,i+240|0);Gf(i+80|0);c=0;f=254;while(1){g=c;c=(d[i+280+(f>>>3)>>0]|0)>>>(f&7)&1;g=c^g;bb(i+200|0,i+120|0,g);bb(i+160|0,i+80|0,g);Fb(i+40|0,i+120|0,i+80|0);Fb(i,i+200|0,i+160|0);Gb(i+200|0,i+200|0,i+160|0);Gb(i+160|0,i+120|0,i+80|0);la(i+80|0,i+40|0,i+200|0);la(i+160|0,i+160|0,i);qa(i+40|0,i);qa(i,i+200|0);Gb(i+120|0,i+80|0,i+160|0);Fb(i+160|0,i+80|0,i+160|0);la(i+200|0,i,i+40|0);Fb(i,i,i+40|0);qa(i+160|0,i+160|0);ya(i+80|0,i);qa(i+120|0,i+120|0);Gb(i+40|0,i+40|0,i+80|0);la(i+80|0,i+240|0,i+160|0);la(i+160|0,i,i+40|0);if((f|0)<=0)break;else f=f+-1|0}bb(i+200|0,i+120|0,c);bb(i+160|0,i+80|0,c);Ga(i+160|0,i+160|0);la(i+200|0,i+200|0,i+160|0);Ja(b,i+200|0);l=h;return 0}function La(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;k=l;j=l=l+63&-64;l=l+16|0;h=c[b+20>>2]|0;i=c[b+4>>2]|0;c[b+20>>2]=0;c[b+4>>2]=0;switch(e|0){case 2:{if(!(ic(d,34138,9)|0)){d=d+9|0;g=4}else d=-32;break}case 1:{if(!(ic(d,34148,8)|0)){d=d+8|0;g=4}else d=-32;break}default:d=-26}do if((g|0)==4)if((ic(d,34157,3)|0)==0?(f=qc(d+3|0,j)|0,(f|0)!=0):0)if((c[j>>2]|0)==19)if(!(ic(f,34161,3)|0)){d=qc(f+3|0,j)|0;if(!d){d=-32;break}c[b+44>>2]=c[j>>2];if(!(ic(d,34165,3)|0)){d=qc(d+3|0,j)|0;if(!d){d=-32;break}c[b+40>>2]=c[j>>2];if(!(ic(d,34169,3)|0)){d=qc(d+3|0,j)|0;if(!d){d=-32;break}g=c[j>>2]|0;c[b+48>>2]=g;c[b+52>>2]=g;if((a[d>>0]|0)==36){c[j>>2]=h;d=wc(c[b+16>>2]|0,j,d+1|0)|0;if(!d){d=-32;break}c[b+20>>2]=c[j>>2];if((a[d>>0]|0)==36){c[j>>2]=i;e=wc(c[b>>2]|0,j,d+1|0)|0;if(!e){d=-32;break}c[b+4>>2]=c[j>>2];d=ib(b)|0;if(!d)d=(a[e>>0]|0)==0?0:-32}else d=-32}else d=-32}else d=-32}else d=-32}else d=-32;else d=-26;else d=-32;while(0);l=k;return d|0}function Ma(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;n=l;m=l=l+63&-64;l=l+288|0;a:do if(!((e|0)==0&(f|0)==0)){i=c[b+32>>2]|0;g=c[b+32+4>>2]|0;j=Cf(i|0,g|0,3)|0;k=zf(e|0,f|0,3)|0;k=lg(i|0,g|0,k|0,z|0)|0;c[b+32>>2]=k;c[b+32+4>>2]=z;k=ig(64,0,j&63|0,0)|0;g=z;if(g>>>0>f>>>0|(g|0)==(f|0)&k>>>0>e>>>0){g=0;h=0;while(1){k=a[d+g>>0]|0;m=lg(g|0,h|0,j&63|0,0)|0;a[b+40+m>>0]=k;g=lg(g|0,h|0,1,0)|0;h=z;if(!(h>>>0<f>>>0|(h|0)==(f|0)&g>>>0<e>>>0))break a}}if(!((k|0)==0&(g|0)==0)){h=0;i=0;do{p=a[d+h>>0]|0;o=lg(h|0,i|0,j&63|0,0)|0;a[b+40+o>>0]=p;h=lg(h|0,i|0,1,0)|0;i=z}while(i>>>0<g>>>0|(i|0)==(g|0)&h>>>0<k>>>0)}pa(b,b+40|0,m,m+256|0);g=ig(e|0,f|0,k|0,g|0)|0;h=z;if(h>>>0>0|(h|0)==0&g>>>0>63){i=d+k|0;do{pa(b,i,m,m+256|0);i=i+64|0;g=lg(g|0,h|0,-64,-1)|0;h=z}while(h>>>0>0|(h|0)==0&g>>>0>63);j=i}else j=d+k|0;g=g&63;if(!((g|0)==0&0==0)){h=0;i=0;do{a[b+40+h>>0]=a[j+h>>0]|0;h=lg(h|0,i|0,1,0)|0;i=z}while(i>>>0<0|(i|0)==0&h>>>0<g>>>0)}_d(m,288)}while(0);l=n;return 0}function Na(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;h=c[b+56>>2]|0;g=c[b+56+4>>2]|0;if(!((h|0)==0&(g|0)==0)){j=ig(16,0,h|0,g|0)|0;l=z;k=l>>>0>f>>>0|(l|0)==(f|0)&j>>>0>e>>>0?e:j;l=l>>>0>f>>>0|(l|0)==(f|0)&j>>>0>e>>>0?f:l;if(!((k|0)==0&(l|0)==0)){j=0;i=0;do{n=a[d+j>>0]|0;h=lg(h|0,g|0,j|0,i|0)|0;a[b+64+h>>0]=n;j=lg(j|0,i|0,1,0)|0;i=z;h=c[b+56>>2]|0;g=c[b+56+4>>2]|0}while(i>>>0<l>>>0|(i|0)==(l|0)&j>>>0<k>>>0)}n=lg(h|0,g|0,k|0,l|0)|0;j=z;c[b+56>>2]=n;c[b+56+4>>2]=j;if(!(j>>>0<0|(j|0)==0&n>>>0<16)){e=ig(e|0,f|0,k|0,l|0)|0;f=z;wa(b,b+64|0,16,0);c[b+56>>2]=0;c[b+56+4>>2]=0;d=d+k|0;m=6}}else m=6;if((m|0)==6){g=e&-16;if(f>>>0>0|(f|0)==0&e>>>0>15){e=ig(e|0,f|0,g|0,f|0)|0;n=z;wa(b,d,g,f);d=d+g|0;g=n}else g=f;if(!((e|0)==0&(g|0)==0)){f=0;h=c[b+56>>2]|0;i=c[b+56+4>>2]|0;j=0;do{m=a[d+f>>0]|0;n=lg(h|0,i|0,f|0,j|0)|0;a[b+64+n>>0]=m;f=lg(f|0,j|0,1,0)|0;j=z;h=c[b+56>>2]|0;i=c[b+56+4>>2]|0}while(j>>>0<g>>>0|(j|0)==(g|0)&f>>>0<e>>>0);n=lg(h|0,i|0,e|0,g|0)|0;c[b+56>>2]=n;c[b+56+4>>2]=z}}return}function Oa(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;if(b){do if((c[b+28>>2]|0)==2){if((c[e>>2]|0)==0?(d[e+8>>0]|0)<=1:0){f=1;break}f=0}else f=1;while(0);g=c[b+12>>2]|0;o=ja(g<<3)|0;if(!o)f=-22;else{n=(f|0)!=0;if(n){hb(b,e,o);g=c[b+12>>2]|0}h=a[e+8>>0]|0;f=(c[e>>2]|0)==0&h<<24>>24==0?2:0;i=c[b+16>>2]|0;h=f+(O(i,c[e+4>>2]|0)|0)+(O(g,h&255)|0)|0;a:do if(f>>>0<g>>>0){m=h;h=(((h>>>0)%(i>>>0)|0|0)==0?i+-1|0:-1)+h|0;g=i;while(1){l=((m>>>0)%(g>>>0)|0|0)==1?m+-1|0:h;if(n)g=o+(f<<3)|0;else g=(c[(c[b>>2]|0)+4>>2]|0)+(l<<10)|0;i=c[g>>2]|0;g=Te(c[g+4>>2]|0,0,c[b+20>>2]|0,0)|0;h=z;k=(c[e>>2]|0)==0;if(k?(a[e+8>>0]|0)==0:0){g=c[e+4>>2]|0;h=0}c[e+12>>2]=f;i=Cb(b,e,i,((h|0)==0?(g|0)==(c[e+4>>2]|0):0)&1)|0;j=c[(c[b>>2]|0)+4>>2]|0;g=ef(c[b+16>>2]|0,0,g|0,h|0)|0;h=j+(m<<10)|0;if(k)na(j+(l<<10)|0,j+(g<<10)+(i<<10)|0,h);else ma(j+(l<<10)|0,j+(g<<10)+(i<<10)|0,h);f=f+1|0;if(f>>>0>=(c[b+12>>2]|0)>>>0)break a;m=m+1|0;h=l+1|0;g=c[b+16>>2]|0}}while(0);sa(o);f=0}}else f=0;return f|0}function Pa(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+400|0;if(!((a|0)==0|(b|0)==0)){Jc(f,0,0,64)|0;pg(f+384|0,c[b+48>>2]|0);ug(f,f+384|0,4,0)|0;pg(f+384|0,c[b+4>>2]|0);ug(f,f+384|0,4,0)|0;pg(f+384|0,c[b+44>>2]|0);ug(f,f+384|0,4,0)|0;pg(f+384|0,c[b+40>>2]|0);ug(f,f+384|0,4,0)|0;pg(f+384|0,19);ug(f,f+384|0,4,0)|0;pg(f+384|0,d);ug(f,f+384|0,4,0)|0;pg(f+384|0,c[b+12>>2]|0);ug(f,f+384|0,4,0)|0;d=c[b+8>>2]|0;if(d|0?(ug(f,d,c[b+12>>2]|0,0)|0,c[b+56>>2]&1|0):0){_d(c[b+8>>2]|0,c[b+12>>2]|0);c[b+12>>2]=0}pg(f+384|0,c[b+20>>2]|0);ug(f,f+384|0,4,0)|0;d=c[b+16>>2]|0;if(d|0)ug(f,d,c[b+20>>2]|0,0)|0;pg(f+384|0,c[b+28>>2]|0);ug(f,f+384|0,4,0)|0;d=c[b+24>>2]|0;if(d|0?(ug(f,d,c[b+28>>2]|0,0)|0,c[b+56>>2]&2|0):0){_d(c[b+24>>2]|0,c[b+28>>2]|0);c[b+28>>2]=0}pg(f+384|0,c[b+36>>2]|0);ug(f,f+384|0,4,0)|0;d=c[b+32>>2]|0;if(d|0)ug(f,d,c[b+36>>2]|0,0)|0;gf(f,a,64)|0}l=e;return}function Qa(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;j=l;k=l=l+63&-64;l=l+528|0;c[k+384>>2]=0;pg(k+384|0,d);if(d>>>0<65){if((Jc(k,0,0,d)|0)>=0){ug(k,k+384|0,4,0)|0;ug(k,e,f,0)|0;gf(k,b,d)|0}}else a:do if((Jc(k,0,0,64)|0)>=0?(ug(k,k+384|0,4,0)|0,ug(k,e,f,0)|0,(gf(k,k+456|0,64)|0)>=0):0){g=b;h=k+456|0;i=g+32|0;do{a[g>>0]=a[h>>0]|0;g=g+1|0;h=h+1|0}while((g|0)<(i|0));g=k+392|0;h=k+456|0;i=g+64|0;do{a[g>>0]=a[h>>0]|0;g=g+1|0;h=h+1|0}while((g|0)<(i|0));if((d+-32|0)>>>0>64){f=d+-32|0;e=b+32|0;do{if((Xc(k+456|0,64,k+392|0,64,0,0,0)|0)<0)break a;g=e;h=k+456|0;i=g+32|0;do{a[g>>0]=a[h>>0]|0;g=g+1|0;h=h+1|0}while((g|0)<(i|0));f=f+-32|0;e=e+32|0;g=k+392|0;h=k+456|0;i=g+64|0;do{a[g>>0]=a[h>>0]|0;g=g+1|0;h=h+1|0}while((g|0)<(i|0))}while(f>>>0>64)}else{f=d+-32|0;e=b+32|0}if((Xc(k+456|0,f,k+392|0,64,0,0,0)|0)>=0)fb(e|0,k+456|0,f|0)|0}while(0);_d(k,384);l=j;return}function Ra(b,e,f,g,h,i,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var m=0,n=0,o=0,p=0;o=l;p=l=l+63&-64;l=l+112|0;if(!((f|0)==0&(g|0)==0)){n=p+16|0;m=n+32|0;do{a[n>>0]=a[k>>0]|0;n=n+1|0;k=k+1|0}while((n|0)<(m|0));k=d[h+4>>0]|d[h+4+1>>0]<<8|d[h+4+2>>0]<<16|d[h+4+3>>0]<<24;c[p>>2]=d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24;c[p+4>>2]=k;k=8;while(1){a[p+k>>0]=i;i=Cf(i|0,j|0,8)|0;k=k+1|0;if((k|0)==16)break;else j=z}if(g>>>0>0|(g|0)==0&f>>>0>63){k=b;i=f;while(1){Tg(p+48|0,p,p+16|0,0)|0;b=0;do{a[k+b>>0]=a[p+48+b>>0]^a[e+b>>0];b=b+1|0}while((b|0)!=64);b=1;j=8;while(1){f=p+j|0;b=(d[f>>0]|0)+b|0;a[f>>0]=b;j=j+1|0;if((j|0)==16)break;else b=b>>>8}j=lg(i|0,g|0,-64,-1)|0;g=z;b=k+64|0;e=e+64|0;if(g>>>0>0|(g|0)==0&j>>>0>63){k=b;i=j}else break}}else j=f;if(!((j|0)==0&(g|0)==0)?(Tg(p+48|0,p,p+16|0,0)|0,j|0):0){g=0;do{a[b+g>>0]=a[p+48+g>>0]^a[e+g>>0];g=g+1|0}while((g|0)!=(j|0))}_d(p+48|0,64);_d(p+16|0,32)}l=o;return 0}function Sa(b,c,d,e,f,g,h){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0;j=l;k=l=l+63&-64;l=l+352|0;Ea(k+256|0,g,h,0)|0;if(b>>>0>d>>>0?0<f>>>0|0==(f|0)&(b-d|0)>>>0<e>>>0:0)i=5;else if(d>>>0>b>>>0?0<f>>>0|0==(f|0)&(d-b|0)>>>0<e>>>0:0)i=5;if((i|0)==5){Md(b|0,d|0,e|0)|0;d=b}h=k+288|0;i=h+32|0;do{a[h>>0]=0;h=h+1|0}while((h|0)<(i|0));h=f>>>0>0|(f|0)==0&e>>>0>32?32:e;i=f>>>0>0|(f|0)==0&e>>>0>32?0:f;if(!((h|0)==0&(i|0)==0)){m=ig(-2,-1,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~e:-33)|0,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~f:-1)|0)|0;fb(k+288+32|0,d|0,m+1|0)|0}m=lg(h|0,i|0,32,0)|0;Zf(k+288|0,k+288|0,m,z,g+16|0,k+256|0)|0;dh(k,k+288|0)|0;if(!((h|0)==0&(i|0)==0)){m=ig(-2,-1,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~e:-33)|0,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~f:-1)|0)|0;fb(b|0,k+288+32|0,m+1|0)|0}_d(k+288|0,64);if(f>>>0>0|(f|0)==0&e>>>0>32){m=ig(e|0,f|0,h|0,i|0)|0;nf(b+h|0,d+h|0,m,z,g+16|0,1,0,k+256|0)|0}_d(k+256|0,32);kg(k,b,e,f)|0;ch(k,c)|0;_d(k,256);l=j;return 0}function Ta(b,e,f,g,h,i){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0;q=l;r=l=l+63&-64;l=l+112|0;if(!((f|0)==0&(g|0)==0)){k=r+16|0;j=k+32|0;do{a[k>>0]=a[i>>0]|0;k=k+1|0;i=i+1|0}while((k|0)<(j|0));k=d[h+4>>0]|d[h+4+1>>0]<<8|d[h+4+2>>0]<<16|d[h+4+3>>0]<<24;c[r>>2]=d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24;c[r+4>>2]=k;c[r+8>>2]=0;c[r+8+4>>2]=0;if(g>>>0>0|(g|0)==0&f>>>0>63){k=e;h=f;do{Qg(r+48|0,r,r+16|0,0)|0;i=0;do{a[b+i>>0]=a[r+48+i>>0]^a[k+i>>0];i=i+1|0}while((i|0)!=64);i=1;j=8;while(1){f=r+j|0;i=(d[f>>0]|0)+i|0;a[f>>0]=i;j=j+1|0;if((j|0)==16)break;else i=i>>>8}h=lg(h|0,g|0,-64,-1)|0;g=z;b=b+64|0;k=k+64|0}while(g>>>0>0|(g|0)==0&h>>>0>63);if(!((h|0)==0&(g|0)==0)){n=b;o=h;p=k;m=8}}else{n=b;o=f;p=e;m=8}if((m|0)==8?(Qg(r+48|0,r,r+16|0,0)|0,o|0):0){i=0;do{a[n+i>>0]=a[r+48+i>>0]^a[p+i>>0];i=i+1|0}while((i|0)!=(o|0))}_d(r+48|0,64);_d(r+16|0,32)}l=q;return 0}function Ua(b,e,f,g,h,i){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0,p=0,q=0,r=0;q=l;r=l=l+63&-64;l=l+112|0;if(!((f|0)==0&(g|0)==0)){k=r+16|0;j=k+32|0;do{a[k>>0]=a[i>>0]|0;k=k+1|0;i=i+1|0}while((k|0)<(j|0));k=d[h+4>>0]|d[h+4+1>>0]<<8|d[h+4+2>>0]<<16|d[h+4+3>>0]<<24;c[r>>2]=d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24;c[r+4>>2]=k;c[r+8>>2]=0;c[r+8+4>>2]=0;if(g>>>0>0|(g|0)==0&f>>>0>63){k=e;h=f;do{Sg(r+48|0,r,r+16|0,0)|0;i=0;do{a[b+i>>0]=a[r+48+i>>0]^a[k+i>>0];i=i+1|0}while((i|0)!=64);i=1;j=8;while(1){f=r+j|0;i=(d[f>>0]|0)+i|0;a[f>>0]=i;j=j+1|0;if((j|0)==16)break;else i=i>>>8}h=lg(h|0,g|0,-64,-1)|0;g=z;b=b+64|0;k=k+64|0}while(g>>>0>0|(g|0)==0&h>>>0>63);if(!((h|0)==0&(g|0)==0)){n=b;o=h;p=k;m=8}}else{n=b;o=f;p=e;m=8}if((m|0)==8?(Sg(r+48|0,r,r+16|0,0)|0,o|0):0){i=0;do{a[n+i>>0]=a[r+48+i>>0]^a[p+i>>0];i=i+1|0}while((i|0)!=(o|0))}_d(r+48|0,64);_d(r+16|0,32)}l=q;return 0}function Va(b,c,d,e,f,g,h){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0;j=l;k=l=l+63&-64;l=l+352|0;Ha(k+256|0,g,h,0)|0;if(b>>>0>d>>>0?0<f>>>0|0==(f|0)&(b-d|0)>>>0<e>>>0:0)i=5;else if(d>>>0>b>>>0?0<f>>>0|0==(f|0)&(d-b|0)>>>0<e>>>0:0)i=5;if((i|0)==5){Md(b|0,d|0,e|0)|0;d=b}h=k+288|0;i=h+32|0;do{a[h>>0]=0;h=h+1|0}while((h|0)<(i|0));h=f>>>0>0|(f|0)==0&e>>>0>32?32:e;i=f>>>0>0|(f|0)==0&e>>>0>32?0:f;if(!((h|0)==0&(i|0)==0)){m=ig(-2,-1,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~e:-33)|0,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~f:-1)|0)|0;fb(k+288+32|0,d|0,m+1|0)|0}m=lg(h|0,i|0,32,0)|0;Vf(k+288|0,k+288|0,m,z,g+16|0,k+256|0)|0;dh(k,k+288|0)|0;if(!((h|0)==0&(i|0)==0)){m=ig(-2,-1,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~e:-33)|0,(~f>>>0>4294967295|(~f|0)==-1&~e>>>0>4294967263?~f:-1)|0)|0;fb(b|0,k+288+32|0,m+1|0)|0}_d(k+288|0,64);if(f>>>0>0|(f|0)==0&e>>>0>32){m=ig(e|0,f|0,h|0,i|0)|0;jf(b+h|0,d+h|0,m,z,g+16|0,1,0,k+256|0)|0}_d(k+256|0,32);kg(k,b,e,f)|0;ch(k,c)|0;_d(k,256);l=j;return 0}function Wa(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=c[b+56>>2]|0;e=c[b+56+4>>2]|0;if(!((f|0)==0&(e|0)==0)){g=1;while(1){a[b+64+f>>0]=g;f=lg(f|0,e|0,1,0)|0;e=z;if(!(e>>>0<0|(e|0)==0&f>>>0<16))break;else g=0}a[b+80>>0]=1;wa(b,b+64|0,16,0)}f=c[b+24>>2]|0;g=(c[b+28>>2]|0)+(f>>>26)|0;k=(g>>>26)+(c[b+32>>2]|0)|0;i=(k>>>26)+(c[b+36>>2]|0)|0;h=((i>>>26)*5|0)+(c[b+20>>2]|0)|0;l=((((h&67108863)+5|0)>>>26)+((h>>>26)+(f&67108863))|0)>>>26;j=(i|-67108864)+((((l+(g&67108863)|0)>>>26)+(k&67108863)|0)>>>26)|0;f=(((h&67108863)+5|0)>>>26)+((h>>>26)+(f&67108863))&67108863&(j>>>31)+-1|j>>31&(h>>>26)+(f&67108863);k=((l+(g&67108863)|0)>>>26)+k&67108863&(j>>>31)+-1|j>>31&(k&67108863);h=lg(h+5&67108863&(j>>>31)+-1|j>>31&(h&67108863)|f<<26|0,0,c[b+40>>2]|0,0)|0;e=z;f=lg(f>>>6|(l+g&67108863&(j>>>31)+-1|j>>31&(g&67108863))<<20|0,0,c[b+44>>2]|0,0)|0;e=lg(f|0,z|0,e|0,0)|0;f=z;g=lg((l+g&67108863&(j>>>31)+-1|j>>31&(g&67108863))>>>12|k<<14|0,0,c[b+48>>2]|0,0)|0;f=lg(g|0,z|0,f|0,0)|0;g=z;i=lg(k>>>18|((j>>>31)+-1&j|j>>31&i)<<8|0,0,c[b+52>>2]|0,0)|0;g=lg(i|0,z|0,g|0,0)|0;pg(d,h);pg(d+4|0,e);pg(d+8|0,f);pg(d+12|0,g);_d(b,88);return}function Xa(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0;if(b<<5|0){h=0;do{c[g+(h<<2)>>2]=Wg(a+(h<<2)|0)|0;h=h+1|0}while((h|0)!=(b<<5|0))}if(!((d|0)==0&(e|0)==0)){h=0;i=0;do{k=ef(h|0,i|0,b<<5|0,0)|0;Ve(f+(k<<2)|0,g,b<<7);Zc(g,g+(b<<5<<2)|0,g+(b<<6<<2)|0,b);k=ef(h|1|0,i|0,b<<5|0,0)|0;Ve(f+(k<<2)|0,g+(b<<5<<2)|0,b<<7);Zc(g+(b<<5<<2)|0,g,g+(b<<6<<2)|0,b);h=lg(h|0,i|0,2,0)|0;i=z}while(i>>>0<e>>>0|(i|0)==(e|0)&h>>>0<d>>>0);h=lg(d|0,e|0,-1,-1)|0;i=z;j=0;k=0;do{l=Ng(g,b)|0;l=ef(l&h|0,z&i|0,b<<5|0,0)|0;Ee(g,f+(l<<2)|0,b<<7);Zc(g,g+(b<<5<<2)|0,g+(b<<6<<2)|0,b);l=Ng(g+(b<<5<<2)|0,b)|0;l=ef(l&h|0,z&i|0,b<<5|0,0)|0;Ee(g+(b<<5<<2)|0,f+(l<<2)|0,b<<7);Zc(g+(b<<5<<2)|0,g,g+(b<<6<<2)|0,b);j=lg(j|0,k|0,2,0)|0;k=z}while(k>>>0<e>>>0|(k|0)==(e|0)&j>>>0<d>>>0)}if(b<<5|0){h=0;do{pg(a+(h<<2)|0,c[g+(h<<2)>>2]|0);h=h+1|0}while((h|0)!=(b<<5|0))}return}function Ya(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;j=l;i=l=l+63&-64;l=l+96|0;Ea(i,f,g,0)|0;Hg(i+32|0,32,0,f+16|0,i)|0;if(!(Yf(c,b,d,e,i+32|0)|0))if(!a)c=0;else{if(b>>>0>=a>>>0?0<e>>>0|0==(e|0)&(b-a|0)>>>0<d>>>0:0)h=8;else if(a>>>0>=b>>>0?0<e>>>0|0==(e|0)&(a-b|0)>>>0<d>>>0:0)h=8;if((h|0)==8){Md(a|0,b|0,d|0)|0;b=a}c=e>>>0>0|(e|0)==0&d>>>0>32?32:d;g=e>>>0>0|(e|0)==0&d>>>0>32?0:e;if((c|0)==0&(g|0)==0)Zf(i+32|0,i+32|0,32,0,f+16|0,i)|0;else{h=ig(-2,-1,(~e>>>0>4294967295|(~e|0)==-1&~d>>>0>4294967263?~d:-33)|0,(~e>>>0>4294967295|(~e|0)==-1&~d>>>0>4294967263?~e:-1)|0)|0;fb(i+32+32|0,b|0,h+1|0)|0;k=lg(c|0,g|0,32,0)|0;Zf(i+32|0,i+32|0,k,z,f+16|0,i)|0;fb(a|0,i+32+32|0,h+1|0)|0}if(e>>>0>0|(e|0)==0&d>>>0>32){k=ig(d|0,e|0,c|0,g|0)|0;nf(a+c|0,b+c|0,k,z,f+16|0,1,0,i)|0}_d(i,32);c=0}else{_d(i,32);c=-1}l=j;return c|0}function Za(a,b){a=a|0;b=b|0;var c=0,e=0,f=0;f=l;c=l=l+63&-64;l=l+208|0;xa(a+40|0,b);Gf(a+80|0);qa(c+160|0,a+40|0);la(c+120|0,c+160|0,1152);Fb(c+160|0,c+160|0,a+80|0);Gb(c+120|0,c+120|0,a+80|0);qa(c+80|0,c+120|0);la(c+80|0,c+80|0,c+120|0);qa(a,c+80|0);la(a,a,c+120|0);la(a,a,c+160|0);Ia(a,a);la(a,a,c+80|0);la(a,a,c+160|0);qa(c+40|0,a);la(c+40|0,c+40|0,c+120|0);Fb(c,c+40|0,c+160|0);if(Oe(c)|0){Gb(c,c+40|0,c+160|0);if(!(Oe(c)|0)){la(a,a,1192);e=4}else a=-1}else e=4;if((e|0)==4){e=Ze(a)|0;if((e|0)==((d[b+31>>0]|0)>>>7|0))fc(a,a);la(a+120|0,a,a+40|0);a=0}l=f;return a|0}function _a(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0;o=ef(j|0,0,i|0,0)|0;n=z;do if(n>>>0>0|(n|0)==0&o>>>0>1073741823){c[8326]=27;a=-1}else{if(h>>>0>0|(h|0)==0&g>>>0>4294967295){c[8326]=27;a=-1;break}o=lg(g|0,h|0,-1,-1)|0;if(h>>>0<0|(h|0)==0&g>>>0<2|((o&g|0)!=0|(z&h|0)!=0)){c[8326]=22;a=-1;break}if((i|0)==0|(j|0)==0){c[8326]=22;a=-1;break}if(!(i>>>0>16777215?1:(33554431/(j>>>0)|0)>>>0<i>>>0)?!(0<h>>>0|(0==(h|0)?(33554431/(i>>>0)|0)>>>0<g>>>0:0)):0){n=O(i<<7,j)|0;o=O(i<<7,g)|0;if((n+o|0)>>>0<o>>>0){c[8326]=12;a=-1;break}m=n+o+(i<<8|64)|0;if(m>>>0<(i<<8|64)>>>0){c[8326]=12;a=-1;break}if((c[a+8>>2]|0)>>>0<m>>>0?(eh(a),(wd(a,m)|0)==0):0){a=-1;break}m=c[a+4>>2]|0;dc(b,d,e,f,m,n);a=0;do{Xa(m+(O(i<<7,a)|0)|0,i,g,h,m+n|0,m+n+o|0);a=a+1|0}while((a|0)!=(j|0));dc(b,d,m,n,k,l);a=0;break}c[8326]=12;a=-1}while(0);return a|0}function $a(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;j=l;i=l=l+63&-64;l=l+96|0;Ha(i,f,g,0)|0;Dg(i+32|0,32,0,f+16|0,i)|0;if(!(Yf(c,b,d,e,i+32|0)|0))if(!a)c=0;else{if(b>>>0>=a>>>0?0<e>>>0|0==(e|0)&(b-a|0)>>>0<d>>>0:0)h=8;else if(a>>>0>=b>>>0?0<e>>>0|0==(e|0)&(a-b|0)>>>0<d>>>0:0)h=8;if((h|0)==8){Md(a|0,b|0,d|0)|0;b=a}c=e>>>0>0|(e|0)==0&d>>>0>32?32:d;g=e>>>0>0|(e|0)==0&d>>>0>32?0:e;if((c|0)==0&(g|0)==0)Vf(i+32|0,i+32|0,32,0,f+16|0,i)|0;else{h=ig(-2,-1,(~e>>>0>4294967295|(~e|0)==-1&~d>>>0>4294967263?~d:-33)|0,(~e>>>0>4294967295|(~e|0)==-1&~d>>>0>4294967263?~e:-1)|0)|0;fb(i+32+32|0,b|0,h+1|0)|0;k=lg(c|0,g|0,32,0)|0;Vf(i+32|0,i+32|0,k,z,f+16|0,i)|0;fb(a|0,i+32+32|0,h+1|0)|0}if(e>>>0>0|(e|0)==0&d>>>0>32){k=ig(d|0,e|0,c|0,g|0)|0;jf(a+c|0,b+c|0,k,z,f+16|0,1,0,i)|0}_d(i,32);c=0}else{_d(i,32);c=-1}l=j;return c|0}function ab(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0;f=l;g=l=l+63&-64;l=l+464|0;e=0;do{i=a[c+e>>0]|0;h=e<<1;a[g+400+h>>0]=i&15;a[g+400+(h|1)>>0]=(i&255)>>>4;e=e+1|0}while((e|0)!=32);e=0;c=0;do{i=g+400+c|0;h=(d[i>>0]|0)+e|0;e=(h<<24)+134217728>>28;a[i>>0]=h-(e<<4);c=c+1|0}while((c|0)!=63);a[g+400+63>>0]=(d[g+400+63>>0]|0)+e;af(b);e=1;do{Jb(g,(e|0)/2|0,a[g+400+e>>0]|0);Xb(g+240|0,b,g);Qd(b,g+240|0);e=e+2|0}while((e|0)<64);Ge(g+240|0,b);He(g+120|0,g+240|0);mc(g+240|0,g+120|0);He(g+120|0,g+240|0);mc(g+240|0,g+120|0);He(g+120|0,g+240|0);mc(g+240|0,g+120|0);Qd(b,g+240|0);e=0;do{Jb(g,(e|0)/2|0,a[g+400+e>>0]|0);Xb(g+240|0,b,g);Qd(b,g+240|0);e=e+2|0}while((e|0)<64);l=f;return}function bb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=c[a>>2]|0;v=c[a+4>>2]|0;t=c[a+8>>2]|0;r=c[a+12>>2]|0;p=c[a+16>>2]|0;n=c[a+20>>2]|0;l=c[a+24>>2]|0;j=c[a+28>>2]|0;h=c[a+32>>2]|0;f=c[a+36>>2]|0;w=c[b>>2]|0;u=c[b+4>>2]|0;s=c[b+8>>2]|0;q=c[b+12>>2]|0;o=c[b+16>>2]|0;m=c[b+20>>2]|0;k=c[b+24>>2]|0;i=c[b+28>>2]|0;g=c[b+32>>2]|0;e=c[b+36>>2]|0;c[a>>2]=(w^x)&0-d^x;c[a+4>>2]=(u^v)&0-d^v;c[a+8>>2]=(s^t)&0-d^t;c[a+12>>2]=(q^r)&0-d^r;c[a+16>>2]=(o^p)&0-d^p;c[a+20>>2]=(m^n)&0-d^n;c[a+24>>2]=(k^l)&0-d^l;c[a+28>>2]=(i^j)&0-d^j;c[a+32>>2]=(g^h)&0-d^h;c[a+36>>2]=(e^f)&0-d^f;c[b>>2]=(w^x)&0-d^w;c[b+4>>2]=(u^v)&0-d^u;c[b+8>>2]=(s^t)&0-d^s;c[b+12>>2]=(q^r)&0-d^q;c[b+16>>2]=(o^p)&0-d^o;c[b+20>>2]=(m^n)&0-d^m;c[b+24>>2]=(k^l)&0-d^k;c[b+28>>2]=(i^j)&0-d^i;c[b+32>>2]=(g^h)&0-d^g;c[b+36>>2]=(e^f)&0-d^e;return}function cb(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0;o=l;p=l=l+63&-64;l=l+112|0;if(!((e|0)==0&(f|0)==0)){j=p+16|0;i=j+32|0;do{a[j>>0]=a[h>>0]|0;j=j+1|0;h=h+1|0}while((j|0)<(i|0));j=d[g+4>>0]|d[g+4+1>>0]<<8|d[g+4+2>>0]<<16|d[g+4+3>>0]<<24;c[p>>2]=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24;c[p+4>>2]=j;c[p+8>>2]=0;c[p+8+4>>2]=0;if(f>>>0>0|(f|0)==0&e>>>0>63){do{Qg(b,p,p+16|0,0)|0;h=1;i=8;while(1){j=p+i|0;h=(d[j>>0]|0)+h|0;a[j>>0]=h;i=i+1|0;if((i|0)==16)break;else h=h>>>8}e=lg(e|0,f|0,-64,-1)|0;f=z;b=b+64|0}while(f>>>0>0|(f|0)==0&e>>>0>63);if(!((e|0)==0&(f|0)==0)){m=b;n=e;k=7}}else{m=b;n=e;k=7}if((k|0)==7?(Qg(p+48|0,p,p+16|0,0)|0,n|0):0){h=0;do{a[m+h>>0]=a[p+48+h>>0]|0;h=h+1|0}while((h|0)!=(n|0))}_d(p+48|0,64);_d(p+16|0,32)}l=o;return 0}function db(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0;o=l;p=l=l+63&-64;l=l+112|0;if(!((e|0)==0&(f|0)==0)){j=p+16|0;i=j+32|0;do{a[j>>0]=a[h>>0]|0;j=j+1|0;h=h+1|0}while((j|0)<(i|0));j=d[g+4>>0]|d[g+4+1>>0]<<8|d[g+4+2>>0]<<16|d[g+4+3>>0]<<24;c[p>>2]=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24;c[p+4>>2]=j;c[p+8>>2]=0;c[p+8+4>>2]=0;if(f>>>0>0|(f|0)==0&e>>>0>63){do{Sg(b,p,p+16|0,0)|0;h=1;i=8;while(1){j=p+i|0;h=(d[j>>0]|0)+h|0;a[j>>0]=h;i=i+1|0;if((i|0)==16)break;else h=h>>>8}e=lg(e|0,f|0,-64,-1)|0;f=z;b=b+64|0}while(f>>>0>0|(f|0)==0&e>>>0>63);if(!((e|0)==0&(f|0)==0)){m=b;n=e;k=7}}else{m=b;n=e;k=7}if((k|0)==7?(Sg(p+48|0,p,p+16|0,0)|0,n|0):0){h=0;do{a[m+h>>0]=a[p+48+h>>0]|0;h=h+1|0}while((h|0)!=(n|0))}_d(p+48|0,64);_d(p+16|0,32)}l=o;return 0}function eb(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,m=0,n=0,o=0,p=0;o=l;p=l=l+63&-64;l=l+112|0;if(!((e|0)==0&(f|0)==0)){j=p+16|0;i=j+32|0;do{a[j>>0]=a[h>>0]|0;j=j+1|0;h=h+1|0}while((j|0)<(i|0));j=d[g+4>>0]|d[g+4+1>>0]<<8|d[g+4+2>>0]<<16|d[g+4+3>>0]<<24;c[p>>2]=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24;c[p+4>>2]=j;c[p+8>>2]=0;c[p+8+4>>2]=0;if(f>>>0>0|(f|0)==0&e>>>0>63){do{Tg(b,p,p+16|0,0)|0;h=1;i=8;while(1){j=p+i|0;h=(d[j>>0]|0)+h|0;a[j>>0]=h;i=i+1|0;if((i|0)==16)break;else h=h>>>8}e=lg(e|0,f|0,-64,-1)|0;f=z;b=b+64|0}while(f>>>0>0|(f|0)==0&e>>>0>63);if(!((e|0)==0&(f|0)==0)){m=b;n=e;k=7}}else{m=b;n=e;k=7}if((k|0)==7?(Tg(p+48|0,p,p+16|0,0)|0,n|0):0){h=0;do{a[m+h>>0]=a[p+48+h>>0]|0;h=h+1|0}while((h|0)!=(n|0))}_d(p+48|0,64);_d(p+16|0,32)}l=o;return 0}function fb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;if((e|0)>=8192)return $(b|0,d|0,e|0)|0;h=b|0;g=b+e|0;if((b&3)==(d&3)){while(b&3){if(!e)return h|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}e=g&-4|0;f=e-64|0;while((b|0)<=(f|0)){c[b>>2]=c[d>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];c[b+16>>2]=c[d+16>>2];c[b+20>>2]=c[d+20>>2];c[b+24>>2]=c[d+24>>2];c[b+28>>2]=c[d+28>>2];c[b+32>>2]=c[d+32>>2];c[b+36>>2]=c[d+36>>2];c[b+40>>2]=c[d+40>>2];c[b+44>>2]=c[d+44>>2];c[b+48>>2]=c[d+48>>2];c[b+52>>2]=c[d+52>>2];c[b+56>>2]=c[d+56>>2];c[b+60>>2]=c[d+60>>2];b=b+64|0;d=d+64|0}while((b|0)<(e|0)){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0}}else{e=g-4|0;while((b|0)<(e|0)){a[b>>0]=a[d>>0]|0;a[b+1>>0]=a[d+1>>0]|0;a[b+2>>0]=a[d+2>>0]|0;a[b+3>>0]=a[d+3>>0]|0;b=b+4|0;d=d+4|0}}while((b|0)<(g|0)){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0}return h|0}function gb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,m=0;m=l;k=l=l+63&-64;l=l+64|0;f=k+8|0;g=f+52|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=xc(a)|0;c[k+36>>2]=f;c[k+20>>2]=f;c[k+4>>2]=f;g=ja(f)|0;c[k+32>>2]=g;h=ja(f)|0;c[k+16>>2]=h;i=ja(f)|0;c[k>>2]=i;do if((h|0)==0|(i|0)==0|(g|0)==0){sa(g);sa(h);sa(i);f=-22}else{j=ja(f)|0;if(!j){sa(g);sa(h);sa(i);f=-22;break}f=La(k,a,e)|0;if(f|0){sa(c[k+32>>2]|0);sa(c[k+16>>2]|0);sa(c[k>>2]|0);sa(j);break}e=rb(c[k+40>>2]|0,c[k+44>>2]|0,c[k+52>>2]|0,b,d,c[k+16>>2]|0,c[k+20>>2]|0,j,c[k+4>>2]|0,0,0,e)|0;sa(c[k+32>>2]|0);sa(c[k+16>>2]|0);if((e|0)==0?(Pc(j,c[k>>2]|0,c[k+4>>2]|0)|0)==0:0)f=0;else f=-35;sa(j);sa(c[k>>2]|0)}while(0);l=m;return f|0}function hb(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;g=l;h=l=l+63&-64;l=l+4096|0;Mh(h+3072|0);Mh(h+2048|0);if((a|0)!=0&(b|0)!=0?(c[h+2048>>2]=c[b>>2],c[h+2048+4>>2]=0,c[h+2048+8>>2]=c[b+4>>2],c[h+2048+8+4>>2]=0,c[h+2048+16>>2]=d[b+8>>0],c[h+2048+16+4>>2]=0,c[h+2048+24>>2]=c[a+8>>2],c[h+2048+24+4>>2]=0,c[h+2048+32>>2]=c[a+4>>2],c[h+2048+32+4>>2]=0,c[h+2048+40>>2]=c[a+28>>2],c[h+2048+40+4>>2]=0,c[a+12>>2]|0):0){b=0;do{f=b&127;if(!f){i=lg(c[h+2048+48>>2]|0,c[h+2048+48+4>>2]|0,1,0)|0;c[h+2048+48>>2]=i;c[h+2048+48+4>>2]=z;Mh(h);Mh(h+1024|0);ma(h+3072|0,h+2048|0,h);ma(h+3072|0,h,h+1024|0)}j=c[h+1024+(f<<3)+4>>2]|0;i=e+(b<<3)|0;c[i>>2]=c[h+1024+(f<<3)>>2];c[i+4>>2]=j;b=b+1|0}while(b>>>0<(c[a+12>>2]|0)>>>0)}l=g;return}function ib(a){a=a|0;var b=0,d=0;do if(a)if(c[a>>2]|0)if((c[a+4>>2]|0)>>>0>=16){if((c[a+8>>2]|0)==0?c[a+12>>2]|0:0){b=-18;break}b=c[a+20>>2]|0;if((c[a+16>>2]|0)!=0|(b|0)==0)if(b>>>0>=8){if((c[a+24>>2]|0)==0?c[a+28>>2]|0:0){b=-20;break}if((c[a+32>>2]|0)==0?c[a+36>>2]|0:0){b=-21;break}b=c[a+44>>2]|0;if(b>>>0>=8)if(b>>>0<=2097152){d=c[a+48>>2]|0;if(b>>>0>=d<<3>>>0)if((c[a+40>>2]|0)>>>0>=3)if(d)if(d>>>0>16777215)b=-17;else{a=c[a+52>>2]|0;return ((a|0)==0?-28:a>>>0>16777215?-29:0)|0}else b=-16;else b=-12;else b=-14}else b=-15;else b=-14}else b=-6;else b=-19}else b=-2;else b=-1;else b=-25;while(0);return b|0}function jb(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;i=b>>>0>0|(b|0)==0&a>>>0>32768?a:32768;h=b>>>0>0|(b|0)==0&a>>>0>32768?b:0;c[g>>2]=8;a:do if(h>>>0<0|(h|0)==0&i>>>0<d>>>5>>>0){c[f>>2]=1;a=fh(i|0,h|0,c[g>>2]<<2|0,0)|0;c[e>>2]=1;a=Cf(a|0,z|0,1)|0;b=z;h=1;do{g=zf(1,0,h|0)|0;f=z;h=h+1|0;if(f>>>0>b>>>0|(f|0)==(b|0)&g>>>0>a>>>0)break a;c[e>>2]=h}while(h>>>0<63)}else{c[e>>2]=1;a=1;b=1;while(1){j=zf(1,0,a|0)|0;k=z;b=b+1|0;if(k>>>0>0|(k|0)==0&j>>>0>d>>>11>>>0)break;c[e>>2]=b;if(b>>>0>=63){a=b;break}else a=b}e=Cf(i|0,h|0,2)|0;e=Cf(e|0,z|0,a|0)|0;j=z;k=j>>>0<0|(j|0)==0&e>>>0<1073741823?e:1073741823;c[f>>2]=(k>>>0)/((c[g>>2]|0)>>>0)|0}while(0);return}function kb(b,e,f,g,h,i,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0;a:do if(!g){n=0;l=0;m=0;k=0}else{k=0;n=0;l=0;p=0;while(1){while(1){m=d[f+l>>0]|0;o=(((m&223)+201&255)+65526^((m&223)+201&255)+65520)>>>8;if((o|((m^48)+65526|0)>>>8)&255|0)break;if(!((h|0)!=0&k<<24>>24==0)){m=0;break a}if(!(Pg(h,m)|0)){m=0;k=0;break a}l=l+1|0;if(l>>>0<g>>>0)k=0;else{m=0;k=0;break a}}if(n>>>0>=e>>>0)break;m=(m&223)+201&255&o|((m^48)+65526|0)>>>8&(m^48);if(!(k<<24>>24))m=m<<4&255;else{a[b+n>>0]=m|p&255;n=n+1|0;m=p}k=~k;l=l+1|0;if(l>>>0<g>>>0)p=m;else{m=0;break a}}c[8326]=34;m=-1}while(0);if(j|0)c[j>>2]=f+(((k<<24>>24!=0)<<31>>31)+l);if(i|0)c[i>>2]=n;return m|0}function lb(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var m=0;m=l;l=l+352|0;vg(m+280|0,64,0,j,k)|0;dh(m,m+280|0)|0;_d(m+280|0,64);kg(m,g,h,i)|0;b=ig(0,0,h|0,i|0)|0;kg(m,35928,b&15,0)|0;kg(m,c,d,e)|0;b=ig(0,0,d|0,e|0)|0;kg(m,35928,b&15,0)|0;ze(m+272|0,h,i);kg(m,m+272|0,8,0)|0;ze(m+272|0,d,e);kg(m,m+272|0,8,0)|0;ch(m,m+256|0)|0;_d(m,256);b=Ch(m+256|0,f)|0;_d(m+256|0,16);do if(a)if(!b){tf(a,c,d,e,j,1,k)|0;b=0;break}else{Pb(a|0,0,d|0)|0;b=-1;break}while(0);l=m;return b|0}function mb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;a:do if((e|0)!=0&(b&3|0)!=0){f=e;while(1){if((a[b>>0]|0)==(d&255)<<24>>24)break a;b=b+1|0;e=f+-1|0;if((e|0)!=0&(b&3|0)!=0)f=e;else{f=e;e=(e|0)!=0;g=5;break}}}else{f=e;e=(e|0)!=0;g=5}while(0);b:do if((g|0)==5)if(e){if((a[b>>0]|0)!=(d&255)<<24>>24){e=O(d&255,16843009)|0;c:do if(f>>>0>3)while(1){h=c[b>>2]^e;if((h&-2139062144^-2139062144)&h+-16843009|0)break;b=b+4|0;f=f+-4|0;if(f>>>0<=3){g=11;break c}}else g=11;while(0);if((g|0)==11)if(!f){f=0;break}while(1){if((a[b>>0]|0)==(d&255)<<24>>24)break b;b=b+1|0;f=f+-1|0;if(!f){f=0;break}}}}else f=0;while(0);return (f|0?b:0)|0}function nb(b,c,d,e,f,g){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;i=l;j=l=l+63&-64;l=l+192|0;if((c+-1&255)>63)Z();if((d|0)!=0&e<<24>>24!=0?(e&255)<=64:0){a[j+128>>0]=c;a[j+128+1>>0]=e;a[j+128+2>>0]=1;a[j+128+3>>0]=1;_g(j+128+4|0);ff(j+128+8|0);c=j+128+16|0;h=c+16|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(h|0));if(!f){c=j+128+32|0;h=c+16|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(h|0))}else pf(j+128|0,f);if(!g){c=j+128+48|0;h=c+16|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(h|0))}else of(j+128|0,g);Cd(b,j+128|0);Pb(j+(e&255)|0,0,128-(e&255)|0)|0;fb(j|0,d|0,e&255|0)|0;Bb(b,j,128,0);_d(j,128);l=i;return}Z()}function ob(a){a=a|0;var b=0,d=0,e=0,f=0;if(a>>>0>=4294967168){c[8326]=12;f=0;return f|0}f=a>>>0<11?16:a+11&-8;e=ja(f+76|0)|0;if(!e){f=0;return f|0}do if(e&63){d=((e+63&-64)+-8-(e+-8)|0)>>>0>15?(e+63&-64)+-8|0:(e+63&-64)+56|0;a=d-(e+-8)|0;b=c[e+-4>>2]|0;if(!(b&3)){c[d>>2]=(c[e+-8>>2]|0)+a;c[d+4>>2]=(b&-8)-a;a=d;break}else{c[d+4>>2]=(b&-8)-a|c[d+4>>2]&1|2;c[d+((b&-8)-a)+4>>2]=c[d+((b&-8)-a)+4>>2]|1;c[e+-4>>2]=a|c[e+-4>>2]&1|2;c[d+4>>2]=c[d+4>>2]|1;ta(e+-8|0,a);a=d;break}}else{a=e+-8|0;d=e+-8|0}while(0);a=a+4|0;b=c[a>>2]|0;if(b&3|0?(b&-8)>>>0>(f+16|0)>>>0:0){e=d+f|0;c[a>>2]=f|b&1|2;c[e+4>>2]=(b&-8)-f|3;c[e+((b&-8)-f)+4>>2]=c[e+((b&-8)-f)+4>>2]|1;ta(e,(b&-8)-f|0)}f=d+8|0;return f|0}function pb(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+192|0;if(d>>>0>128){ue(b)|0;Fa(b,c,d,0)|0;Je(b,h)|0;d=64;c=h}ue(b)|0;e=h+64|0;f=e+128|0;do{a[e>>0]=54;e=e+1|0}while((e|0)<(f|0));g=(d|0)==0;if(!g?(a[h+64>>0]=a[c>>0]^54,(d|0)!=1):0){e=1;do{f=h+64+e|0;a[f>>0]=a[f>>0]^a[c+e>>0];e=e+1|0}while((e|0)!=(d|0))}Fa(b,h+64|0,128,0)|0;ue(b+208|0)|0;e=h+64|0;f=e+128|0;do{a[e>>0]=92;e=e+1|0}while((e|0)<(f|0));if(!g?(a[h+64>>0]=a[c>>0]^92,(d|0)!=1):0){e=1;do{g=h+64+e|0;a[g>>0]=a[g>>0]^a[c+e>>0];e=e+1|0}while((e|0)!=(d|0))}Fa(b+208|0,h+64|0,128,0)|0;_d(h+64|0,128);_d(h,64);l=h;return 0}function qb(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;l=l+96|0;if(d>>>0>64){Bd(b)|0;Ma(b,c,d,0)|0;Ne(b,h)|0;d=32;c=h}Bd(b)|0;e=h+32|0;f=e+64|0;do{a[e>>0]=54;e=e+1|0}while((e|0)<(f|0));g=(d|0)==0;if(!g?(a[h+32>>0]=a[c>>0]^54,(d|0)!=1):0){e=1;do{f=h+32+e|0;a[f>>0]=a[f>>0]^a[c+e>>0];e=e+1|0}while((e|0)!=(d|0))}Ma(b,h+32|0,64,0)|0;Bd(b+104|0)|0;e=h+32|0;f=e+64|0;do{a[e>>0]=92;e=e+1|0}while((e|0)<(f|0));if(!g?(a[h+32>>0]=a[c>>0]^92,(d|0)!=1):0){e=1;do{g=h+32+e|0;a[g>>0]=a[g>>0]^a[c+e>>0];e=e+1|0}while((e|0)!=(d|0))}Ma(b+104|0,h+32|0,64,0)|0;_d(h+32|0,64);_d(h,32);l=h;return 0}function rb(a,b,d,e,f,g,h,i,j,k,m,n){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;m=m|0;n=n|0;var o=0,p=0,q=0;q=l;p=l=l+63&-64;l=l+64|0;o=ja(j)|0;do if(!o)a=-22;else{c[p>>2]=o;c[p+4>>2]=j;c[p+8>>2]=e;c[p+12>>2]=f;c[p+16>>2]=g;c[p+20>>2]=h;c[p+24>>2]=0;c[p+24+4>>2]=0;c[p+24+8>>2]=0;c[p+24+12>>2]=0;c[p+40>>2]=a;c[p+44>>2]=b;c[p+48>>2]=d;c[p+52>>2]=d;c[p+56>>2]=4;a=Ub(p,n)|0;if(a|0){_d(o,j);sa(o);break}if(i|0)fb(i|0,o|0,j|0)|0;if((k|0)!=0&(m|0)!=0?Da(k,m,p,n)|0:0){_d(o,j);_d(k,m);sa(o);a=-31;break}_d(o,j);sa(o);a=0}while(0);l=q;return a|0}function sb(b,c){b=b|0;c=c|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+16|0;Ke(f,b);a[b>>0]=a[f+(d[c>>0]|0)>>0]|0;a[b+1>>0]=a[f+(d[c+1>>0]|0)>>0]|0;a[b+2>>0]=a[f+(d[c+2>>0]|0)>>0]|0;a[b+3>>0]=a[f+(d[c+3>>0]|0)>>0]|0;a[b+4>>0]=a[f+(d[c+4>>0]|0)>>0]|0;a[b+5>>0]=a[f+(d[c+5>>0]|0)>>0]|0;a[b+6>>0]=a[f+(d[c+6>>0]|0)>>0]|0;a[b+7>>0]=a[f+(d[c+7>>0]|0)>>0]|0;a[b+8>>0]=a[f+(d[c+8>>0]|0)>>0]|0;a[b+9>>0]=a[f+(d[c+9>>0]|0)>>0]|0;a[b+10>>0]=a[f+(d[c+10>>0]|0)>>0]|0;a[b+11>>0]=a[f+(d[c+11>>0]|0)>>0]|0;a[b+12>>0]=a[f+(d[c+12>>0]|0)>>0]|0;a[b+13>>0]=a[f+(d[c+13>>0]|0)>>0]|0;a[b+14>>0]=a[f+(d[c+14>>0]|0)>>0]|0;a[b+15>>0]=a[f+(d[c+15>>0]|0)>>0]|0;l=e;return}function tb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=c[a>>2]|0;u=c[a+4>>2]|0;s=c[a+8>>2]|0;q=c[a+12>>2]|0;o=c[a+16>>2]|0;m=c[a+20>>2]|0;k=c[a+24>>2]|0;i=c[a+28>>2]|0;g=c[a+32>>2]|0;e=c[a+36>>2]|0;v=(c[b+4>>2]^u)&0-d;t=(c[b+8>>2]^s)&0-d;r=(c[b+12>>2]^q)&0-d;p=(c[b+16>>2]^o)&0-d;n=(c[b+20>>2]^m)&0-d;l=(c[b+24>>2]^k)&0-d;j=(c[b+28>>2]^i)&0-d;h=(c[b+32>>2]^g)&0-d;f=(c[b+36>>2]^e)&0-d;c[a>>2]=(c[b>>2]^w)&0-d^w;c[a+4>>2]=v^u;c[a+8>>2]=t^s;c[a+12>>2]=r^q;c[a+16>>2]=p^o;c[a+20>>2]=n^m;c[a+24>>2]=l^k;c[a+28>>2]=j^i;c[a+32>>2]=h^g;c[a+36>>2]=f^e;return}function ub(b,d,e,f,g,h,i){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0;j=l;k=l=l+63&-64;l=l+560|0;le(k+496|0,h,32,0)|0;a[k+496>>0]=a[k+496>>0]&-8;a[k+496+31>>0]=a[k+496+31>>0]&63|64;gg(k,i);Fa(k,k+496+32|0,32,0)|0;Fa(k,e,f,g)|0;Je(k,k+432|0)|0;Md(b+32|0,h+32|0,32)|0;ka(k+432|0);ab(k+208|0,k+432|0);Lc(b,k+208|0);gg(k,i);Fa(k,b,64,0)|0;Fa(k,e,f,g)|0;Je(k,k+368|0)|0;ka(k+368|0);ha(b+32|0,k+368|0,k+496|0,k+432|0);_d(k+496|0,64);if(d|0){c[d>>2]=64;c[d+4>>2]=0}l=j;return}function vb(a,b,c,e,f,g){a=a|0;b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;k=l;j=l=l+63&-64;l=l+592|0;if(((vd(a+32|0)|0)==0?(Gd(a)|0)==0:0)?(Za(j+328|0,f)|0)==0:0){h=0;i=0;do{i=d[f+h>>0]|0|i;h=h+1|0}while((h|0)!=32);if(i){gg(j,g);Fa(j,a,32,0)|0;Fa(j,f,32,0)|0;Fa(j,b,c,e)|0;Je(j,j+520|0)|0;ka(j+520|0);Ba(j+208|0,j+520|0,j+328|0,a+32|0);Lc(j+488|0,j+208|0);h=Bh(j+488|0,a)|0;h=((j+488|0)==(a|0)?-1:h)|(Pc(a,j+488|0,32)|0)}else h=-1}else h=-1;l=k;return h|0}function wb(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0;p=l;o=l=l+63&-64;l=l+48|0;if((((((a[f>>0]|0)==36?(a[f+1>>0]|0)==55:0)?(a[f+2>>0]|0)==36:0)?(eg(o+8|0,a[f+3>>0]|0)|0)==0:0)?(j=zf(1,0,c[o+8>>2]|0)|0,k=z,h=Yc(o+4|0,f+4|0)|0,(h|0)!=0):0)?(m=Yc(o,h)|0,(m|0)!=0):0){h=Kh(m)|0;if(!h)h=xc(m)|0;else h=h-m|0;i=h+(m-f)|0;if((!((i+45|0)>>>0>102|(i+45|0)>>>0<h>>>0)?(_a(b,d,e,m,h,j,k,c[o+4>>2]|0,c[o>>2]|0,o+16|0,32)|0)==0:0)?(fb(g|0,f|0,i|0)|0,a[g+i>>0]=36,n=Wc(g+i+1|0,g+102-(g+i+1)|0,o+16|0)|0,_d(o+16|0,32),(n|0)!=0&n>>>0<(g+102|0)>>>0):0)a[n>>0]=0;else g=0}else g=0;l=p;return g|0}function xb(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=l;i=l=l+63&-64;l=l+32|0;a:do if(((b|0)!=0?(d=c[b+20>>2]|0,(d|0)!=0):0)?(c[b+4>>2]|0)!=0:0){h=0;while(1){g=0;do{if(!d)d=0;else{f=g&255;e=0;do{c[i>>2]=h;c[i+4>>2]=e;a[i+8>>0]=f;c[i+12>>2]=0;c[i+16>>2]=c[i>>2];c[i+16+4>>2]=c[i+4>>2];c[i+16+8>>2]=c[i+8>>2];c[i+16+12>>2]=c[i+12>>2];d=Oa(b,i+16|0)|0;e=e+1|0;if(d|0)break a;d=c[b+20>>2]|0}while(e>>>0<d>>>0)}g=g+1|0}while(g>>>0<4);h=h+1|0;if(h>>>0>=(c[b+4>>2]|0)>>>0){d=0;break}}}else d=0;while(0);l=j;return d|0}function yb(a,b,d,e,f,g,h,i,j,k,m,n){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;m=m|0;n=n|0;k=l;l=l+336|0;vg(k+264|0,64,0,m,n)|0;dh(k,k+264|0)|0;_d(k+264|0,64);kg(k,h,i,j)|0;h=ig(0,0,i|0,j|0)|0;kg(k,35928,h&15,0)|0;tf(a,e,f,g,m,1,n)|0;kg(k,a,f,g)|0;h=ig(0,0,f|0,g|0)|0;kg(k,35928,h&15,0)|0;ze(k+256|0,i,j);kg(k,k+256|0,8,0)|0;ze(k+256|0,f,g);kg(k,k+256|0,8,0)|0;ch(k,b)|0;_d(k,256);if(d|0){c[d>>2]=16;c[d+4>>2]=0}l=k;return 0}function zb(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var m=0;m=l;l=l+352|0;Hg(m+280|0,64,0,j,k)|0;dh(m,m+280|0)|0;_d(m+280|0,64);kg(m,g,h,i)|0;ze(m+272|0,h,i);kg(m,m+272|0,8,0)|0;kg(m,c,d,e)|0;ze(m+272|0,d,e);kg(m,m+272|0,8,0)|0;ch(m,m+256|0)|0;_d(m,256);b=Ch(m+256|0,f)|0;_d(m+256|0,16);do if(a)if(!b){nf(a,c,d,e,j,1,0,k)|0;b=0;break}else{Pb(a|0,0,d|0)|0;b=-1;break}while(0);l=m;return b|0}function Ab(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0;e=0;do{a[b+e>>0]=(d[c+(e>>3)>>0]|0)>>>(e&7)&1;e=e+1|0}while((e|0)!=256);h=0;do{i=b+h|0;a:do if(a[i>>0]|0){g=1;do{e=g+h|0;if((e|0)>=256)break a;c=a[b+e>>0]|0;b:do if(c<<24>>24){c=c<<24>>24<<g;f=a[i>>0]|0;if((f+c|0)<16){a[i>>0]=f+c;a[b+e>>0]=0;break}if((f-c|0)<=-16)break a;a[i>>0]=f-c;while(1){c=b+e|0;if(!(a[c>>0]|0))break;a[c>>0]=0;e=e+1|0;if((e|0)>=256)break b}a[c>>0]=1}while(0);g=g+1|0}while((g|0)<7)}while(0);h=h+1|0}while((h|0)!=256);return}function Bb(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;a:do if(!((e|0)==0&(f|0)==0)){g=c[b+352>>2]|0;j=f;while(1){i=256-g|0;f=b+96+g|0;if(!(j>>>0>0|(j|0)==0&e>>>0>i>>>0))break;fb(f|0,d|0,i|0)|0;c[b+352>>2]=(c[b+352>>2]|0)+i;hd(b,128,0);ga(b,b+96|0);f=b+96|0;g=b+224|0;h=f+128|0;do{a[f>>0]=a[g>>0]|0;f=f+1|0;g=g+1|0}while((f|0)<(h|0));g=(c[b+352>>2]|0)+-128|0;c[b+352>>2]=g;e=ig(e|0,j|0,i|0,0)|0;f=z;if((e|0)==0&(f|0)==0)break a;else{d=d+i|0;j=f}}fb(f|0,d|0,e|0)|0;j=lg(c[b+352>>2]|0,0,e|0,j|0)|0;c[b+352>>2]=j}while(0);return}function Cb(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=(c[d>>2]|0)==0;h=c[d+12>>2]|0;do if(j){g=a[d+8>>0]|0;if(!(g<<24>>24)){g=h+-1|0;break}g=O(c[b+12>>2]|0,g&255)|0;if(!f){g=g+(((h|0)==0)<<31>>31)|0;break}else{g=h+-1+g|0;break}}else{g=(c[b+16>>2]|0)-(c[b+12>>2]|0)|0;if(!f){g=g+(((h|0)==0)<<31>>31)|0;break}else{g=h+-1+g|0;break}}while(0);ef(e|0,0,e|0,0)|0;ef(g|0,0,z|0,0)|0;h=ig(g+-1|0,0,z|0,0)|0;e=z;if(!j?(i=a[d+8>>0]|0,i<<24>>24!=3):0){g=O(c[b+12>>2]|0,(i&255)+1|0)|0;f=0}else{g=0;f=0}j=lg(h|0,e|0,g|0,f|0)|0;b=Te(j|0,z|0,c[b+16>>2]|0,0)|0;return b|0}function Db(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;if(d<<24>>24?(d&255)<=64:0){if(!(yh(c[a+80>>2]|0,c[a+80+4>>2]|0)|0)){e=c[a+352>>2]|0;do if(e>>>0>128){hd(a,128,0);ga(a,a+96|0);e=(c[a+352>>2]|0)+-128|0;c[a+352>>2]=e;if(e>>>0<129){fb(a+96|0,a+224|0,e|0)|0;f=a+96|0;g=c[a+352>>2]|0;break}else ba(33525,33557,367,33602)}else{f=a+96|0;g=e}while(0);hd(a,g,0);og(a);e=c[a+352>>2]|0;Pb(a+96+e|0,0,256-e|0)|0;ga(a,f);fb(b|0,a|0,d&255|0)|0;e=0}else e=-1;return e|0}Z();return 0}function Eb(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;switch(((f>>>0)%3|0)&3){case 2:{g=((f>>>0)/3|0)<<2|1;h=3;break}case 1:{g=((f>>>0)/3|0)<<2;h=3;break}default:g=((f>>>0)/3|0)<<2}if((h|0)==3)g=g+2|0;if(g>>>0<c>>>0){if(f){i=0;c=0;while(1){i=d[e>>0]|0|i<<8;c=c+8|0;while(1){j=c+-6|0;h=b+1|0;a[b>>0]=Fe(i>>>j&63)|0;if(j>>>0>5){b=h;c=j}else break}f=f+-1|0;if(!f)break;else{e=e+1|0;b=h;c=j}}if(!j)b=h;else{a[h>>0]=Fe(i<<12-c&63)|0;b=b+2|0}}a[b>>0]=0}else g=-1;return g|0}function Fb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=(c[b+4>>2]|0)-(c[d+4>>2]|0)|0;l=(c[b+8>>2]|0)-(c[d+8>>2]|0)|0;k=(c[b+12>>2]|0)-(c[d+12>>2]|0)|0;j=(c[b+16>>2]|0)-(c[d+16>>2]|0)|0;i=(c[b+20>>2]|0)-(c[d+20>>2]|0)|0;h=(c[b+24>>2]|0)-(c[d+24>>2]|0)|0;g=(c[b+28>>2]|0)-(c[d+28>>2]|0)|0;f=(c[b+32>>2]|0)-(c[d+32>>2]|0)|0;e=(c[b+36>>2]|0)-(c[d+36>>2]|0)|0;c[a>>2]=(c[b>>2]|0)-(c[d>>2]|0);c[a+4>>2]=m;c[a+8>>2]=l;c[a+12>>2]=k;c[a+16>>2]=j;c[a+20>>2]=i;c[a+24>>2]=h;c[a+28>>2]=g;c[a+32>>2]=f;c[a+36>>2]=e;return}function Gb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=(c[d+4>>2]|0)+(c[b+4>>2]|0)|0;l=(c[d+8>>2]|0)+(c[b+8>>2]|0)|0;k=(c[d+12>>2]|0)+(c[b+12>>2]|0)|0;j=(c[d+16>>2]|0)+(c[b+16>>2]|0)|0;i=(c[d+20>>2]|0)+(c[b+20>>2]|0)|0;h=(c[d+24>>2]|0)+(c[b+24>>2]|0)|0;g=(c[d+28>>2]|0)+(c[b+28>>2]|0)|0;f=(c[d+32>>2]|0)+(c[b+32>>2]|0)|0;e=(c[d+36>>2]|0)+(c[b+36>>2]|0)|0;c[a>>2]=(c[d>>2]|0)+(c[b>>2]|0);c[a+4>>2]=m;c[a+8>>2]=l;c[a+12>>2]=k;c[a+16>>2]=j;c[a+20>>2]=i;c[a+24>>2]=h;c[a+28>>2]=g;c[a+32>>2]=f;c[a+36>>2]=e;return}function Hb(b,d){b=b|0;d=d|0;var e=0,f=0;a:do if(!(d&255))b=b+(xc(b)|0)|0;else{if(b&3)do{f=a[b>>0]|0;if(f<<24>>24==0?1:f<<24>>24==(d&255)<<24>>24)break a;b=b+1|0}while((b&3|0)!=0);f=O(d&255,16843009)|0;e=c[b>>2]|0;b:do if(!((e&-2139062144^-2139062144)&e+-16843009))do{e=e^f;if((e&-2139062144^-2139062144)&e+-16843009|0)break b;b=b+4|0;e=c[b>>2]|0}while(!((e&-2139062144^-2139062144)&e+-16843009|0));while(0);while(1){f=a[b>>0]|0;if(f<<24>>24==0?1:f<<24>>24==(d&255)<<24>>24)break;else b=b+1|0}}while(0);return b|0}function Ib(b,e,f,g,h,i){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0;k=l;j=l=l+63&-64;l=l+32|0;m=d[h+4>>0]|d[h+4+1>>0]<<8|d[h+4+2>>0]<<16|d[h+4+3>>0]<<24;c[j>>2]=d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24;c[j+4>>2]=m;c[j+8>>2]=0;c[j+8+4>>2]=0;ze(j+16|0,f,g);h=j+16+8|0;a[h>>0]=0;a[h+1>>0]=0;a[h+2>>0]=0;a[h+3>>0]=0;h=j+16+8+4|0;a[h>>0]=0;a[h+1>>0]=0;a[h+2>>0]=0;a[h+3>>0]=0;if((e+-16|0)>>>0>48){c[8326]=22;b=-1}else b=Hc(b,e,0,0,0,i,32,j+16|0,j)|0;l=k;return b|0}
function da(a,b){a=a|0;b=b|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+272|0;c[e+256>>2]=c[b>>2];c[e+256+4>>2]=c[b+4>>2];c[e+256+8>>2]=c[b+8>>2];c[e+256+12>>2]=c[b+12>>2];sb(e+256|0,35256);Ke(e+240|0,e+256|0);Ke(e+224|0,e+256|0);Ke(e+208|0,e+256|0);Ke(e+192|0,e+256|0);Ke(e+176|0,e+256|0);Ke(e+160|0,e+256|0);Ke(e+144|0,e+256|0);Ke(e,e+160|0);ge(e,1);Od(e,e+144|0);Pd(e,1104);Od(e+144|0,e);ie(e,1);Od(e+160|0,e);Ke(e,e+192|0);ge(e,1);Od(e,e+176|0);Pd(e,1104);Od(e+176|0,e);ie(e,1);Od(e+192|0,e);Ke(e,e+224|0);ge(e,1);Od(e,e+208|0);Pd(e,1104);Od(e+208|0,e);ie(e,1);Od(e+224|0,e);Ke(e,e+256|0);ge(e,1);Od(e,e+240|0);Pd(e,1104);Od(e+240|0,e);ie(e,1);Od(e+256|0,e);Ke(e,e+176|0);ge(e,2);Od(e,e+144|0);Pd(e,1120);Od(e+144|0,e);ie(e,2);Od(e+176|0,e);Ke(e,e+192|0);ge(e,2);Od(e,e+160|0);Pd(e,1120);Od(e+160|0,e);ie(e,2);Od(e+192|0,e);Ke(e,e+240|0);ge(e,2);Od(e,e+208|0);Pd(e,1120);Od(e+208|0,e);ie(e,2);Od(e+240|0,e);Ke(e,e+256|0);ge(e,2);Od(e,e+224|0);Pd(e,1120);Od(e+224|0,e);ie(e,2);Od(e+256|0,e);Ke(e,e+208|0);ge(e,4);Od(e,e+144|0);Pd(e,1136);Od(e+144|0,e);ie(e,4);Od(e+208|0,e);Ke(e,e+224|0);ge(e,4);Od(e,e+160|0);Pd(e,1136);Od(e+160|0,e);ie(e,4);Od(e+224|0,e);Ke(e,e+240|0);ge(e,4);Od(e,e+176|0);Pd(e,1136);Od(e+176|0,e);ie(e,4);Od(e+240|0,e);Ke(e,e+256|0);ge(e,4);Od(e,e+192|0);Pd(e,1136);Od(e+192|0,e);ie(e,4);Od(e+256|0,e);c[a>>2]=c[e+256>>2];c[a+4>>2]=c[e+256+4>>2];c[a+8>>2]=c[e+256+8>>2];c[a+12>>2]=c[e+256+12>>2];c[a+16>>2]=c[e+240>>2];c[a+16+4>>2]=c[e+240+4>>2];c[a+16+8>>2]=c[e+240+8>>2];c[a+16+12>>2]=c[e+240+12>>2];c[a+32>>2]=c[e+224>>2];c[a+32+4>>2]=c[e+224+4>>2];c[a+32+8>>2]=c[e+224+8>>2];c[a+32+12>>2]=c[e+224+12>>2];c[a+48>>2]=c[e+208>>2];c[a+48+4>>2]=c[e+208+4>>2];c[a+48+8>>2]=c[e+208+8>>2];c[a+48+12>>2]=c[e+208+12>>2];c[a+64>>2]=c[e+192>>2];c[a+64+4>>2]=c[e+192+4>>2];c[a+64+8>>2]=c[e+192+8>>2];c[a+64+12>>2]=c[e+192+12>>2];c[a+80>>2]=c[e+176>>2];c[a+80+4>>2]=c[e+176+4>>2];c[a+80+8>>2]=c[e+176+8>>2];c[a+80+12>>2]=c[e+176+12>>2];c[a+96>>2]=c[e+160>>2];c[a+96+4>>2]=c[e+160+4>>2];c[a+96+8>>2]=c[e+160+8>>2];c[a+96+12>>2]=c[e+160+12>>2];c[a+112>>2]=c[e+144>>2];c[a+112+4>>2]=c[e+144+4>>2];c[a+112+8>>2]=c[e+144+8>>2];c[a+112+12>>2]=c[e+144+12>>2];sb(e+256|0,35240);sb(e+240|0,35240);sb(e+224|0,35240);sb(e+208|0,35240);sb(e+192|0,35240);sb(e+176|0,35240);sb(e+160|0,35240);sb(e+144|0,35240);Od(e+176|0,e+160|0);Od(e+224|0,e+240|0);Od(e+176|0,e+256|0);Od(e+160|0,e+224|0);Od(e+208|0,e+256|0);Od(e+160|0,e+208|0);Od(e+208|0,e+144|0);Od(e+208|0,e+192|0);Od(e+144|0,e+176|0);Od(e+208|0,e+240|0);Od(e+192|0,e+176|0);Od(e+224|0,e+144|0);Od(e+240|0,e+176|0);Ke(e+80|0,e+144|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+176|0);Ke(e+48|0,e+224|0);Ke(e+64|0,e+160|0);Od(e+80|0,e+192|0);Od(e+96|0,e+224|0);Od(e+112|0,e+208|0);Od(e+48|0,e+192|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+208|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+144|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+176|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+160|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+224|0);Ke(e+48|0,e+192|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+144|0);Pd(e+64|0,e+208|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+176|0);Rd(e+16|0,e+160|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+160|0);Ke(e+128|0,e+176|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+160|0);Od(e+160|0,e+176|0);Pd(e+160|0,e+32|0);Pd(e+176|0,e+16|0);Od(e+160|0,e+176|0);Od(e+176|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+208|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+208|0);Pd(e+256|0,e+112|0);Pd(e+208|0,e+48|0);Od(e+256|0,e+208|0);Od(e+208|0,e+96|0);Od(e+160|0,e+64|0);Od(e+256|0,e+64|0);Od(e+176|0,e+128|0);Od(e+208|0,e+128|0);Ke(e+64|0,e+144|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+192|0);Od(e+128|0,e+224|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+192|0);Od(e+192|0,e+224|0);Pd(e+192|0,e+112|0);Pd(e+224|0,e+48|0);Od(e+192|0,e+224|0);Od(e+224|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+144|0);Od(e+144|0,e+240|0);Pd(e+144|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+144|0,e+240|0);Od(e+240|0,e+80|0);Od(e+144|0,e+64|0);Od(e+192|0,e+64|0);Od(e+240|0,e+128|0);Od(e+224|0,e+128|0);Od(e+144|0,e+256|0);Od(e+240|0,e+160|0);Od(e+192|0,e+144|0);Od(e+160|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+176|0);Od(e+176|0,e+224|0);Od(e+192|0,e+176|0);Od(e+224|0,e+208|0);Od(e+208|0,e+176|0);Od(e+160|0,e+208|0);ih(e+256|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+192|0,35272);sb(e+160|0,35272);sb(e+208|0,35272);sb(e+144|0,35272);sb(e+224|0,35272);sb(e+176|0,35272);sb(e+256|0,35272);c[e+128>>2]=c[a>>2];c[e+128+4>>2]=c[a+4>>2];c[e+128+8>>2]=c[a+8>>2];c[e+128+12>>2]=c[a+12>>2];c[e+112>>2]=c[a+16>>2];c[e+112+4>>2]=c[a+16+4>>2];c[e+112+8>>2]=c[a+16+8>>2];c[e+112+12>>2]=c[a+16+12>>2];c[e+96>>2]=c[a+32>>2];c[e+96+4>>2]=c[a+32+4>>2];c[e+96+8>>2]=c[a+32+8>>2];c[e+96+12>>2]=c[a+32+12>>2];c[e+80>>2]=c[a+48>>2];c[e+80+4>>2]=c[a+48+4>>2];c[e+80+8>>2]=c[a+48+8>>2];c[e+80+12>>2]=c[a+48+12>>2];c[e+64>>2]=c[a+64>>2];c[e+64+4>>2]=c[a+64+4>>2];c[e+64+8>>2]=c[a+64+8>>2];c[e+64+12>>2]=c[a+64+12>>2];c[e+48>>2]=c[a+80>>2];c[e+48+4>>2]=c[a+80+4>>2];c[e+48+8>>2]=c[a+80+8>>2];c[e+48+12>>2]=c[a+80+12>>2];c[e+32>>2]=c[a+96>>2];c[e+32+4>>2]=c[a+96+4>>2];c[e+32+8>>2]=c[a+96+8>>2];c[e+32+12>>2]=c[a+96+12>>2];c[e+16>>2]=c[a+112>>2];c[e+16+4>>2]=c[a+112+4>>2];c[e+16+8>>2]=c[a+112+8>>2];c[e+16+12>>2]=c[a+112+12>>2];Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);c[a+128>>2]=c[e+256>>2];c[a+128+4>>2]=c[e+256+4>>2];c[a+128+8>>2]=c[e+256+8>>2];c[a+128+12>>2]=c[e+256+12>>2];c[a+144>>2]=c[e+240>>2];c[a+144+4>>2]=c[e+240+4>>2];c[a+144+8>>2]=c[e+240+8>>2];c[a+144+12>>2]=c[e+240+12>>2];c[a+160>>2]=c[e+192>>2];c[a+160+4>>2]=c[e+192+4>>2];c[a+160+8>>2]=c[e+192+8>>2];c[a+160+12>>2]=c[e+192+12>>2];c[a+176>>2]=c[e+160>>2];c[a+176+4>>2]=c[e+160+4>>2];c[a+176+8>>2]=c[e+160+8>>2];c[a+176+12>>2]=c[e+160+12>>2];c[a+192>>2]=c[e+208>>2];c[a+192+4>>2]=c[e+208+4>>2];c[a+192+8>>2]=c[e+208+8>>2];c[a+192+12>>2]=c[e+208+12>>2];c[a+208>>2]=c[e+144>>2];c[a+208+4>>2]=c[e+144+4>>2];c[a+208+8>>2]=c[e+144+8>>2];c[a+208+12>>2]=c[e+144+12>>2];c[a+224>>2]=c[e+224>>2];c[a+224+4>>2]=c[e+224+4>>2];c[a+224+8>>2]=c[e+224+8>>2];c[a+224+12>>2]=c[e+224+12>>2];c[a+240>>2]=c[e+176>>2];c[a+240+4>>2]=c[e+176+4>>2];c[a+240+8>>2]=c[e+176+8>>2];c[a+240+12>>2]=c[e+176+12>>2];Se(e+256|0);Se(e+240|0);Se(e+144|0);Se(e+224|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+192|0,35240);sb(e+160|0,35240);sb(e+208|0,35240);sb(e+144|0,35240);sb(e+224|0,35240);sb(e+176|0,35240);Od(e+144|0,e+224|0);Od(e+192|0,e+240|0);Od(e+144|0,e+256|0);Od(e+224|0,e+192|0);Od(e+160|0,e+256|0);Od(e+224|0,e+160|0);Od(e+160|0,e+176|0);Od(e+160|0,e+208|0);Od(e+176|0,e+144|0);Od(e+160|0,e+240|0);Od(e+208|0,e+144|0);Od(e+192|0,e+176|0);Od(e+240|0,e+144|0);Ke(e+80|0,e+176|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+144|0);Ke(e+48|0,e+192|0);Ke(e+64|0,e+224|0);Od(e+80|0,e+208|0);Od(e+96|0,e+192|0);Od(e+112|0,e+160|0);Od(e+48|0,e+208|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+160|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+176|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+144|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+224|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+192|0);Ke(e+48|0,e+208|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+176|0);Pd(e+64|0,e+160|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+144|0);Rd(e+16|0,e+224|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+224|0);Ke(e+128|0,e+144|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+224|0);Od(e+224|0,e+144|0);Pd(e+224|0,e+32|0);Pd(e+144|0,e+16|0);Od(e+224|0,e+144|0);Od(e+144|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+160|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+160|0);Pd(e+256|0,e+112|0);Pd(e+160|0,e+48|0);Od(e+256|0,e+160|0);Od(e+160|0,e+96|0);Od(e+224|0,e+64|0);Od(e+256|0,e+64|0);Od(e+144|0,e+128|0);Od(e+160|0,e+128|0);Ke(e+64|0,e+176|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+208|0);Od(e+128|0,e+192|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+208|0);Od(e+208|0,e+192|0);Pd(e+208|0,e+112|0);Pd(e+192|0,e+48|0);Od(e+208|0,e+192|0);Od(e+192|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+176|0);Od(e+176|0,e+240|0);Pd(e+176|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+176|0,e+240|0);Od(e+240|0,e+80|0);Od(e+176|0,e+64|0);Od(e+208|0,e+64|0);Od(e+240|0,e+128|0);Od(e+192|0,e+128|0);Od(e+176|0,e+256|0);Od(e+240|0,e+224|0);Od(e+208|0,e+176|0);Od(e+224|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+144|0);Od(e+144|0,e+192|0);Od(e+208|0,e+144|0);Od(e+192|0,e+160|0);Od(e+160|0,e+144|0);Od(e+224|0,e+160|0);ih(e+240|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+208|0,35272);sb(e+224|0,35272);sb(e+160|0,35272);sb(e+176|0,35272);sb(e+192|0,35272);sb(e+144|0,35272);c[e+128>>2]=c[a+128>>2];c[e+128+4>>2]=c[a+128+4>>2];c[e+128+8>>2]=c[a+128+8>>2];c[e+128+12>>2]=c[a+128+12>>2];c[e+112>>2]=c[a+144>>2];c[e+112+4>>2]=c[a+144+4>>2];c[e+112+8>>2]=c[a+144+8>>2];c[e+112+12>>2]=c[a+144+12>>2];c[e+96>>2]=c[a+160>>2];c[e+96+4>>2]=c[a+160+4>>2];c[e+96+8>>2]=c[a+160+8>>2];c[e+96+12>>2]=c[a+160+12>>2];c[e+80>>2]=c[a+176>>2];c[e+80+4>>2]=c[a+176+4>>2];c[e+80+8>>2]=c[a+176+8>>2];c[e+80+12>>2]=c[a+176+12>>2];c[e+64>>2]=c[a+192>>2];c[e+64+4>>2]=c[a+192+4>>2];c[e+64+8>>2]=c[a+192+8>>2];c[e+64+12>>2]=c[a+192+12>>2];c[e+48>>2]=c[a+208>>2];c[e+48+4>>2]=c[a+208+4>>2];c[e+48+8>>2]=c[a+208+8>>2];c[e+48+12>>2]=c[a+208+12>>2];c[e+32>>2]=c[a+224>>2];c[e+32+4>>2]=c[a+224+4>>2];c[e+32+8>>2]=c[a+224+8>>2];c[e+32+12>>2]=c[a+224+12>>2];c[e+16>>2]=c[a+240>>2];c[e+16+4>>2]=c[a+240+4>>2];c[e+16+8>>2]=c[a+240+8>>2];c[e+16+12>>2]=c[a+240+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);c[a+256>>2]=c[e+256>>2];c[a+256+4>>2]=c[e+256+4>>2];c[a+256+8>>2]=c[e+256+8>>2];c[a+256+12>>2]=c[e+256+12>>2];c[a+272>>2]=c[e+240>>2];c[a+272+4>>2]=c[e+240+4>>2];c[a+272+8>>2]=c[e+240+8>>2];c[a+272+12>>2]=c[e+240+12>>2];c[a+288>>2]=c[e+208>>2];c[a+288+4>>2]=c[e+208+4>>2];c[a+288+8>>2]=c[e+208+8>>2];c[a+288+12>>2]=c[e+208+12>>2];c[a+304>>2]=c[e+224>>2];c[a+304+4>>2]=c[e+224+4>>2];c[a+304+8>>2]=c[e+224+8>>2];c[a+304+12>>2]=c[e+224+12>>2];c[a+320>>2]=c[e+160>>2];c[a+320+4>>2]=c[e+160+4>>2];c[a+320+8>>2]=c[e+160+8>>2];c[a+320+12>>2]=c[e+160+12>>2];c[a+336>>2]=c[e+176>>2];c[a+336+4>>2]=c[e+176+4>>2];c[a+336+8>>2]=c[e+176+8>>2];c[a+336+12>>2]=c[e+176+12>>2];c[a+352>>2]=c[e+192>>2];c[a+352+4>>2]=c[e+192+4>>2];c[a+352+8>>2]=c[e+192+8>>2];c[a+352+12>>2]=c[e+192+12>>2];c[a+368>>2]=c[e+144>>2];c[a+368+4>>2]=c[e+144+4>>2];c[a+368+8>>2]=c[e+144+8>>2];c[a+368+12>>2]=c[e+144+12>>2];Se(e+256|0);Se(e+240|0);Se(e+176|0);Se(e+192|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+208|0,35240);sb(e+224|0,35240);sb(e+160|0,35240);sb(e+176|0,35240);sb(e+192|0,35240);sb(e+144|0,35240);Od(e+176|0,e+192|0);Od(e+208|0,e+240|0);Od(e+176|0,e+256|0);Od(e+192|0,e+208|0);Od(e+224|0,e+256|0);Od(e+192|0,e+224|0);Od(e+224|0,e+144|0);Od(e+224|0,e+160|0);Od(e+144|0,e+176|0);Od(e+224|0,e+240|0);Od(e+160|0,e+176|0);Od(e+208|0,e+144|0);Od(e+240|0,e+176|0);Ke(e+80|0,e+144|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+176|0);Ke(e+48|0,e+208|0);Ke(e+64|0,e+192|0);Od(e+80|0,e+160|0);Od(e+96|0,e+208|0);Od(e+112|0,e+224|0);Od(e+48|0,e+160|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+224|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+144|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+176|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+192|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+208|0);Ke(e+48|0,e+160|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+144|0);Pd(e+64|0,e+224|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+176|0);Rd(e+16|0,e+192|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+192|0);Ke(e+128|0,e+176|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+192|0);Od(e+192|0,e+176|0);Pd(e+192|0,e+32|0);Pd(e+176|0,e+16|0);Od(e+192|0,e+176|0);Od(e+176|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+224|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+224|0);Pd(e+256|0,e+112|0);Pd(e+224|0,e+48|0);Od(e+256|0,e+224|0);Od(e+224|0,e+96|0);Od(e+192|0,e+64|0);Od(e+256|0,e+64|0);Od(e+176|0,e+128|0);Od(e+224|0,e+128|0);Ke(e+64|0,e+144|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+160|0);Od(e+128|0,e+208|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+160|0);Od(e+160|0,e+208|0);Pd(e+160|0,e+112|0);Pd(e+208|0,e+48|0);Od(e+160|0,e+208|0);Od(e+208|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+144|0);Od(e+144|0,e+240|0);Pd(e+144|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+144|0,e+240|0);Od(e+240|0,e+80|0);Od(e+144|0,e+64|0);Od(e+160|0,e+64|0);Od(e+240|0,e+128|0);Od(e+208|0,e+128|0);Od(e+144|0,e+256|0);Od(e+240|0,e+192|0);Od(e+160|0,e+144|0);Od(e+192|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+176|0);Od(e+176|0,e+208|0);Od(e+160|0,e+176|0);Od(e+208|0,e+224|0);Od(e+224|0,e+176|0);Od(e+192|0,e+224|0);ih(e+160|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+160|0,35272);sb(e+192|0,35272);sb(e+224|0,35272);sb(e+144|0,35272);sb(e+208|0,35272);sb(e+176|0,35272);c[e+128>>2]=c[a+256>>2];c[e+128+4>>2]=c[a+256+4>>2];c[e+128+8>>2]=c[a+256+8>>2];c[e+128+12>>2]=c[a+256+12>>2];c[e+112>>2]=c[a+272>>2];c[e+112+4>>2]=c[a+272+4>>2];c[e+112+8>>2]=c[a+272+8>>2];c[e+112+12>>2]=c[a+272+12>>2];c[e+96>>2]=c[a+288>>2];c[e+96+4>>2]=c[a+288+4>>2];c[e+96+8>>2]=c[a+288+8>>2];c[e+96+12>>2]=c[a+288+12>>2];c[e+80>>2]=c[a+304>>2];c[e+80+4>>2]=c[a+304+4>>2];c[e+80+8>>2]=c[a+304+8>>2];c[e+80+12>>2]=c[a+304+12>>2];c[e+64>>2]=c[a+320>>2];c[e+64+4>>2]=c[a+320+4>>2];c[e+64+8>>2]=c[a+320+8>>2];c[e+64+12>>2]=c[a+320+12>>2];c[e+48>>2]=c[a+336>>2];c[e+48+4>>2]=c[a+336+4>>2];c[e+48+8>>2]=c[a+336+8>>2];c[e+48+12>>2]=c[a+336+12>>2];c[e+32>>2]=c[a+352>>2];c[e+32+4>>2]=c[a+352+4>>2];c[e+32+8>>2]=c[a+352+8>>2];c[e+32+12>>2]=c[a+352+12>>2];c[e+16>>2]=c[a+368>>2];c[e+16+4>>2]=c[a+368+4>>2];c[e+16+8>>2]=c[a+368+8>>2];c[e+16+12>>2]=c[a+368+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);c[a+384>>2]=c[e+256>>2];c[a+384+4>>2]=c[e+256+4>>2];c[a+384+8>>2]=c[e+256+8>>2];c[a+384+12>>2]=c[e+256+12>>2];c[a+400>>2]=c[e+240>>2];c[a+400+4>>2]=c[e+240+4>>2];c[a+400+8>>2]=c[e+240+8>>2];c[a+400+12>>2]=c[e+240+12>>2];c[a+416>>2]=c[e+160>>2];c[a+416+4>>2]=c[e+160+4>>2];c[a+416+8>>2]=c[e+160+8>>2];c[a+416+12>>2]=c[e+160+12>>2];c[a+432>>2]=c[e+192>>2];c[a+432+4>>2]=c[e+192+4>>2];c[a+432+8>>2]=c[e+192+8>>2];c[a+432+12>>2]=c[e+192+12>>2];c[a+448>>2]=c[e+224>>2];c[a+448+4>>2]=c[e+224+4>>2];c[a+448+8>>2]=c[e+224+8>>2];c[a+448+12>>2]=c[e+224+12>>2];c[a+464>>2]=c[e+144>>2];c[a+464+4>>2]=c[e+144+4>>2];c[a+464+8>>2]=c[e+144+8>>2];c[a+464+12>>2]=c[e+144+12>>2];c[a+480>>2]=c[e+208>>2];c[a+480+4>>2]=c[e+208+4>>2];c[a+480+8>>2]=c[e+208+8>>2];c[a+480+12>>2]=c[e+208+12>>2];c[a+496>>2]=c[e+176>>2];c[a+496+4>>2]=c[e+176+4>>2];c[a+496+8>>2]=c[e+176+8>>2];c[a+496+12>>2]=c[e+176+12>>2];Se(e+256|0);Se(e+240|0);Se(e+144|0);Se(e+208|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+160|0,35240);sb(e+192|0,35240);sb(e+224|0,35240);sb(e+144|0,35240);sb(e+208|0,35240);sb(e+176|0,35240);Od(e+144|0,e+208|0);Od(e+160|0,e+240|0);Od(e+144|0,e+256|0);Od(e+208|0,e+160|0);Od(e+192|0,e+256|0);Od(e+208|0,e+192|0);Od(e+192|0,e+176|0);Od(e+192|0,e+224|0);Od(e+176|0,e+144|0);Od(e+192|0,e+240|0);Od(e+224|0,e+144|0);Od(e+160|0,e+176|0);Od(e+240|0,e+144|0);Ke(e+80|0,e+176|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+144|0);Ke(e+48|0,e+160|0);Ke(e+64|0,e+208|0);Od(e+80|0,e+224|0);Od(e+96|0,e+160|0);Od(e+112|0,e+192|0);Od(e+48|0,e+224|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+192|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+176|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+144|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+208|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+160|0);Ke(e+48|0,e+224|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+176|0);Pd(e+64|0,e+192|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+144|0);Rd(e+16|0,e+208|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+208|0);Ke(e+128|0,e+144|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+208|0);Od(e+208|0,e+144|0);Pd(e+208|0,e+32|0);Pd(e+144|0,e+16|0);Od(e+208|0,e+144|0);Od(e+144|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+192|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+192|0);Pd(e+256|0,e+112|0);Pd(e+192|0,e+48|0);Od(e+256|0,e+192|0);Od(e+192|0,e+96|0);Od(e+208|0,e+64|0);Od(e+256|0,e+64|0);Od(e+144|0,e+128|0);Od(e+192|0,e+128|0);Ke(e+64|0,e+176|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+224|0);Od(e+128|0,e+160|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+224|0);Od(e+224|0,e+160|0);Pd(e+224|0,e+112|0);Pd(e+160|0,e+48|0);Od(e+224|0,e+160|0);Od(e+160|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+176|0);Od(e+176|0,e+240|0);Pd(e+176|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+176|0,e+240|0);Od(e+240|0,e+80|0);Od(e+176|0,e+64|0);Od(e+224|0,e+64|0);Od(e+240|0,e+128|0);Od(e+160|0,e+128|0);Od(e+176|0,e+256|0);Od(e+240|0,e+208|0);Od(e+224|0,e+176|0);Od(e+208|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+144|0);Od(e+144|0,e+160|0);Od(e+224|0,e+144|0);Od(e+160|0,e+192|0);Od(e+192|0,e+144|0);Od(e+208|0,e+192|0);ih(e+208|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+224|0,35272);sb(e+208|0,35272);sb(e+192|0,35272);sb(e+176|0,35272);sb(e+160|0,35272);sb(e+144|0,35272);c[e+128>>2]=c[a+384>>2];c[e+128+4>>2]=c[a+384+4>>2];c[e+128+8>>2]=c[a+384+8>>2];c[e+128+12>>2]=c[a+384+12>>2];c[e+112>>2]=c[a+400>>2];c[e+112+4>>2]=c[a+400+4>>2];c[e+112+8>>2]=c[a+400+8>>2];c[e+112+12>>2]=c[a+400+12>>2];c[e+96>>2]=c[a+416>>2];c[e+96+4>>2]=c[a+416+4>>2];c[e+96+8>>2]=c[a+416+8>>2];c[e+96+12>>2]=c[a+416+12>>2];c[e+80>>2]=c[a+432>>2];c[e+80+4>>2]=c[a+432+4>>2];c[e+80+8>>2]=c[a+432+8>>2];c[e+80+12>>2]=c[a+432+12>>2];c[e+64>>2]=c[a+448>>2];c[e+64+4>>2]=c[a+448+4>>2];c[e+64+8>>2]=c[a+448+8>>2];c[e+64+12>>2]=c[a+448+12>>2];c[e+48>>2]=c[a+464>>2];c[e+48+4>>2]=c[a+464+4>>2];c[e+48+8>>2]=c[a+464+8>>2];c[e+48+12>>2]=c[a+464+12>>2];c[e+32>>2]=c[a+480>>2];c[e+32+4>>2]=c[a+480+4>>2];c[e+32+8>>2]=c[a+480+8>>2];c[e+32+12>>2]=c[a+480+12>>2];c[e+16>>2]=c[a+496>>2];c[e+16+4>>2]=c[a+496+4>>2];c[e+16+8>>2]=c[a+496+8>>2];c[e+16+12>>2]=c[a+496+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);c[a+512>>2]=c[e+256>>2];c[a+512+4>>2]=c[e+256+4>>2];c[a+512+8>>2]=c[e+256+8>>2];c[a+512+12>>2]=c[e+256+12>>2];c[a+528>>2]=c[e+240>>2];c[a+528+4>>2]=c[e+240+4>>2];c[a+528+8>>2]=c[e+240+8>>2];c[a+528+12>>2]=c[e+240+12>>2];c[a+544>>2]=c[e+224>>2];c[a+544+4>>2]=c[e+224+4>>2];c[a+544+8>>2]=c[e+224+8>>2];c[a+544+12>>2]=c[e+224+12>>2];c[a+560>>2]=c[e+208>>2];c[a+560+4>>2]=c[e+208+4>>2];c[a+560+8>>2]=c[e+208+8>>2];c[a+560+12>>2]=c[e+208+12>>2];c[a+576>>2]=c[e+192>>2];c[a+576+4>>2]=c[e+192+4>>2];c[a+576+8>>2]=c[e+192+8>>2];c[a+576+12>>2]=c[e+192+12>>2];c[a+592>>2]=c[e+176>>2];c[a+592+4>>2]=c[e+176+4>>2];c[a+592+8>>2]=c[e+176+8>>2];c[a+592+12>>2]=c[e+176+12>>2];c[a+608>>2]=c[e+160>>2];c[a+608+4>>2]=c[e+160+4>>2];c[a+608+8>>2]=c[e+160+8>>2];c[a+608+12>>2]=c[e+160+12>>2];c[a+624>>2]=c[e+144>>2];c[a+624+4>>2]=c[e+144+4>>2];c[a+624+8>>2]=c[e+144+8>>2];c[a+624+12>>2]=c[e+144+12>>2];Se(e+256|0);Se(e+240|0);Se(e+176|0);Se(e+160|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+224|0,35240);sb(e+208|0,35240);sb(e+192|0,35240);sb(e+176|0,35240);sb(e+160|0,35240);sb(e+144|0,35240);Od(e+176|0,e+160|0);Od(e+224|0,e+240|0);Od(e+176|0,e+256|0);Od(e+160|0,e+224|0);Od(e+208|0,e+256|0);Od(e+160|0,e+208|0);Od(e+208|0,e+144|0);Od(e+208|0,e+192|0);Od(e+144|0,e+176|0);Od(e+208|0,e+240|0);Od(e+192|0,e+176|0);Od(e+224|0,e+144|0);Od(e+240|0,e+176|0);Ke(e+80|0,e+144|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+176|0);Ke(e+48|0,e+224|0);Ke(e+64|0,e+160|0);Od(e+80|0,e+192|0);Od(e+96|0,e+224|0);Od(e+112|0,e+208|0);Od(e+48|0,e+192|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+208|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+144|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+176|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+160|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+224|0);Ke(e+48|0,e+192|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+144|0);Pd(e+64|0,e+208|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+176|0);Rd(e+16|0,e+160|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+160|0);Ke(e+128|0,e+176|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+160|0);Od(e+160|0,e+176|0);Pd(e+160|0,e+32|0);Pd(e+176|0,e+16|0);Od(e+160|0,e+176|0);Od(e+176|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+208|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+208|0);Pd(e+256|0,e+112|0);Pd(e+208|0,e+48|0);Od(e+256|0,e+208|0);Od(e+208|0,e+96|0);Od(e+160|0,e+64|0);Od(e+256|0,e+64|0);Od(e+176|0,e+128|0);Od(e+208|0,e+128|0);Ke(e+64|0,e+144|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+192|0);Od(e+128|0,e+224|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+192|0);Od(e+192|0,e+224|0);Pd(e+192|0,e+112|0);Pd(e+224|0,e+48|0);Od(e+192|0,e+224|0);Od(e+224|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+144|0);Od(e+144|0,e+240|0);Pd(e+144|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+144|0,e+240|0);Od(e+240|0,e+80|0);Od(e+144|0,e+64|0);Od(e+192|0,e+64|0);Od(e+240|0,e+128|0);Od(e+224|0,e+128|0);Od(e+144|0,e+256|0);Od(e+240|0,e+160|0);Od(e+192|0,e+144|0);Od(e+160|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+176|0);Od(e+176|0,e+224|0);Od(e+192|0,e+176|0);Od(e+224|0,e+208|0);Od(e+208|0,e+176|0);Od(e+160|0,e+208|0);ih(e+208|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+192|0,35272);sb(e+160|0,35272);sb(e+208|0,35272);sb(e+144|0,35272);sb(e+224|0,35272);sb(e+176|0,35272);c[e+128>>2]=c[a+512>>2];c[e+128+4>>2]=c[a+512+4>>2];c[e+128+8>>2]=c[a+512+8>>2];c[e+128+12>>2]=c[a+512+12>>2];c[e+112>>2]=c[a+528>>2];c[e+112+4>>2]=c[a+528+4>>2];c[e+112+8>>2]=c[a+528+8>>2];c[e+112+12>>2]=c[a+528+12>>2];c[e+96>>2]=c[a+544>>2];c[e+96+4>>2]=c[a+544+4>>2];c[e+96+8>>2]=c[a+544+8>>2];c[e+96+12>>2]=c[a+544+12>>2];c[e+80>>2]=c[a+560>>2];c[e+80+4>>2]=c[a+560+4>>2];c[e+80+8>>2]=c[a+560+8>>2];c[e+80+12>>2]=c[a+560+12>>2];c[e+64>>2]=c[a+576>>2];c[e+64+4>>2]=c[a+576+4>>2];c[e+64+8>>2]=c[a+576+8>>2];c[e+64+12>>2]=c[a+576+12>>2];c[e+48>>2]=c[a+592>>2];c[e+48+4>>2]=c[a+592+4>>2];c[e+48+8>>2]=c[a+592+8>>2];c[e+48+12>>2]=c[a+592+12>>2];c[e+32>>2]=c[a+608>>2];c[e+32+4>>2]=c[a+608+4>>2];c[e+32+8>>2]=c[a+608+8>>2];c[e+32+12>>2]=c[a+608+12>>2];c[e+16>>2]=c[a+624>>2];c[e+16+4>>2]=c[a+624+4>>2];c[e+16+8>>2]=c[a+624+8>>2];c[e+16+12>>2]=c[a+624+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);c[a+640>>2]=c[e+256>>2];c[a+640+4>>2]=c[e+256+4>>2];c[a+640+8>>2]=c[e+256+8>>2];c[a+640+12>>2]=c[e+256+12>>2];c[a+656>>2]=c[e+240>>2];c[a+656+4>>2]=c[e+240+4>>2];c[a+656+8>>2]=c[e+240+8>>2];c[a+656+12>>2]=c[e+240+12>>2];c[a+672>>2]=c[e+192>>2];c[a+672+4>>2]=c[e+192+4>>2];c[a+672+8>>2]=c[e+192+8>>2];c[a+672+12>>2]=c[e+192+12>>2];c[a+688>>2]=c[e+160>>2];c[a+688+4>>2]=c[e+160+4>>2];c[a+688+8>>2]=c[e+160+8>>2];c[a+688+12>>2]=c[e+160+12>>2];c[a+704>>2]=c[e+208>>2];c[a+704+4>>2]=c[e+208+4>>2];c[a+704+8>>2]=c[e+208+8>>2];c[a+704+12>>2]=c[e+208+12>>2];c[a+720>>2]=c[e+144>>2];c[a+720+4>>2]=c[e+144+4>>2];c[a+720+8>>2]=c[e+144+8>>2];c[a+720+12>>2]=c[e+144+12>>2];c[a+736>>2]=c[e+224>>2];c[a+736+4>>2]=c[e+224+4>>2];c[a+736+8>>2]=c[e+224+8>>2];c[a+736+12>>2]=c[e+224+12>>2];c[a+752>>2]=c[e+176>>2];c[a+752+4>>2]=c[e+176+4>>2];c[a+752+8>>2]=c[e+176+8>>2];c[a+752+12>>2]=c[e+176+12>>2];Se(e+256|0);Se(e+240|0);Se(e+144|0);Se(e+224|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+192|0,35240);sb(e+160|0,35240);sb(e+208|0,35240);sb(e+144|0,35240);sb(e+224|0,35240);sb(e+176|0,35240);Od(e+144|0,e+224|0);Od(e+192|0,e+240|0);Od(e+144|0,e+256|0);Od(e+224|0,e+192|0);Od(e+160|0,e+256|0);Od(e+224|0,e+160|0);Od(e+160|0,e+176|0);Od(e+160|0,e+208|0);Od(e+176|0,e+144|0);Od(e+160|0,e+240|0);Od(e+208|0,e+144|0);Od(e+192|0,e+176|0);Od(e+240|0,e+144|0);Ke(e+80|0,e+176|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+144|0);Ke(e+48|0,e+192|0);Ke(e+64|0,e+224|0);Od(e+80|0,e+208|0);Od(e+96|0,e+192|0);Od(e+112|0,e+160|0);Od(e+48|0,e+208|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+160|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+176|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+144|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+224|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+192|0);Ke(e+48|0,e+208|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+176|0);Pd(e+64|0,e+160|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+144|0);Rd(e+16|0,e+224|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+224|0);Ke(e+128|0,e+144|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+224|0);Od(e+224|0,e+144|0);Pd(e+224|0,e+32|0);Pd(e+144|0,e+16|0);Od(e+224|0,e+144|0);Od(e+144|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+160|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+160|0);Pd(e+256|0,e+112|0);Pd(e+160|0,e+48|0);Od(e+256|0,e+160|0);Od(e+160|0,e+96|0);Od(e+224|0,e+64|0);Od(e+256|0,e+64|0);Od(e+144|0,e+128|0);Od(e+160|0,e+128|0);Ke(e+64|0,e+176|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+208|0);Od(e+128|0,e+192|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+208|0);Od(e+208|0,e+192|0);Pd(e+208|0,e+112|0);Pd(e+192|0,e+48|0);Od(e+208|0,e+192|0);Od(e+192|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+176|0);Od(e+176|0,e+240|0);Pd(e+176|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+176|0,e+240|0);Od(e+240|0,e+80|0);Od(e+176|0,e+64|0);Od(e+208|0,e+64|0);Od(e+240|0,e+128|0);Od(e+192|0,e+128|0);Od(e+176|0,e+256|0);Od(e+240|0,e+224|0);Od(e+208|0,e+176|0);Od(e+224|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+144|0);Od(e+144|0,e+192|0);Od(e+208|0,e+144|0);Od(e+192|0,e+160|0);Od(e+160|0,e+144|0);Od(e+224|0,e+160|0);ih(e+176|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+208|0,35272);sb(e+224|0,35272);sb(e+160|0,35272);sb(e+176|0,35272);sb(e+192|0,35272);sb(e+144|0,35272);c[e+128>>2]=c[a+640>>2];c[e+128+4>>2]=c[a+640+4>>2];c[e+128+8>>2]=c[a+640+8>>2];c[e+128+12>>2]=c[a+640+12>>2];c[e+112>>2]=c[a+656>>2];c[e+112+4>>2]=c[a+656+4>>2];c[e+112+8>>2]=c[a+656+8>>2];c[e+112+12>>2]=c[a+656+12>>2];c[e+96>>2]=c[a+672>>2];c[e+96+4>>2]=c[a+672+4>>2];c[e+96+8>>2]=c[a+672+8>>2];c[e+96+12>>2]=c[a+672+12>>2];c[e+80>>2]=c[a+688>>2];c[e+80+4>>2]=c[a+688+4>>2];c[e+80+8>>2]=c[a+688+8>>2];c[e+80+12>>2]=c[a+688+12>>2];c[e+64>>2]=c[a+704>>2];c[e+64+4>>2]=c[a+704+4>>2];c[e+64+8>>2]=c[a+704+8>>2];c[e+64+12>>2]=c[a+704+12>>2];c[e+48>>2]=c[a+720>>2];c[e+48+4>>2]=c[a+720+4>>2];c[e+48+8>>2]=c[a+720+8>>2];c[e+48+12>>2]=c[a+720+12>>2];c[e+32>>2]=c[a+736>>2];c[e+32+4>>2]=c[a+736+4>>2];c[e+32+8>>2]=c[a+736+8>>2];c[e+32+12>>2]=c[a+736+12>>2];c[e+16>>2]=c[a+752>>2];c[e+16+4>>2]=c[a+752+4>>2];c[e+16+8>>2]=c[a+752+8>>2];c[e+16+12>>2]=c[a+752+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);c[a+768>>2]=c[e+256>>2];c[a+768+4>>2]=c[e+256+4>>2];c[a+768+8>>2]=c[e+256+8>>2];c[a+768+12>>2]=c[e+256+12>>2];c[a+784>>2]=c[e+240>>2];c[a+784+4>>2]=c[e+240+4>>2];c[a+784+8>>2]=c[e+240+8>>2];c[a+784+12>>2]=c[e+240+12>>2];c[a+800>>2]=c[e+208>>2];c[a+800+4>>2]=c[e+208+4>>2];c[a+800+8>>2]=c[e+208+8>>2];c[a+800+12>>2]=c[e+208+12>>2];c[a+816>>2]=c[e+224>>2];c[a+816+4>>2]=c[e+224+4>>2];c[a+816+8>>2]=c[e+224+8>>2];c[a+816+12>>2]=c[e+224+12>>2];c[a+832>>2]=c[e+160>>2];c[a+832+4>>2]=c[e+160+4>>2];c[a+832+8>>2]=c[e+160+8>>2];c[a+832+12>>2]=c[e+160+12>>2];c[a+848>>2]=c[e+176>>2];c[a+848+4>>2]=c[e+176+4>>2];c[a+848+8>>2]=c[e+176+8>>2];c[a+848+12>>2]=c[e+176+12>>2];c[a+864>>2]=c[e+192>>2];c[a+864+4>>2]=c[e+192+4>>2];c[a+864+8>>2]=c[e+192+8>>2];c[a+864+12>>2]=c[e+192+12>>2];c[a+880>>2]=c[e+144>>2];c[a+880+4>>2]=c[e+144+4>>2];c[a+880+8>>2]=c[e+144+8>>2];c[a+880+12>>2]=c[e+144+12>>2];Se(e+256|0);Se(e+240|0);Se(e+176|0);Se(e+192|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+208|0,35240);sb(e+224|0,35240);sb(e+160|0,35240);sb(e+176|0,35240);sb(e+192|0,35240);sb(e+144|0,35240);Od(e+176|0,e+192|0);Od(e+208|0,e+240|0);Od(e+176|0,e+256|0);Od(e+192|0,e+208|0);Od(e+224|0,e+256|0);Od(e+192|0,e+224|0);Od(e+224|0,e+144|0);Od(e+224|0,e+160|0);Od(e+144|0,e+176|0);Od(e+224|0,e+240|0);Od(e+160|0,e+176|0);Od(e+208|0,e+144|0);Od(e+240|0,e+176|0);Ke(e+80|0,e+144|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+176|0);Ke(e+48|0,e+208|0);Ke(e+64|0,e+192|0);Od(e+80|0,e+160|0);Od(e+96|0,e+208|0);Od(e+112|0,e+224|0);Od(e+48|0,e+160|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+224|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+144|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+176|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+192|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+208|0);Ke(e+48|0,e+160|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+144|0);Pd(e+64|0,e+224|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+176|0);Rd(e+16|0,e+192|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+192|0);Ke(e+128|0,e+176|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+192|0);Od(e+192|0,e+176|0);Pd(e+192|0,e+32|0);Pd(e+176|0,e+16|0);Od(e+192|0,e+176|0);Od(e+176|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+224|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+224|0);Pd(e+256|0,e+112|0);Pd(e+224|0,e+48|0);Od(e+256|0,e+224|0);Od(e+224|0,e+96|0);Od(e+192|0,e+64|0);Od(e+256|0,e+64|0);Od(e+176|0,e+128|0);Od(e+224|0,e+128|0);Ke(e+64|0,e+144|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+160|0);Od(e+128|0,e+208|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+160|0);Od(e+160|0,e+208|0);Pd(e+160|0,e+112|0);Pd(e+208|0,e+48|0);Od(e+160|0,e+208|0);Od(e+208|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+144|0);Od(e+144|0,e+240|0);Pd(e+144|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+144|0,e+240|0);Od(e+240|0,e+80|0);Od(e+144|0,e+64|0);Od(e+160|0,e+64|0);Od(e+240|0,e+128|0);Od(e+208|0,e+128|0);Od(e+144|0,e+256|0);Od(e+240|0,e+192|0);Od(e+160|0,e+144|0);Od(e+192|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+176|0);Od(e+176|0,e+208|0);Od(e+160|0,e+176|0);Od(e+208|0,e+224|0);Od(e+224|0,e+176|0);Od(e+192|0,e+224|0);ih(e+208|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+160|0,35272);sb(e+192|0,35272);sb(e+224|0,35272);sb(e+144|0,35272);sb(e+208|0,35272);sb(e+176|0,35272);c[e+128>>2]=c[a+768>>2];c[e+128+4>>2]=c[a+768+4>>2];c[e+128+8>>2]=c[a+768+8>>2];c[e+128+12>>2]=c[a+768+12>>2];c[e+112>>2]=c[a+784>>2];c[e+112+4>>2]=c[a+784+4>>2];c[e+112+8>>2]=c[a+784+8>>2];c[e+112+12>>2]=c[a+784+12>>2];c[e+96>>2]=c[a+800>>2];c[e+96+4>>2]=c[a+800+4>>2];c[e+96+8>>2]=c[a+800+8>>2];c[e+96+12>>2]=c[a+800+12>>2];c[e+80>>2]=c[a+816>>2];c[e+80+4>>2]=c[a+816+4>>2];c[e+80+8>>2]=c[a+816+8>>2];c[e+80+12>>2]=c[a+816+12>>2];c[e+64>>2]=c[a+832>>2];c[e+64+4>>2]=c[a+832+4>>2];c[e+64+8>>2]=c[a+832+8>>2];c[e+64+12>>2]=c[a+832+12>>2];c[e+48>>2]=c[a+848>>2];c[e+48+4>>2]=c[a+848+4>>2];c[e+48+8>>2]=c[a+848+8>>2];c[e+48+12>>2]=c[a+848+12>>2];c[e+32>>2]=c[a+864>>2];c[e+32+4>>2]=c[a+864+4>>2];c[e+32+8>>2]=c[a+864+8>>2];c[e+32+12>>2]=c[a+864+12>>2];c[e+16>>2]=c[a+880>>2];c[e+16+4>>2]=c[a+880+4>>2];c[e+16+8>>2]=c[a+880+8>>2];c[e+16+12>>2]=c[a+880+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+160|0,e+96|0);Od(e+192|0,e+80|0);Od(e+224|0,e+64|0);Od(e+144|0,e+48|0);Od(e+208|0,e+32|0);Od(e+176|0,e+16|0);c[a+896>>2]=c[e+256>>2];c[a+896+4>>2]=c[e+256+4>>2];c[a+896+8>>2]=c[e+256+8>>2];c[a+896+12>>2]=c[e+256+12>>2];c[a+912>>2]=c[e+240>>2];c[a+912+4>>2]=c[e+240+4>>2];c[a+912+8>>2]=c[e+240+8>>2];c[a+912+12>>2]=c[e+240+12>>2];c[a+928>>2]=c[e+160>>2];c[a+928+4>>2]=c[e+160+4>>2];c[a+928+8>>2]=c[e+160+8>>2];c[a+928+12>>2]=c[e+160+12>>2];c[a+944>>2]=c[e+192>>2];c[a+944+4>>2]=c[e+192+4>>2];c[a+944+8>>2]=c[e+192+8>>2];c[a+944+12>>2]=c[e+192+12>>2];c[a+960>>2]=c[e+224>>2];c[a+960+4>>2]=c[e+224+4>>2];c[a+960+8>>2]=c[e+224+8>>2];c[a+960+12>>2]=c[e+224+12>>2];c[a+976>>2]=c[e+144>>2];c[a+976+4>>2]=c[e+144+4>>2];c[a+976+8>>2]=c[e+144+8>>2];c[a+976+12>>2]=c[e+144+12>>2];c[a+992>>2]=c[e+208>>2];c[a+992+4>>2]=c[e+208+4>>2];c[a+992+8>>2]=c[e+208+8>>2];c[a+992+12>>2]=c[e+208+12>>2];c[a+1008>>2]=c[e+176>>2];c[a+1008+4>>2]=c[e+176+4>>2];c[a+1008+8>>2]=c[e+176+8>>2];c[a+1008+12>>2]=c[e+176+12>>2];Se(e+256|0);Se(e+240|0);Se(e+144|0);Se(e+208|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+160|0,35240);sb(e+192|0,35240);sb(e+224|0,35240);sb(e+144|0,35240);sb(e+208|0,35240);sb(e+176|0,35240);Od(e+144|0,e+208|0);Od(e+160|0,e+240|0);Od(e+144|0,e+256|0);Od(e+208|0,e+160|0);Od(e+192|0,e+256|0);Od(e+208|0,e+192|0);Od(e+192|0,e+176|0);Od(e+192|0,e+224|0);Od(e+176|0,e+144|0);Od(e+192|0,e+240|0);Od(e+224|0,e+144|0);Od(e+160|0,e+176|0);Od(e+240|0,e+144|0);Ke(e+80|0,e+176|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+144|0);Ke(e+48|0,e+160|0);Ke(e+64|0,e+208|0);Od(e+80|0,e+224|0);Od(e+96|0,e+160|0);Od(e+112|0,e+192|0);Od(e+48|0,e+224|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+192|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+176|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+144|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+208|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+160|0);Ke(e+48|0,e+224|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+176|0);Pd(e+64|0,e+192|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+144|0);Rd(e+16|0,e+208|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+208|0);Ke(e+128|0,e+144|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+208|0);Od(e+208|0,e+144|0);Pd(e+208|0,e+32|0);Pd(e+144|0,e+16|0);Od(e+208|0,e+144|0);Od(e+144|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+192|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+192|0);Pd(e+256|0,e+112|0);Pd(e+192|0,e+48|0);Od(e+256|0,e+192|0);Od(e+192|0,e+96|0);Od(e+208|0,e+64|0);Od(e+256|0,e+64|0);Od(e+144|0,e+128|0);Od(e+192|0,e+128|0);Ke(e+64|0,e+176|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+224|0);Od(e+128|0,e+160|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+224|0);Od(e+224|0,e+160|0);Pd(e+224|0,e+112|0);Pd(e+160|0,e+48|0);Od(e+224|0,e+160|0);Od(e+160|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+176|0);Od(e+176|0,e+240|0);Pd(e+176|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+176|0,e+240|0);Od(e+240|0,e+80|0);Od(e+176|0,e+64|0);Od(e+224|0,e+64|0);Od(e+240|0,e+128|0);Od(e+160|0,e+128|0);Od(e+176|0,e+256|0);Od(e+240|0,e+208|0);Od(e+224|0,e+176|0);Od(e+208|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+144|0);Od(e+144|0,e+160|0);Od(e+224|0,e+144|0);Od(e+160|0,e+192|0);Od(e+192|0,e+144|0);Od(e+208|0,e+192|0);ih(e+144|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+224|0,35272);sb(e+208|0,35272);sb(e+192|0,35272);sb(e+176|0,35272);sb(e+160|0,35272);sb(e+144|0,35272);c[e+128>>2]=c[a+896>>2];c[e+128+4>>2]=c[a+896+4>>2];c[e+128+8>>2]=c[a+896+8>>2];c[e+128+12>>2]=c[a+896+12>>2];c[e+112>>2]=c[a+912>>2];c[e+112+4>>2]=c[a+912+4>>2];c[e+112+8>>2]=c[a+912+8>>2];c[e+112+12>>2]=c[a+912+12>>2];c[e+96>>2]=c[a+928>>2];c[e+96+4>>2]=c[a+928+4>>2];c[e+96+8>>2]=c[a+928+8>>2];c[e+96+12>>2]=c[a+928+12>>2];c[e+80>>2]=c[a+944>>2];c[e+80+4>>2]=c[a+944+4>>2];c[e+80+8>>2]=c[a+944+8>>2];c[e+80+12>>2]=c[a+944+12>>2];c[e+64>>2]=c[a+960>>2];c[e+64+4>>2]=c[a+960+4>>2];c[e+64+8>>2]=c[a+960+8>>2];c[e+64+12>>2]=c[a+960+12>>2];c[e+48>>2]=c[a+976>>2];c[e+48+4>>2]=c[a+976+4>>2];c[e+48+8>>2]=c[a+976+8>>2];c[e+48+12>>2]=c[a+976+12>>2];c[e+32>>2]=c[a+992>>2];c[e+32+4>>2]=c[a+992+4>>2];c[e+32+8>>2]=c[a+992+8>>2];c[e+32+12>>2]=c[a+992+12>>2];c[e+16>>2]=c[a+1008>>2];c[e+16+4>>2]=c[a+1008+4>>2];c[e+16+8>>2]=c[a+1008+8>>2];c[e+16+12>>2]=c[a+1008+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+224|0,e+96|0);Od(e+208|0,e+80|0);Od(e+192|0,e+64|0);Od(e+176|0,e+48|0);Od(e+160|0,e+32|0);Od(e+144|0,e+16|0);c[a+1024>>2]=c[e+256>>2];c[a+1024+4>>2]=c[e+256+4>>2];c[a+1024+8>>2]=c[e+256+8>>2];c[a+1024+12>>2]=c[e+256+12>>2];c[a+1040>>2]=c[e+240>>2];c[a+1040+4>>2]=c[e+240+4>>2];c[a+1040+8>>2]=c[e+240+8>>2];c[a+1040+12>>2]=c[e+240+12>>2];c[a+1056>>2]=c[e+224>>2];c[a+1056+4>>2]=c[e+224+4>>2];c[a+1056+8>>2]=c[e+224+8>>2];c[a+1056+12>>2]=c[e+224+12>>2];c[a+1072>>2]=c[e+208>>2];c[a+1072+4>>2]=c[e+208+4>>2];c[a+1072+8>>2]=c[e+208+8>>2];c[a+1072+12>>2]=c[e+208+12>>2];c[a+1088>>2]=c[e+192>>2];c[a+1088+4>>2]=c[e+192+4>>2];c[a+1088+8>>2]=c[e+192+8>>2];c[a+1088+12>>2]=c[e+192+12>>2];c[a+1104>>2]=c[e+176>>2];c[a+1104+4>>2]=c[e+176+4>>2];c[a+1104+8>>2]=c[e+176+8>>2];c[a+1104+12>>2]=c[e+176+12>>2];c[a+1120>>2]=c[e+160>>2];c[a+1120+4>>2]=c[e+160+4>>2];c[a+1120+8>>2]=c[e+160+8>>2];c[a+1120+12>>2]=c[e+160+12>>2];c[a+1136>>2]=c[e+144>>2];c[a+1136+4>>2]=c[e+144+4>>2];c[a+1136+8>>2]=c[e+144+8>>2];c[a+1136+12>>2]=c[e+144+12>>2];Se(e+256|0);Se(e+240|0);Se(e+176|0);Se(e+160|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+224|0,35240);sb(e+208|0,35240);sb(e+192|0,35240);sb(e+176|0,35240);sb(e+160|0,35240);sb(e+144|0,35240);Od(e+176|0,e+160|0);Od(e+224|0,e+240|0);Od(e+176|0,e+256|0);Od(e+160|0,e+224|0);Od(e+208|0,e+256|0);Od(e+160|0,e+208|0);Od(e+208|0,e+144|0);Od(e+208|0,e+192|0);Od(e+144|0,e+176|0);Od(e+208|0,e+240|0);Od(e+192|0,e+176|0);Od(e+224|0,e+144|0);Od(e+240|0,e+176|0);Ke(e+80|0,e+144|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+176|0);Ke(e+48|0,e+224|0);Ke(e+64|0,e+160|0);Od(e+80|0,e+192|0);Od(e+96|0,e+224|0);Od(e+112|0,e+208|0);Od(e+48|0,e+192|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+208|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+144|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+176|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+160|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+224|0);Ke(e+48|0,e+192|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+144|0);Pd(e+64|0,e+208|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+176|0);Rd(e+16|0,e+160|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+160|0);Ke(e+128|0,e+176|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+160|0);Od(e+160|0,e+176|0);Pd(e+160|0,e+32|0);Pd(e+176|0,e+16|0);Od(e+160|0,e+176|0);Od(e+176|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+208|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+208|0);Pd(e+256|0,e+112|0);Pd(e+208|0,e+48|0);Od(e+256|0,e+208|0);Od(e+208|0,e+96|0);Od(e+160|0,e+64|0);Od(e+256|0,e+64|0);Od(e+176|0,e+128|0);Od(e+208|0,e+128|0);Ke(e+64|0,e+144|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+192|0);Od(e+128|0,e+224|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+192|0);Od(e+192|0,e+224|0);Pd(e+192|0,e+112|0);Pd(e+224|0,e+48|0);Od(e+192|0,e+224|0);Od(e+224|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+144|0);Od(e+144|0,e+240|0);Pd(e+144|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+144|0,e+240|0);Od(e+240|0,e+80|0);Od(e+144|0,e+64|0);Od(e+192|0,e+64|0);Od(e+240|0,e+128|0);Od(e+224|0,e+128|0);Od(e+144|0,e+256|0);Od(e+240|0,e+160|0);Od(e+192|0,e+144|0);Od(e+160|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+176|0);Od(e+176|0,e+224|0);Od(e+192|0,e+176|0);Od(e+224|0,e+208|0);Od(e+208|0,e+176|0);Od(e+160|0,e+208|0);ih(e+256|0);ih(e+240|0);ih(e+160|0);ih(e+208|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+192|0,35272);sb(e+160|0,35272);sb(e+208|0,35272);sb(e+144|0,35272);sb(e+224|0,35272);sb(e+176|0,35272);c[e+128>>2]=c[a+1024>>2];c[e+128+4>>2]=c[a+1024+4>>2];c[e+128+8>>2]=c[a+1024+8>>2];c[e+128+12>>2]=c[a+1024+12>>2];c[e+112>>2]=c[a+1040>>2];c[e+112+4>>2]=c[a+1040+4>>2];c[e+112+8>>2]=c[a+1040+8>>2];c[e+112+12>>2]=c[a+1040+12>>2];c[e+96>>2]=c[a+1056>>2];c[e+96+4>>2]=c[a+1056+4>>2];c[e+96+8>>2]=c[a+1056+8>>2];c[e+96+12>>2]=c[a+1056+12>>2];c[e+80>>2]=c[a+1072>>2];c[e+80+4>>2]=c[a+1072+4>>2];c[e+80+8>>2]=c[a+1072+8>>2];c[e+80+12>>2]=c[a+1072+12>>2];c[e+64>>2]=c[a+1088>>2];c[e+64+4>>2]=c[a+1088+4>>2];c[e+64+8>>2]=c[a+1088+8>>2];c[e+64+12>>2]=c[a+1088+12>>2];c[e+48>>2]=c[a+1104>>2];c[e+48+4>>2]=c[a+1104+4>>2];c[e+48+8>>2]=c[a+1104+8>>2];c[e+48+12>>2]=c[a+1104+12>>2];c[e+32>>2]=c[a+1120>>2];c[e+32+4>>2]=c[a+1120+4>>2];c[e+32+8>>2]=c[a+1120+8>>2];c[e+32+12>>2]=c[a+1120+12>>2];c[e+16>>2]=c[a+1136>>2];c[e+16+4>>2]=c[a+1136+4>>2];c[e+16+8>>2]=c[a+1136+8>>2];c[e+16+12>>2]=c[a+1136+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+192|0,e+96|0);Od(e+160|0,e+80|0);Od(e+208|0,e+64|0);Od(e+144|0,e+48|0);Od(e+224|0,e+32|0);Od(e+176|0,e+16|0);c[a+1152>>2]=c[e+256>>2];c[a+1152+4>>2]=c[e+256+4>>2];c[a+1152+8>>2]=c[e+256+8>>2];c[a+1152+12>>2]=c[e+256+12>>2];c[a+1168>>2]=c[e+240>>2];c[a+1168+4>>2]=c[e+240+4>>2];c[a+1168+8>>2]=c[e+240+8>>2];c[a+1168+12>>2]=c[e+240+12>>2];c[a+1184>>2]=c[e+192>>2];c[a+1184+4>>2]=c[e+192+4>>2];c[a+1184+8>>2]=c[e+192+8>>2];c[a+1184+12>>2]=c[e+192+12>>2];c[a+1200>>2]=c[e+160>>2];c[a+1200+4>>2]=c[e+160+4>>2];c[a+1200+8>>2]=c[e+160+8>>2];c[a+1200+12>>2]=c[e+160+12>>2];c[a+1216>>2]=c[e+208>>2];c[a+1216+4>>2]=c[e+208+4>>2];c[a+1216+8>>2]=c[e+208+8>>2];c[a+1216+12>>2]=c[e+208+12>>2];c[a+1232>>2]=c[e+144>>2];c[a+1232+4>>2]=c[e+144+4>>2];c[a+1232+8>>2]=c[e+144+8>>2];c[a+1232+12>>2]=c[e+144+12>>2];c[a+1248>>2]=c[e+224>>2];c[a+1248+4>>2]=c[e+224+4>>2];c[a+1248+8>>2]=c[e+224+8>>2];c[a+1248+12>>2]=c[e+224+12>>2];c[a+1264>>2]=c[e+176>>2];c[a+1264+4>>2]=c[e+176+4>>2];c[a+1264+8>>2]=c[e+176+8>>2];c[a+1264+12>>2]=c[e+176+12>>2];Se(e+256|0);Se(e+240|0);Se(e+144|0);Se(e+224|0);sb(e+256|0,35240);sb(e+240|0,35240);sb(e+192|0,35240);sb(e+160|0,35240);sb(e+208|0,35240);sb(e+144|0,35240);sb(e+224|0,35240);sb(e+176|0,35240);Od(e+144|0,e+224|0);Od(e+192|0,e+240|0);Od(e+144|0,e+256|0);Od(e+224|0,e+192|0);Od(e+160|0,e+256|0);Od(e+224|0,e+160|0);Od(e+160|0,e+176|0);Od(e+160|0,e+208|0);Od(e+176|0,e+144|0);Od(e+160|0,e+240|0);Od(e+208|0,e+144|0);Od(e+192|0,e+176|0);Od(e+240|0,e+144|0);Ke(e+80|0,e+176|0);Ke(e+96|0,e+240|0);Ke(e+112|0,e+144|0);Ke(e+48|0,e+192|0);Ke(e+64|0,e+224|0);Od(e+80|0,e+208|0);Od(e+96|0,e+192|0);Od(e+112|0,e+160|0);Od(e+48|0,e+208|0);Od(e+64|0,e+256|0);Ke(e+32|0,e+80|0);Ke(e+128|0,e+96|0);Ke(e+16|0,e+80|0);Rd(e+96|0,e+112|0);Rd(e+80|0,e+64|0);Od(e+16|0,e+128|0);Pd(e+32|0,e+64|0);Pd(e+128|0,e+112|0);Od(e+64|0,e+112|0);Pd(e+16|0,e+64|0);Ke(e+64|0,e+160|0);Od(e+64|0,e+256|0);Pd(e+48|0,e+64|0);Od(e+80|0,e+48|0);Od(e+96|0,e+48|0);Ke(e+48|0,e+176|0);Od(e+48|0,e+240|0);Ke(e+64|0,e+144|0);Ke(e+112|0,e+48|0);Od(e+64|0,e+224|0);Rd(e+112|0,e+64|0);Pd(e+48|0,e+64|0);Od(e+128|0,e+48|0);Od(e+80|0,e+16|0);Od(e+96|0,e+32|0);Od(e+112|0,e+16|0);Od(e+128|0,e+32|0);Od(e+112|0,e+32|0);Ke(e+64|0,e+192|0);Ke(e+48|0,e+208|0);Ke(e+32|0,e+240|0);Ke(e+16|0,e+176|0);Pd(e+64|0,e+160|0);Pd(e+48|0,e+256|0);Pd(e+32|0,e+144|0);Rd(e+16|0,e+224|0);Od(e+80|0,e+64|0);Od(e+96|0,e+48|0);Od(e+112|0,e+32|0);Od(e+128|0,e+16|0);Ke(e+64|0,e+80|0);Od(e+64|0,e+96|0);Pd(e+80|0,e+112|0);Ke(e+32|0,e+128|0);Od(e+32|0,e+80|0);Ke(e+16|0,e+64|0);Pd(e+16|0,e+32|0);Od(e+16|0,e+96|0);Ke(e+48|0,e+112|0);Od(e+48|0,e+128|0);Od(e+80|0,e+96|0);Pd(e+48|0,e+80|0);Od(e+48|0,e+128|0);Od(e+112|0,e+48|0);Ke(e+96|0,e+32|0);Od(e+96|0,e+48|0);Pd(e+96|0,e+128|0);Od(e+112|0,e+96|0);Od(e+32|0,e+96|0);Pd(e+32|0,e+16|0);Od(e+32|0,e+64|0);Ke(e+64|0,e+224|0);Ke(e+128|0,e+144|0);Ke(e+96|0,e+16|0);Od(e+96|0,e+32|0);Pd(e+96|0,e+224|0);Od(e+224|0,e+144|0);Pd(e+224|0,e+32|0);Pd(e+144|0,e+16|0);Od(e+224|0,e+144|0);Od(e+144|0,e+96|0);Od(e+64|0,e+256|0);Od(e+128|0,e+160|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+256|0);Od(e+256|0,e+160|0);Pd(e+256|0,e+112|0);Pd(e+160|0,e+48|0);Od(e+256|0,e+160|0);Od(e+160|0,e+96|0);Od(e+224|0,e+64|0);Od(e+256|0,e+64|0);Od(e+144|0,e+128|0);Od(e+160|0,e+128|0);Ke(e+64|0,e+176|0);Ke(e+128|0,e+240|0);Od(e+64|0,e+208|0);Od(e+128|0,e+192|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+64|0);Od(e+64|0,e+128|0);Pd(e+64|0,e+32|0);Pd(e+128|0,e+16|0);Od(e+128|0,e+64|0);Od(e+64|0,e+80|0);Ke(e+96|0,e+48|0);Od(e+96|0,e+112|0);Pd(e+96|0,e+208|0);Od(e+208|0,e+192|0);Pd(e+208|0,e+112|0);Pd(e+192|0,e+48|0);Od(e+208|0,e+192|0);Od(e+192|0,e+96|0);Od(e+16|0,e+48|0);Od(e+32|0,e+112|0);Ke(e+80|0,e+16|0);Od(e+80|0,e+32|0);Pd(e+80|0,e+176|0);Od(e+176|0,e+240|0);Pd(e+176|0,e+32|0);Pd(e+240|0,e+16|0);Od(e+176|0,e+240|0);Od(e+240|0,e+80|0);Od(e+176|0,e+64|0);Od(e+208|0,e+64|0);Od(e+240|0,e+128|0);Od(e+192|0,e+128|0);Od(e+176|0,e+256|0);Od(e+240|0,e+224|0);Od(e+208|0,e+176|0);Od(e+224|0,e+256|0);Od(e+256|0,e+240|0);Od(e+240|0,e+144|0);Od(e+144|0,e+192|0);Od(e+208|0,e+144|0);Od(e+192|0,e+160|0);Od(e+160|0,e+144|0);Od(e+224|0,e+160|0);ih(e+240|0);ih(e+208|0);ih(e+160|0);ih(e+176|0);sb(e+256|0,35272);sb(e+240|0,35272);sb(e+208|0,35272);sb(e+224|0,35272);sb(e+160|0,35272);sb(e+176|0,35272);sb(e+192|0,35272);sb(e+144|0,35272);c[e+128>>2]=c[a+1152>>2];c[e+128+4>>2]=c[a+1152+4>>2];c[e+128+8>>2]=c[a+1152+8>>2];c[e+128+12>>2]=c[a+1152+12>>2];c[e+112>>2]=c[a+1168>>2];c[e+112+4>>2]=c[a+1168+4>>2];c[e+112+8>>2]=c[a+1168+8>>2];c[e+112+12>>2]=c[a+1168+12>>2];c[e+96>>2]=c[a+1184>>2];c[e+96+4>>2]=c[a+1184+4>>2];c[e+96+8>>2]=c[a+1184+8>>2];c[e+96+12>>2]=c[a+1184+12>>2];c[e+80>>2]=c[a+1200>>2];c[e+80+4>>2]=c[a+1200+4>>2];c[e+80+8>>2]=c[a+1200+8>>2];c[e+80+12>>2]=c[a+1200+12>>2];c[e+64>>2]=c[a+1216>>2];c[e+64+4>>2]=c[a+1216+4>>2];c[e+64+8>>2]=c[a+1216+8>>2];c[e+64+12>>2]=c[a+1216+12>>2];c[e+48>>2]=c[a+1232>>2];c[e+48+4>>2]=c[a+1232+4>>2];c[e+48+8>>2]=c[a+1232+8>>2];c[e+48+12>>2]=c[a+1232+12>>2];c[e+32>>2]=c[a+1248>>2];c[e+32+4>>2]=c[a+1248+4>>2];c[e+32+8>>2]=c[a+1248+8>>2];c[e+32+12>>2]=c[a+1248+12>>2];c[e+16>>2]=c[a+1264>>2];c[e+16+4>>2]=c[a+1264+4>>2];c[e+16+8>>2]=c[a+1264+8>>2];c[e+16+12>>2]=c[a+1264+12>>2];Se(e+128|0);Se(e+112|0);Se(e+48|0);Se(e+32|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);Ce(e+128|0);Ce(e+112|0);Ce(e+96|0);Ce(e+80|0);Ce(e+64|0);Ce(e+48|0);Ce(e+32|0);Ce(e+16|0);Od(e+256|0,e+128|0);Od(e+240|0,e+112|0);Od(e+208|0,e+96|0);Od(e+224|0,e+80|0);Od(e+160|0,e+64|0);Od(e+176|0,e+48|0);Od(e+192|0,e+32|0);Od(e+144|0,e+16|0);sb(e+256|0,35256);sb(e+240|0,35256);sb(e+192|0,35256);sb(e+160|0,35256);sb(e+208|0,35256);sb(e+144|0,35256);sb(e+224|0,35256);sb(e+176|0,35256);c[a+1280>>2]=c[e+256>>2];c[a+1280+4>>2]=c[e+256+4>>2];c[a+1280+8>>2]=c[e+256+8>>2];c[a+1280+12>>2]=c[e+256+12>>2];c[a+1296>>2]=c[e+240>>2];c[a+1296+4>>2]=c[e+240+4>>2];c[a+1296+8>>2]=c[e+240+8>>2];c[a+1296+12>>2]=c[e+240+12>>2];c[a+1312>>2]=c[e+208>>2];c[a+1312+4>>2]=c[e+208+4>>2];c[a+1312+8>>2]=c[e+208+8>>2];c[a+1312+12>>2]=c[e+208+12>>2];c[a+1328>>2]=c[e+224>>2];c[a+1328+4>>2]=c[e+224+4>>2];c[a+1328+8>>2]=c[e+224+8>>2];c[a+1328+12>>2]=c[e+224+12>>2];c[a+1344>>2]=c[e+160>>2];c[a+1344+4>>2]=c[e+160+4>>2];c[a+1344+8>>2]=c[e+160+8>>2];c[a+1344+12>>2]=c[e+160+12>>2];c[a+1360>>2]=c[e+176>>2];c[a+1360+4>>2]=c[e+176+4>>2];c[a+1360+8>>2]=c[e+176+8>>2];c[a+1360+12>>2]=c[e+176+12>>2];c[a+1376>>2]=c[e+192>>2];c[a+1376+4>>2]=c[e+192+4>>2];c[a+1376+8>>2]=c[e+192+8>>2];c[a+1376+12>>2]=c[e+192+12>>2];c[a+1392>>2]=c[e+144>>2];c[a+1392+4>>2]=c[e+144+4>>2];c[a+1392+8>>2]=c[e+144+8>>2];c[a+1392+12>>2]=c[e+144+12>>2];l=d;return 0}function ea(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0;k=l;j=l=l+63&-64;l=l+400|0;Ke(j,g);while(1){c[j+256>>2]=c[j>>2];c[j+256+4>>2]=c[j+4>>2];c[j+256+8>>2]=c[j+8>>2];c[j+256+12>>2]=c[j+12>>2];Ke(j+240|0,j+256|0);sb(j+240|0,35288);Ke(j+224|0,j+240|0);Ke(j+208|0,j+240|0);Ke(j+192|0,j+240|0);Ke(j+176|0,j+240|0);Ke(j+160|0,j+240|0);Ke(j+144|0,j+240|0);Jg(j+240|0,1);Jg(j+224|0,2);Jg(j+208|0,3);Jg(j+192|0,4);Jg(j+176|0,5);Jg(j+160|0,6);Jg(j+144|0,7);sb(j+256|0,35256);sb(j+240|0,35304);sb(j+224|0,35304);sb(j+208|0,35304);sb(j+192|0,35304);sb(j+176|0,35304);sb(j+160|0,35304);sb(j+144|0,35304);Ke(j+128|0,j+160|0);ge(j+128|0,1);Od(j+128|0,j+144|0);Pd(j+128|0,1104);Od(j+144|0,j+128|0);ie(j+128|0,1);Od(j+160|0,j+128|0);Ke(j+128|0,j+192|0);ge(j+128|0,1);Od(j+128|0,j+176|0);Pd(j+128|0,1104);Od(j+176|0,j+128|0);ie(j+128|0,1);Od(j+192|0,j+128|0);Ke(j+128|0,j+224|0);ge(j+128|0,1);Od(j+128|0,j+208|0);Pd(j+128|0,1104);Od(j+208|0,j+128|0);ie(j+128|0,1);Od(j+224|0,j+128|0);Ke(j+128|0,j+256|0);ge(j+128|0,1);Od(j+128|0,j+240|0);Pd(j+128|0,1104);Od(j+240|0,j+128|0);ie(j+128|0,1);Od(j+256|0,j+128|0);Ke(j+128|0,j+176|0);ge(j+128|0,2);Od(j+128|0,j+144|0);Pd(j+128|0,1120);Od(j+144|0,j+128|0);ie(j+128|0,2);Od(j+176|0,j+128|0);Ke(j+128|0,j+192|0);ge(j+128|0,2);Od(j+128|0,j+160|0);Pd(j+128|0,1120);Od(j+160|0,j+128|0);ie(j+128|0,2);Od(j+192|0,j+128|0);Ke(j+128|0,j+240|0);ge(j+128|0,2);Od(j+128|0,j+208|0);Pd(j+128|0,1120);Od(j+208|0,j+128|0);ie(j+128|0,2);Od(j+240|0,j+128|0);Ke(j+128|0,j+256|0);ge(j+128|0,2);Od(j+128|0,j+224|0);Pd(j+128|0,1120);Od(j+224|0,j+128|0);ie(j+128|0,2);Od(j+256|0,j+128|0);Ke(j+128|0,j+208|0);ge(j+128|0,4);Od(j+128|0,j+144|0);Pd(j+128|0,1136);Od(j+144|0,j+128|0);ie(j+128|0,4);Od(j+208|0,j+128|0);Ke(j+128|0,j+224|0);ge(j+128|0,4);Od(j+128|0,j+160|0);Pd(j+128|0,1136);Od(j+160|0,j+128|0);ie(j+128|0,4);Od(j+224|0,j+128|0);Ke(j+128|0,j+240|0);ge(j+128|0,4);Od(j+128|0,j+176|0);Pd(j+128|0,1136);Od(j+176|0,j+128|0);ie(j+128|0,4);Od(j+240|0,j+128|0);Ke(j+128|0,j+256|0);ge(j+128|0,4);Od(j+128|0,j+192|0);Pd(j+128|0,1136);Od(j+192|0,j+128|0);ie(j+128|0,4);Od(j+256|0,j+128|0);Od(j+256|0,h);sb(j+256|0,35320);Od(j+240|0,h+16|0);sb(j+240|0,35320);Od(j+224|0,h+32|0);sb(j+224|0,35320);Od(j+208|0,h+48|0);sb(j+208|0,35320);Od(j+192|0,h+64|0);sb(j+192|0,35320);Od(j+176|0,h+80|0);sb(j+176|0,35320);Od(j+160|0,h+96|0);sb(j+160|0,35320);Od(j+144|0,h+112|0);sb(j+144|0,35320);Od(j+176|0,j+160|0);Od(j+224|0,j+240|0);Od(j+176|0,j+256|0);Od(j+160|0,j+224|0);Od(j+208|0,j+256|0);Od(j+160|0,j+208|0);Od(j+208|0,j+144|0);Od(j+208|0,j+192|0);Od(j+144|0,j+176|0);Od(j+208|0,j+240|0);Od(j+192|0,j+176|0);Od(j+224|0,j+144|0);Od(j+240|0,j+176|0);Ke(j+80|0,j+144|0);Ke(j+96|0,j+240|0);Ke(j+112|0,j+176|0);Ke(j+48|0,j+224|0);Ke(j+64|0,j+160|0);Od(j+80|0,j+192|0);Od(j+96|0,j+224|0);Od(j+112|0,j+208|0);Od(j+48|0,j+192|0);Od(j+64|0,j+256|0);Ke(j+32|0,j+80|0);Ke(j+128|0,j+96|0);Ke(j+16|0,j+80|0);Rd(j+96|0,j+112|0);Rd(j+80|0,j+64|0);Od(j+16|0,j+128|0);Pd(j+32|0,j+64|0);Pd(j+128|0,j+112|0);Od(j+64|0,j+112|0);Pd(j+16|0,j+64|0);Ke(j+64|0,j+208|0);Od(j+64|0,j+256|0);Pd(j+48|0,j+64|0);Od(j+80|0,j+48|0);Od(j+96|0,j+48|0);Ke(j+48|0,j+144|0);Od(j+48|0,j+240|0);Ke(j+64|0,j+176|0);Ke(j+112|0,j+48|0);Od(j+64|0,j+160|0);Rd(j+112|0,j+64|0);Pd(j+48|0,j+64|0);Od(j+128|0,j+48|0);Od(j+80|0,j+16|0);Od(j+96|0,j+32|0);Od(j+112|0,j+16|0);Od(j+128|0,j+32|0);Od(j+112|0,j+32|0);Ke(j+64|0,j+224|0);Ke(j+48|0,j+192|0);Ke(j+32|0,j+240|0);Ke(j+16|0,j+144|0);Pd(j+64|0,j+208|0);Pd(j+48|0,j+256|0);Pd(j+32|0,j+176|0);Rd(j+16|0,j+160|0);Od(j+80|0,j+64|0);Od(j+96|0,j+48|0);Od(j+112|0,j+32|0);Od(j+128|0,j+16|0);Ke(j+64|0,j+80|0);Od(j+64|0,j+96|0);Pd(j+80|0,j+112|0);Ke(j+32|0,j+128|0);Od(j+32|0,j+80|0);Ke(j+16|0,j+64|0);Pd(j+16|0,j+32|0);Od(j+16|0,j+96|0);Ke(j+48|0,j+112|0);Od(j+48|0,j+128|0);Od(j+80|0,j+96|0);Pd(j+48|0,j+80|0);Od(j+48|0,j+128|0);Od(j+112|0,j+48|0);Ke(j+96|0,j+32|0);Od(j+96|0,j+48|0);Pd(j+96|0,j+128|0);Od(j+112|0,j+96|0);Od(j+32|0,j+96|0);Pd(j+32|0,j+16|0);Od(j+32|0,j+64|0);Ke(j+64|0,j+160|0);Ke(j+128|0,j+176|0);Ke(j+96|0,j+16|0);Od(j+96|0,j+32|0);Pd(j+96|0,j+160|0);Od(j+160|0,j+176|0);Pd(j+160|0,j+32|0);Pd(j+176|0,j+16|0);Od(j+160|0,j+176|0);Od(j+176|0,j+96|0);Od(j+64|0,j+256|0);Od(j+128|0,j+208|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+256|0);Od(j+256|0,j+208|0);Pd(j+256|0,j+112|0);Pd(j+208|0,j+48|0);Od(j+256|0,j+208|0);Od(j+208|0,j+96|0);Od(j+160|0,j+64|0);Od(j+256|0,j+64|0);Od(j+176|0,j+128|0);Od(j+208|0,j+128|0);Ke(j+64|0,j+144|0);Ke(j+128|0,j+240|0);Od(j+64|0,j+192|0);Od(j+128|0,j+224|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+192|0);Od(j+192|0,j+224|0);Pd(j+192|0,j+112|0);Pd(j+224|0,j+48|0);Od(j+192|0,j+224|0);Od(j+224|0,j+96|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+144|0);Od(j+144|0,j+240|0);Pd(j+144|0,j+32|0);Pd(j+240|0,j+16|0);Od(j+144|0,j+240|0);Od(j+240|0,j+80|0);Od(j+144|0,j+64|0);Od(j+192|0,j+64|0);Od(j+240|0,j+128|0);Od(j+224|0,j+128|0);Od(j+144|0,j+256|0);Od(j+240|0,j+160|0);Od(j+192|0,j+144|0);Od(j+160|0,j+256|0);Od(j+256|0,j+240|0);Od(j+240|0,j+176|0);Od(j+176|0,j+224|0);Od(j+192|0,j+176|0);Od(j+224|0,j+208|0);Od(j+208|0,j+176|0);Od(j+160|0,j+208|0);dd(j+128|0,j+256|0,147);dd(j+112|0,j+240|0,147);dd(j+96|0,j+192|0,147);dd(j+80|0,j+160|0,147);dd(j+64|0,j+208|0,147);dd(j+48|0,j+144|0,147);dd(j+32|0,j+224|0,147);dd(j+16|0,j+176|0,147);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+192|0,j+96|0);Od(j+160|0,j+80|0);Od(j+208|0,j+64|0);Od(j+144|0,j+48|0);Od(j+224|0,j+32|0);Od(j+176|0,j+16|0);Od(j+128|0,j+176|0);Od(j+112|0,j+256|0);Od(j+96|0,j+240|0);Od(j+112|0,j+176|0);Od(j+80|0,j+192|0);Od(j+64|0,j+160|0);Od(j+48|0,j+208|0);Od(j+80|0,j+176|0);Od(j+32|0,j+144|0);Od(j+16|0,j+224|0);Od(j+64|0,j+176|0);dd(j+256|0,j+256|0,78);dd(j+240|0,j+240|0,78);dd(j+192|0,j+192|0,78);dd(j+160|0,j+160|0,78);dd(j+208|0,j+208|0,78);dd(j+144|0,j+144|0,78);dd(j+224|0,j+224|0,78);dd(j+176|0,j+176|0,78);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+96|0,j+192|0);Od(j+80|0,j+160|0);Od(j+64|0,j+208|0);Od(j+48|0,j+144|0);Od(j+32|0,j+224|0);Od(j+16|0,j+176|0);Od(j+128|0,h+128|0);sb(j+128|0,35320);Od(j+112|0,h+144|0);sb(j+112|0,35320);Od(j+96|0,h+160|0);sb(j+96|0,35320);Od(j+80|0,h+176|0);sb(j+80|0,35320);Od(j+64|0,h+192|0);sb(j+64|0,35320);Od(j+48|0,h+208|0);sb(j+48|0,35320);Od(j+32|0,h+224|0);sb(j+32|0,35320);Od(j+16|0,h+240|0);sb(j+16|0,35320);Od(j+48|0,j+32|0);Od(j+96|0,j+112|0);Od(j+48|0,j+128|0);Od(j+32|0,j+96|0);Od(j+80|0,j+128|0);Od(j+32|0,j+80|0);Od(j+80|0,j+16|0);Od(j+80|0,j+64|0);Od(j+16|0,j+48|0);Od(j+80|0,j+112|0);Od(j+64|0,j+48|0);Od(j+96|0,j+16|0);Od(j+112|0,j+48|0);Ke(j+208|0,j+16|0);Ke(j+224|0,j+112|0);Ke(j+240|0,j+48|0);Ke(j+176|0,j+96|0);Ke(j+192|0,j+32|0);Od(j+208|0,j+64|0);Od(j+224|0,j+96|0);Od(j+240|0,j+80|0);Od(j+176|0,j+64|0);Od(j+192|0,j+128|0);Ke(j+160|0,j+208|0);Ke(j+256|0,j+224|0);Ke(j+144|0,j+208|0);Rd(j+224|0,j+240|0);Rd(j+208|0,j+192|0);Od(j+144|0,j+256|0);Pd(j+160|0,j+192|0);Pd(j+256|0,j+240|0);Od(j+192|0,j+240|0);Pd(j+144|0,j+192|0);Ke(j+192|0,j+80|0);Od(j+192|0,j+128|0);Pd(j+176|0,j+192|0);Od(j+208|0,j+176|0);Od(j+224|0,j+176|0);Ke(j+176|0,j+16|0);Od(j+176|0,j+112|0);Ke(j+192|0,j+48|0);Ke(j+240|0,j+176|0);Od(j+192|0,j+32|0);Rd(j+240|0,j+192|0);Pd(j+176|0,j+192|0);Od(j+256|0,j+176|0);Od(j+208|0,j+144|0);Od(j+224|0,j+160|0);Od(j+240|0,j+144|0);Od(j+256|0,j+160|0);Od(j+240|0,j+160|0);Ke(j+192|0,j+96|0);Ke(j+176|0,j+64|0);Ke(j+160|0,j+112|0);Ke(j+144|0,j+16|0);Pd(j+192|0,j+80|0);Pd(j+176|0,j+128|0);Pd(j+160|0,j+48|0);Rd(j+144|0,j+32|0);Od(j+208|0,j+192|0);Od(j+224|0,j+176|0);Od(j+240|0,j+160|0);Od(j+256|0,j+144|0);Ke(j+192|0,j+208|0);Od(j+192|0,j+224|0);Pd(j+208|0,j+240|0);Ke(j+160|0,j+256|0);Od(j+160|0,j+208|0);Ke(j+144|0,j+192|0);Pd(j+144|0,j+160|0);Od(j+144|0,j+224|0);Ke(j+176|0,j+240|0);Od(j+176|0,j+256|0);Od(j+208|0,j+224|0);Pd(j+176|0,j+208|0);Od(j+176|0,j+256|0);Od(j+240|0,j+176|0);Ke(j+224|0,j+160|0);Od(j+224|0,j+176|0);Pd(j+224|0,j+256|0);Od(j+240|0,j+224|0);Od(j+160|0,j+224|0);Pd(j+160|0,j+144|0);Od(j+160|0,j+192|0);Ke(j+192|0,j+32|0);Ke(j+256|0,j+48|0);Ke(j+224|0,j+144|0);Od(j+224|0,j+160|0);Pd(j+224|0,j+32|0);Od(j+32|0,j+48|0);Pd(j+32|0,j+160|0);Pd(j+48|0,j+144|0);Od(j+32|0,j+48|0);Od(j+48|0,j+224|0);Od(j+192|0,j+128|0);Od(j+256|0,j+80|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+128|0);Od(j+128|0,j+80|0);Pd(j+128|0,j+240|0);Pd(j+80|0,j+176|0);Od(j+128|0,j+80|0);Od(j+80|0,j+224|0);Od(j+32|0,j+192|0);Od(j+128|0,j+192|0);Od(j+48|0,j+256|0);Od(j+80|0,j+256|0);Ke(j+192|0,j+16|0);Ke(j+256|0,j+112|0);Od(j+192|0,j+64|0);Od(j+256|0,j+96|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+64|0);Od(j+64|0,j+96|0);Pd(j+64|0,j+240|0);Pd(j+96|0,j+176|0);Od(j+64|0,j+96|0);Od(j+96|0,j+224|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+16|0);Od(j+16|0,j+112|0);Pd(j+16|0,j+160|0);Pd(j+112|0,j+144|0);Od(j+16|0,j+112|0);Od(j+112|0,j+208|0);Od(j+16|0,j+192|0);Od(j+64|0,j+192|0);Od(j+112|0,j+256|0);Od(j+96|0,j+256|0);Od(j+16|0,j+128|0);Od(j+112|0,j+32|0);Od(j+64|0,j+16|0);Od(j+32|0,j+128|0);Od(j+128|0,j+112|0);Od(j+112|0,j+48|0);Od(j+48|0,j+96|0);Od(j+64|0,j+48|0);Od(j+96|0,j+80|0);Od(j+80|0,j+48|0);Od(j+32|0,j+80|0);dd(j+256|0,j+128|0,147);dd(j+240|0,j+112|0,147);dd(j+224|0,j+64|0,147);dd(j+208|0,j+32|0,147);dd(j+192|0,j+80|0,147);dd(j+176|0,j+16|0,147);dd(j+160|0,j+96|0,147);dd(j+144|0,j+48|0,147);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+64|0,j+224|0);Od(j+32|0,j+208|0);Od(j+80|0,j+192|0);Od(j+16|0,j+176|0);Od(j+96|0,j+160|0);Od(j+48|0,j+144|0);Od(j+256|0,j+48|0);Od(j+240|0,j+128|0);Od(j+224|0,j+112|0);Od(j+240|0,j+48|0);Od(j+208|0,j+64|0);Od(j+192|0,j+32|0);Od(j+176|0,j+80|0);Od(j+208|0,j+48|0);Od(j+160|0,j+16|0);Od(j+144|0,j+96|0);Od(j+192|0,j+48|0);dd(j+128|0,j+128|0,78);dd(j+112|0,j+112|0,78);dd(j+64|0,j+64|0,78);dd(j+32|0,j+32|0,78);dd(j+80|0,j+80|0,78);dd(j+16|0,j+16|0,78);dd(j+96|0,j+96|0,78);dd(j+48|0,j+48|0,78);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+224|0,j+64|0);Od(j+208|0,j+32|0);Od(j+192|0,j+80|0);Od(j+176|0,j+16|0);Od(j+160|0,j+96|0);Od(j+144|0,j+48|0);Od(j+256|0,h+256|0);sb(j+256|0,35320);Od(j+240|0,h+272|0);sb(j+240|0,35320);Od(j+224|0,h+288|0);sb(j+224|0,35320);Od(j+208|0,h+304|0);sb(j+208|0,35320);Od(j+192|0,h+320|0);sb(j+192|0,35320);Od(j+176|0,h+336|0);sb(j+176|0,35320);Od(j+160|0,h+352|0);sb(j+160|0,35320);Od(j+144|0,h+368|0);sb(j+144|0,35320);Od(j+176|0,j+160|0);Od(j+224|0,j+240|0);Od(j+176|0,j+256|0);Od(j+160|0,j+224|0);Od(j+208|0,j+256|0);Od(j+160|0,j+208|0);Od(j+208|0,j+144|0);Od(j+208|0,j+192|0);Od(j+144|0,j+176|0);Od(j+208|0,j+240|0);Od(j+192|0,j+176|0);Od(j+224|0,j+144|0);Od(j+240|0,j+176|0);Ke(j+80|0,j+144|0);Ke(j+96|0,j+240|0);Ke(j+112|0,j+176|0);Ke(j+48|0,j+224|0);Ke(j+64|0,j+160|0);Od(j+80|0,j+192|0);Od(j+96|0,j+224|0);Od(j+112|0,j+208|0);Od(j+48|0,j+192|0);Od(j+64|0,j+256|0);Ke(j+32|0,j+80|0);Ke(j+128|0,j+96|0);Ke(j+16|0,j+80|0);Rd(j+96|0,j+112|0);Rd(j+80|0,j+64|0);Od(j+16|0,j+128|0);Pd(j+32|0,j+64|0);Pd(j+128|0,j+112|0);Od(j+64|0,j+112|0);Pd(j+16|0,j+64|0);Ke(j+64|0,j+208|0);Od(j+64|0,j+256|0);Pd(j+48|0,j+64|0);Od(j+80|0,j+48|0);Od(j+96|0,j+48|0);Ke(j+48|0,j+144|0);Od(j+48|0,j+240|0);Ke(j+64|0,j+176|0);Ke(j+112|0,j+48|0);Od(j+64|0,j+160|0);Rd(j+112|0,j+64|0);Pd(j+48|0,j+64|0);Od(j+128|0,j+48|0);Od(j+80|0,j+16|0);Od(j+96|0,j+32|0);Od(j+112|0,j+16|0);Od(j+128|0,j+32|0);Od(j+112|0,j+32|0);Ke(j+64|0,j+224|0);Ke(j+48|0,j+192|0);Ke(j+32|0,j+240|0);Ke(j+16|0,j+144|0);Pd(j+64|0,j+208|0);Pd(j+48|0,j+256|0);Pd(j+32|0,j+176|0);Rd(j+16|0,j+160|0);Od(j+80|0,j+64|0);Od(j+96|0,j+48|0);Od(j+112|0,j+32|0);Od(j+128|0,j+16|0);Ke(j+64|0,j+80|0);Od(j+64|0,j+96|0);Pd(j+80|0,j+112|0);Ke(j+32|0,j+128|0);Od(j+32|0,j+80|0);Ke(j+16|0,j+64|0);Pd(j+16|0,j+32|0);Od(j+16|0,j+96|0);Ke(j+48|0,j+112|0);Od(j+48|0,j+128|0);Od(j+80|0,j+96|0);Pd(j+48|0,j+80|0);Od(j+48|0,j+128|0);Od(j+112|0,j+48|0);Ke(j+96|0,j+32|0);Od(j+96|0,j+48|0);Pd(j+96|0,j+128|0);Od(j+112|0,j+96|0);Od(j+32|0,j+96|0);Pd(j+32|0,j+16|0);Od(j+32|0,j+64|0);Ke(j+64|0,j+160|0);Ke(j+128|0,j+176|0);Ke(j+96|0,j+16|0);Od(j+96|0,j+32|0);Pd(j+96|0,j+160|0);Od(j+160|0,j+176|0);Pd(j+160|0,j+32|0);Pd(j+176|0,j+16|0);Od(j+160|0,j+176|0);Od(j+176|0,j+96|0);Od(j+64|0,j+256|0);Od(j+128|0,j+208|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+256|0);Od(j+256|0,j+208|0);Pd(j+256|0,j+112|0);Pd(j+208|0,j+48|0);Od(j+256|0,j+208|0);Od(j+208|0,j+96|0);Od(j+160|0,j+64|0);Od(j+256|0,j+64|0);Od(j+176|0,j+128|0);Od(j+208|0,j+128|0);Ke(j+64|0,j+144|0);Ke(j+128|0,j+240|0);Od(j+64|0,j+192|0);Od(j+128|0,j+224|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+192|0);Od(j+192|0,j+224|0);Pd(j+192|0,j+112|0);Pd(j+224|0,j+48|0);Od(j+192|0,j+224|0);Od(j+224|0,j+96|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+144|0);Od(j+144|0,j+240|0);Pd(j+144|0,j+32|0);Pd(j+240|0,j+16|0);Od(j+144|0,j+240|0);Od(j+240|0,j+80|0);Od(j+144|0,j+64|0);Od(j+192|0,j+64|0);Od(j+240|0,j+128|0);Od(j+224|0,j+128|0);Od(j+144|0,j+256|0);Od(j+240|0,j+160|0);Od(j+192|0,j+144|0);Od(j+160|0,j+256|0);Od(j+256|0,j+240|0);Od(j+240|0,j+176|0);Od(j+176|0,j+224|0);Od(j+192|0,j+176|0);Od(j+224|0,j+208|0);Od(j+208|0,j+176|0);Od(j+160|0,j+208|0);dd(j+128|0,j+256|0,147);dd(j+112|0,j+240|0,147);dd(j+96|0,j+192|0,147);dd(j+80|0,j+160|0,147);dd(j+64|0,j+208|0,147);dd(j+48|0,j+144|0,147);dd(j+32|0,j+224|0,147);dd(j+16|0,j+176|0,147);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+192|0,j+96|0);Od(j+160|0,j+80|0);Od(j+208|0,j+64|0);Od(j+144|0,j+48|0);Od(j+224|0,j+32|0);Od(j+176|0,j+16|0);Od(j+128|0,j+176|0);Od(j+112|0,j+256|0);Od(j+96|0,j+240|0);Od(j+112|0,j+176|0);Od(j+80|0,j+192|0);Od(j+64|0,j+160|0);Od(j+48|0,j+208|0);Od(j+80|0,j+176|0);Od(j+32|0,j+144|0);Od(j+16|0,j+224|0);Od(j+64|0,j+176|0);dd(j+256|0,j+256|0,78);dd(j+240|0,j+240|0,78);dd(j+192|0,j+192|0,78);dd(j+160|0,j+160|0,78);dd(j+208|0,j+208|0,78);dd(j+144|0,j+144|0,78);dd(j+224|0,j+224|0,78);dd(j+176|0,j+176|0,78);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+96|0,j+192|0);Od(j+80|0,j+160|0);Od(j+64|0,j+208|0);Od(j+48|0,j+144|0);Od(j+32|0,j+224|0);Od(j+16|0,j+176|0);Od(j+128|0,h+384|0);sb(j+128|0,35320);Od(j+112|0,h+400|0);sb(j+112|0,35320);Od(j+96|0,h+416|0);sb(j+96|0,35320);Od(j+80|0,h+432|0);sb(j+80|0,35320);Od(j+64|0,h+448|0);sb(j+64|0,35320);Od(j+48|0,h+464|0);sb(j+48|0,35320);Od(j+32|0,h+480|0);sb(j+32|0,35320);Od(j+16|0,h+496|0);sb(j+16|0,35320);Od(j+48|0,j+32|0);Od(j+96|0,j+112|0);Od(j+48|0,j+128|0);Od(j+32|0,j+96|0);Od(j+80|0,j+128|0);Od(j+32|0,j+80|0);Od(j+80|0,j+16|0);Od(j+80|0,j+64|0);Od(j+16|0,j+48|0);Od(j+80|0,j+112|0);Od(j+64|0,j+48|0);Od(j+96|0,j+16|0);Od(j+112|0,j+48|0);Ke(j+208|0,j+16|0);Ke(j+224|0,j+112|0);Ke(j+240|0,j+48|0);Ke(j+176|0,j+96|0);Ke(j+192|0,j+32|0);Od(j+208|0,j+64|0);Od(j+224|0,j+96|0);Od(j+240|0,j+80|0);Od(j+176|0,j+64|0);Od(j+192|0,j+128|0);Ke(j+160|0,j+208|0);Ke(j+256|0,j+224|0);Ke(j+144|0,j+208|0);Rd(j+224|0,j+240|0);Rd(j+208|0,j+192|0);Od(j+144|0,j+256|0);Pd(j+160|0,j+192|0);Pd(j+256|0,j+240|0);Od(j+192|0,j+240|0);Pd(j+144|0,j+192|0);Ke(j+192|0,j+80|0);Od(j+192|0,j+128|0);Pd(j+176|0,j+192|0);Od(j+208|0,j+176|0);Od(j+224|0,j+176|0);Ke(j+176|0,j+16|0);Od(j+176|0,j+112|0);Ke(j+192|0,j+48|0);Ke(j+240|0,j+176|0);Od(j+192|0,j+32|0);Rd(j+240|0,j+192|0);Pd(j+176|0,j+192|0);Od(j+256|0,j+176|0);Od(j+208|0,j+144|0);Od(j+224|0,j+160|0);Od(j+240|0,j+144|0);Od(j+256|0,j+160|0);Od(j+240|0,j+160|0);Ke(j+192|0,j+96|0);Ke(j+176|0,j+64|0);Ke(j+160|0,j+112|0);Ke(j+144|0,j+16|0);Pd(j+192|0,j+80|0);Pd(j+176|0,j+128|0);Pd(j+160|0,j+48|0);Rd(j+144|0,j+32|0);Od(j+208|0,j+192|0);Od(j+224|0,j+176|0);Od(j+240|0,j+160|0);Od(j+256|0,j+144|0);Ke(j+192|0,j+208|0);Od(j+192|0,j+224|0);Pd(j+208|0,j+240|0);Ke(j+160|0,j+256|0);Od(j+160|0,j+208|0);Ke(j+144|0,j+192|0);Pd(j+144|0,j+160|0);Od(j+144|0,j+224|0);Ke(j+176|0,j+240|0);Od(j+176|0,j+256|0);Od(j+208|0,j+224|0);Pd(j+176|0,j+208|0);Od(j+176|0,j+256|0);Od(j+240|0,j+176|0);Ke(j+224|0,j+160|0);Od(j+224|0,j+176|0);Pd(j+224|0,j+256|0);Od(j+240|0,j+224|0);Od(j+160|0,j+224|0);Pd(j+160|0,j+144|0);Od(j+160|0,j+192|0);Ke(j+192|0,j+32|0);Ke(j+256|0,j+48|0);Ke(j+224|0,j+144|0);Od(j+224|0,j+160|0);Pd(j+224|0,j+32|0);Od(j+32|0,j+48|0);Pd(j+32|0,j+160|0);Pd(j+48|0,j+144|0);Od(j+32|0,j+48|0);Od(j+48|0,j+224|0);Od(j+192|0,j+128|0);Od(j+256|0,j+80|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+128|0);Od(j+128|0,j+80|0);Pd(j+128|0,j+240|0);Pd(j+80|0,j+176|0);Od(j+128|0,j+80|0);Od(j+80|0,j+224|0);Od(j+32|0,j+192|0);Od(j+128|0,j+192|0);Od(j+48|0,j+256|0);Od(j+80|0,j+256|0);Ke(j+192|0,j+16|0);Ke(j+256|0,j+112|0);Od(j+192|0,j+64|0);Od(j+256|0,j+96|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+64|0);Od(j+64|0,j+96|0);Pd(j+64|0,j+240|0);Pd(j+96|0,j+176|0);Od(j+64|0,j+96|0);Od(j+96|0,j+224|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+16|0);Od(j+16|0,j+112|0);Pd(j+16|0,j+160|0);Pd(j+112|0,j+144|0);Od(j+16|0,j+112|0);Od(j+112|0,j+208|0);Od(j+16|0,j+192|0);Od(j+64|0,j+192|0);Od(j+112|0,j+256|0);Od(j+96|0,j+256|0);Od(j+16|0,j+128|0);Od(j+112|0,j+32|0);Od(j+64|0,j+16|0);Od(j+32|0,j+128|0);Od(j+128|0,j+112|0);Od(j+112|0,j+48|0);Od(j+48|0,j+96|0);Od(j+64|0,j+48|0);Od(j+96|0,j+80|0);Od(j+80|0,j+48|0);Od(j+32|0,j+80|0);dd(j+256|0,j+128|0,147);dd(j+240|0,j+112|0,147);dd(j+224|0,j+64|0,147);dd(j+208|0,j+32|0,147);dd(j+192|0,j+80|0,147);dd(j+176|0,j+16|0,147);dd(j+160|0,j+96|0,147);dd(j+144|0,j+48|0,147);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+64|0,j+224|0);Od(j+32|0,j+208|0);Od(j+80|0,j+192|0);Od(j+16|0,j+176|0);Od(j+96|0,j+160|0);Od(j+48|0,j+144|0);Od(j+256|0,j+48|0);Od(j+240|0,j+128|0);Od(j+224|0,j+112|0);Od(j+240|0,j+48|0);Od(j+208|0,j+64|0);Od(j+192|0,j+32|0);Od(j+176|0,j+80|0);Od(j+208|0,j+48|0);Od(j+160|0,j+16|0);Od(j+144|0,j+96|0);Od(j+192|0,j+48|0);dd(j+128|0,j+128|0,78);dd(j+112|0,j+112|0,78);dd(j+64|0,j+64|0,78);dd(j+32|0,j+32|0,78);dd(j+80|0,j+80|0,78);dd(j+16|0,j+16|0,78);dd(j+96|0,j+96|0,78);dd(j+48|0,j+48|0,78);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+224|0,j+64|0);Od(j+208|0,j+32|0);Od(j+192|0,j+80|0);Od(j+176|0,j+16|0);Od(j+160|0,j+96|0);Od(j+144|0,j+48|0);Od(j+256|0,h+512|0);sb(j+256|0,35320);Od(j+240|0,h+528|0);sb(j+240|0,35320);Od(j+224|0,h+544|0);sb(j+224|0,35320);Od(j+208|0,h+560|0);sb(j+208|0,35320);Od(j+192|0,h+576|0);sb(j+192|0,35320);Od(j+176|0,h+592|0);sb(j+176|0,35320);Od(j+160|0,h+608|0);sb(j+160|0,35320);Od(j+144|0,h+624|0);sb(j+144|0,35320);Od(j+176|0,j+160|0);Od(j+224|0,j+240|0);Od(j+176|0,j+256|0);Od(j+160|0,j+224|0);Od(j+208|0,j+256|0);Od(j+160|0,j+208|0);Od(j+208|0,j+144|0);Od(j+208|0,j+192|0);Od(j+144|0,j+176|0);Od(j+208|0,j+240|0);Od(j+192|0,j+176|0);Od(j+224|0,j+144|0);Od(j+240|0,j+176|0);Ke(j+80|0,j+144|0);Ke(j+96|0,j+240|0);Ke(j+112|0,j+176|0);Ke(j+48|0,j+224|0);Ke(j+64|0,j+160|0);Od(j+80|0,j+192|0);Od(j+96|0,j+224|0);Od(j+112|0,j+208|0);Od(j+48|0,j+192|0);Od(j+64|0,j+256|0);Ke(j+32|0,j+80|0);Ke(j+128|0,j+96|0);Ke(j+16|0,j+80|0);Rd(j+96|0,j+112|0);Rd(j+80|0,j+64|0);Od(j+16|0,j+128|0);Pd(j+32|0,j+64|0);Pd(j+128|0,j+112|0);Od(j+64|0,j+112|0);Pd(j+16|0,j+64|0);Ke(j+64|0,j+208|0);Od(j+64|0,j+256|0);Pd(j+48|0,j+64|0);Od(j+80|0,j+48|0);Od(j+96|0,j+48|0);Ke(j+48|0,j+144|0);Od(j+48|0,j+240|0);Ke(j+64|0,j+176|0);Ke(j+112|0,j+48|0);Od(j+64|0,j+160|0);Rd(j+112|0,j+64|0);Pd(j+48|0,j+64|0);Od(j+128|0,j+48|0);Od(j+80|0,j+16|0);Od(j+96|0,j+32|0);Od(j+112|0,j+16|0);Od(j+128|0,j+32|0);Od(j+112|0,j+32|0);Ke(j+64|0,j+224|0);Ke(j+48|0,j+192|0);Ke(j+32|0,j+240|0);Ke(j+16|0,j+144|0);Pd(j+64|0,j+208|0);Pd(j+48|0,j+256|0);Pd(j+32|0,j+176|0);Rd(j+16|0,j+160|0);Od(j+80|0,j+64|0);Od(j+96|0,j+48|0);Od(j+112|0,j+32|0);Od(j+128|0,j+16|0);Ke(j+64|0,j+80|0);Od(j+64|0,j+96|0);Pd(j+80|0,j+112|0);Ke(j+32|0,j+128|0);Od(j+32|0,j+80|0);Ke(j+16|0,j+64|0);Pd(j+16|0,j+32|0);Od(j+16|0,j+96|0);Ke(j+48|0,j+112|0);Od(j+48|0,j+128|0);Od(j+80|0,j+96|0);Pd(j+48|0,j+80|0);Od(j+48|0,j+128|0);Od(j+112|0,j+48|0);Ke(j+96|0,j+32|0);Od(j+96|0,j+48|0);Pd(j+96|0,j+128|0);Od(j+112|0,j+96|0);Od(j+32|0,j+96|0);Pd(j+32|0,j+16|0);Od(j+32|0,j+64|0);Ke(j+64|0,j+160|0);Ke(j+128|0,j+176|0);Ke(j+96|0,j+16|0);Od(j+96|0,j+32|0);Pd(j+96|0,j+160|0);Od(j+160|0,j+176|0);Pd(j+160|0,j+32|0);Pd(j+176|0,j+16|0);Od(j+160|0,j+176|0);Od(j+176|0,j+96|0);Od(j+64|0,j+256|0);Od(j+128|0,j+208|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+256|0);Od(j+256|0,j+208|0);Pd(j+256|0,j+112|0);Pd(j+208|0,j+48|0);Od(j+256|0,j+208|0);Od(j+208|0,j+96|0);Od(j+160|0,j+64|0);Od(j+256|0,j+64|0);Od(j+176|0,j+128|0);Od(j+208|0,j+128|0);Ke(j+64|0,j+144|0);Ke(j+128|0,j+240|0);Od(j+64|0,j+192|0);Od(j+128|0,j+224|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+192|0);Od(j+192|0,j+224|0);Pd(j+192|0,j+112|0);Pd(j+224|0,j+48|0);Od(j+192|0,j+224|0);Od(j+224|0,j+96|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+144|0);Od(j+144|0,j+240|0);Pd(j+144|0,j+32|0);Pd(j+240|0,j+16|0);Od(j+144|0,j+240|0);Od(j+240|0,j+80|0);Od(j+144|0,j+64|0);Od(j+192|0,j+64|0);Od(j+240|0,j+128|0);Od(j+224|0,j+128|0);Od(j+144|0,j+256|0);Od(j+240|0,j+160|0);Od(j+192|0,j+144|0);Od(j+160|0,j+256|0);Od(j+256|0,j+240|0);Od(j+240|0,j+176|0);Od(j+176|0,j+224|0);Od(j+192|0,j+176|0);Od(j+224|0,j+208|0);Od(j+208|0,j+176|0);Od(j+160|0,j+208|0);dd(j+128|0,j+256|0,147);dd(j+112|0,j+240|0,147);dd(j+96|0,j+192|0,147);dd(j+80|0,j+160|0,147);dd(j+64|0,j+208|0,147);dd(j+48|0,j+144|0,147);dd(j+32|0,j+224|0,147);dd(j+16|0,j+176|0,147);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+192|0,j+96|0);Od(j+160|0,j+80|0);Od(j+208|0,j+64|0);Od(j+144|0,j+48|0);Od(j+224|0,j+32|0);Od(j+176|0,j+16|0);Od(j+128|0,j+176|0);Od(j+112|0,j+256|0);Od(j+96|0,j+240|0);Od(j+112|0,j+176|0);Od(j+80|0,j+192|0);Od(j+64|0,j+160|0);Od(j+48|0,j+208|0);Od(j+80|0,j+176|0);Od(j+32|0,j+144|0);Od(j+16|0,j+224|0);Od(j+64|0,j+176|0);dd(j+256|0,j+256|0,78);dd(j+240|0,j+240|0,78);dd(j+192|0,j+192|0,78);dd(j+160|0,j+160|0,78);dd(j+208|0,j+208|0,78);dd(j+144|0,j+144|0,78);dd(j+224|0,j+224|0,78);dd(j+176|0,j+176|0,78);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+96|0,j+192|0);Od(j+80|0,j+160|0);Od(j+64|0,j+208|0);Od(j+48|0,j+144|0);Od(j+32|0,j+224|0);Od(j+16|0,j+176|0);Od(j+128|0,h+640|0);sb(j+128|0,35320);Od(j+112|0,h+656|0);sb(j+112|0,35320);Od(j+96|0,h+672|0);sb(j+96|0,35320);Od(j+80|0,h+688|0);sb(j+80|0,35320);Od(j+64|0,h+704|0);sb(j+64|0,35320);Od(j+48|0,h+720|0);sb(j+48|0,35320);Od(j+32|0,h+736|0);sb(j+32|0,35320);Od(j+16|0,h+752|0);sb(j+16|0,35320);Od(j+48|0,j+32|0);Od(j+96|0,j+112|0);Od(j+48|0,j+128|0);Od(j+32|0,j+96|0);Od(j+80|0,j+128|0);Od(j+32|0,j+80|0);Od(j+80|0,j+16|0);Od(j+80|0,j+64|0);Od(j+16|0,j+48|0);Od(j+80|0,j+112|0);Od(j+64|0,j+48|0);Od(j+96|0,j+16|0);Od(j+112|0,j+48|0);Ke(j+208|0,j+16|0);Ke(j+224|0,j+112|0);Ke(j+240|0,j+48|0);Ke(j+176|0,j+96|0);Ke(j+192|0,j+32|0);Od(j+208|0,j+64|0);Od(j+224|0,j+96|0);Od(j+240|0,j+80|0);Od(j+176|0,j+64|0);Od(j+192|0,j+128|0);Ke(j+160|0,j+208|0);Ke(j+256|0,j+224|0);Ke(j+144|0,j+208|0);Rd(j+224|0,j+240|0);Rd(j+208|0,j+192|0);Od(j+144|0,j+256|0);Pd(j+160|0,j+192|0);Pd(j+256|0,j+240|0);Od(j+192|0,j+240|0);Pd(j+144|0,j+192|0);Ke(j+192|0,j+80|0);Od(j+192|0,j+128|0);Pd(j+176|0,j+192|0);Od(j+208|0,j+176|0);Od(j+224|0,j+176|0);Ke(j+176|0,j+16|0);Od(j+176|0,j+112|0);Ke(j+192|0,j+48|0);Ke(j+240|0,j+176|0);Od(j+192|0,j+32|0);Rd(j+240|0,j+192|0);Pd(j+176|0,j+192|0);Od(j+256|0,j+176|0);Od(j+208|0,j+144|0);Od(j+224|0,j+160|0);Od(j+240|0,j+144|0);Od(j+256|0,j+160|0);Od(j+240|0,j+160|0);Ke(j+192|0,j+96|0);Ke(j+176|0,j+64|0);Ke(j+160|0,j+112|0);Ke(j+144|0,j+16|0);Pd(j+192|0,j+80|0);Pd(j+176|0,j+128|0);Pd(j+160|0,j+48|0);Rd(j+144|0,j+32|0);Od(j+208|0,j+192|0);Od(j+224|0,j+176|0);Od(j+240|0,j+160|0);Od(j+256|0,j+144|0);Ke(j+192|0,j+208|0);Od(j+192|0,j+224|0);Pd(j+208|0,j+240|0);Ke(j+160|0,j+256|0);Od(j+160|0,j+208|0);Ke(j+144|0,j+192|0);Pd(j+144|0,j+160|0);Od(j+144|0,j+224|0);Ke(j+176|0,j+240|0);Od(j+176|0,j+256|0);Od(j+208|0,j+224|0);Pd(j+176|0,j+208|0);Od(j+176|0,j+256|0);Od(j+240|0,j+176|0);Ke(j+224|0,j+160|0);Od(j+224|0,j+176|0);Pd(j+224|0,j+256|0);Od(j+240|0,j+224|0);Od(j+160|0,j+224|0);Pd(j+160|0,j+144|0);Od(j+160|0,j+192|0);Ke(j+192|0,j+32|0);Ke(j+256|0,j+48|0);Ke(j+224|0,j+144|0);Od(j+224|0,j+160|0);Pd(j+224|0,j+32|0);Od(j+32|0,j+48|0);Pd(j+32|0,j+160|0);Pd(j+48|0,j+144|0);Od(j+32|0,j+48|0);Od(j+48|0,j+224|0);Od(j+192|0,j+128|0);Od(j+256|0,j+80|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+128|0);Od(j+128|0,j+80|0);Pd(j+128|0,j+240|0);Pd(j+80|0,j+176|0);Od(j+128|0,j+80|0);Od(j+80|0,j+224|0);Od(j+32|0,j+192|0);Od(j+128|0,j+192|0);Od(j+48|0,j+256|0);Od(j+80|0,j+256|0);Ke(j+192|0,j+16|0);Ke(j+256|0,j+112|0);Od(j+192|0,j+64|0);Od(j+256|0,j+96|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+64|0);Od(j+64|0,j+96|0);Pd(j+64|0,j+240|0);Pd(j+96|0,j+176|0);Od(j+64|0,j+96|0);Od(j+96|0,j+224|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+16|0);Od(j+16|0,j+112|0);Pd(j+16|0,j+160|0);Pd(j+112|0,j+144|0);Od(j+16|0,j+112|0);Od(j+112|0,j+208|0);Od(j+16|0,j+192|0);Od(j+64|0,j+192|0);Od(j+112|0,j+256|0);Od(j+96|0,j+256|0);Od(j+16|0,j+128|0);Od(j+112|0,j+32|0);Od(j+64|0,j+16|0);Od(j+32|0,j+128|0);Od(j+128|0,j+112|0);Od(j+112|0,j+48|0);Od(j+48|0,j+96|0);Od(j+64|0,j+48|0);Od(j+96|0,j+80|0);Od(j+80|0,j+48|0);Od(j+32|0,j+80|0);dd(j+256|0,j+128|0,147);dd(j+240|0,j+112|0,147);dd(j+224|0,j+64|0,147);dd(j+208|0,j+32|0,147);dd(j+192|0,j+80|0,147);dd(j+176|0,j+16|0,147);dd(j+160|0,j+96|0,147);dd(j+144|0,j+48|0,147);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+64|0,j+224|0);Od(j+32|0,j+208|0);Od(j+80|0,j+192|0);Od(j+16|0,j+176|0);Od(j+96|0,j+160|0);Od(j+48|0,j+144|0);Od(j+256|0,j+48|0);Od(j+240|0,j+128|0);Od(j+224|0,j+112|0);Od(j+240|0,j+48|0);Od(j+208|0,j+64|0);Od(j+192|0,j+32|0);Od(j+176|0,j+80|0);Od(j+208|0,j+48|0);Od(j+160|0,j+16|0);Od(j+144|0,j+96|0);Od(j+192|0,j+48|0);dd(j+128|0,j+128|0,78);dd(j+112|0,j+112|0,78);dd(j+64|0,j+64|0,78);dd(j+32|0,j+32|0,78);dd(j+80|0,j+80|0,78);dd(j+16|0,j+16|0,78);dd(j+96|0,j+96|0,78);dd(j+48|0,j+48|0,78);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+224|0,j+64|0);Od(j+208|0,j+32|0);Od(j+192|0,j+80|0);Od(j+176|0,j+16|0);Od(j+160|0,j+96|0);Od(j+144|0,j+48|0);Od(j+256|0,h+768|0);sb(j+256|0,35320);Od(j+240|0,h+784|0);sb(j+240|0,35320);Od(j+224|0,h+800|0);sb(j+224|0,35320);Od(j+208|0,h+816|0);sb(j+208|0,35320);Od(j+192|0,h+832|0);sb(j+192|0,35320);Od(j+176|0,h+848|0);sb(j+176|0,35320);Od(j+160|0,h+864|0);sb(j+160|0,35320);Od(j+144|0,h+880|0);sb(j+144|0,35320);Od(j+176|0,j+160|0);Od(j+224|0,j+240|0);Od(j+176|0,j+256|0);Od(j+160|0,j+224|0);Od(j+208|0,j+256|0);Od(j+160|0,j+208|0);Od(j+208|0,j+144|0);Od(j+208|0,j+192|0);Od(j+144|0,j+176|0);Od(j+208|0,j+240|0);Od(j+192|0,j+176|0);Od(j+224|0,j+144|0);Od(j+240|0,j+176|0);Ke(j+80|0,j+144|0);Ke(j+96|0,j+240|0);Ke(j+112|0,j+176|0);Ke(j+48|0,j+224|0);Ke(j+64|0,j+160|0);Od(j+80|0,j+192|0);Od(j+96|0,j+224|0);Od(j+112|0,j+208|0);Od(j+48|0,j+192|0);Od(j+64|0,j+256|0);Ke(j+32|0,j+80|0);Ke(j+128|0,j+96|0);Ke(j+16|0,j+80|0);Rd(j+96|0,j+112|0);Rd(j+80|0,j+64|0);Od(j+16|0,j+128|0);Pd(j+32|0,j+64|0);Pd(j+128|0,j+112|0);Od(j+64|0,j+112|0);Pd(j+16|0,j+64|0);Ke(j+64|0,j+208|0);Od(j+64|0,j+256|0);Pd(j+48|0,j+64|0);Od(j+80|0,j+48|0);Od(j+96|0,j+48|0);Ke(j+48|0,j+144|0);Od(j+48|0,j+240|0);Ke(j+64|0,j+176|0);Ke(j+112|0,j+48|0);Od(j+64|0,j+160|0);Rd(j+112|0,j+64|0);Pd(j+48|0,j+64|0);Od(j+128|0,j+48|0);Od(j+80|0,j+16|0);Od(j+96|0,j+32|0);Od(j+112|0,j+16|0);Od(j+128|0,j+32|0);Od(j+112|0,j+32|0);Ke(j+64|0,j+224|0);Ke(j+48|0,j+192|0);Ke(j+32|0,j+240|0);Ke(j+16|0,j+144|0);Pd(j+64|0,j+208|0);Pd(j+48|0,j+256|0);Pd(j+32|0,j+176|0);Rd(j+16|0,j+160|0);Od(j+80|0,j+64|0);Od(j+96|0,j+48|0);Od(j+112|0,j+32|0);Od(j+128|0,j+16|0);Ke(j+64|0,j+80|0);Od(j+64|0,j+96|0);Pd(j+80|0,j+112|0);Ke(j+32|0,j+128|0);Od(j+32|0,j+80|0);Ke(j+16|0,j+64|0);Pd(j+16|0,j+32|0);Od(j+16|0,j+96|0);Ke(j+48|0,j+112|0);Od(j+48|0,j+128|0);Od(j+80|0,j+96|0);Pd(j+48|0,j+80|0);Od(j+48|0,j+128|0);Od(j+112|0,j+48|0);Ke(j+96|0,j+32|0);Od(j+96|0,j+48|0);Pd(j+96|0,j+128|0);Od(j+112|0,j+96|0);Od(j+32|0,j+96|0);Pd(j+32|0,j+16|0);Od(j+32|0,j+64|0);Ke(j+64|0,j+160|0);Ke(j+128|0,j+176|0);Ke(j+96|0,j+16|0);Od(j+96|0,j+32|0);Pd(j+96|0,j+160|0);Od(j+160|0,j+176|0);Pd(j+160|0,j+32|0);Pd(j+176|0,j+16|0);Od(j+160|0,j+176|0);Od(j+176|0,j+96|0);Od(j+64|0,j+256|0);Od(j+128|0,j+208|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+256|0);Od(j+256|0,j+208|0);Pd(j+256|0,j+112|0);Pd(j+208|0,j+48|0);Od(j+256|0,j+208|0);Od(j+208|0,j+96|0);Od(j+160|0,j+64|0);Od(j+256|0,j+64|0);Od(j+176|0,j+128|0);Od(j+208|0,j+128|0);Ke(j+64|0,j+144|0);Ke(j+128|0,j+240|0);Od(j+64|0,j+192|0);Od(j+128|0,j+224|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+192|0);Od(j+192|0,j+224|0);Pd(j+192|0,j+112|0);Pd(j+224|0,j+48|0);Od(j+192|0,j+224|0);Od(j+224|0,j+96|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+144|0);Od(j+144|0,j+240|0);Pd(j+144|0,j+32|0);Pd(j+240|0,j+16|0);Od(j+144|0,j+240|0);Od(j+240|0,j+80|0);Od(j+144|0,j+64|0);Od(j+192|0,j+64|0);Od(j+240|0,j+128|0);Od(j+224|0,j+128|0);Od(j+144|0,j+256|0);Od(j+240|0,j+160|0);Od(j+192|0,j+144|0);Od(j+160|0,j+256|0);Od(j+256|0,j+240|0);Od(j+240|0,j+176|0);Od(j+176|0,j+224|0);Od(j+192|0,j+176|0);Od(j+224|0,j+208|0);Od(j+208|0,j+176|0);Od(j+160|0,j+208|0);dd(j+128|0,j+256|0,147);dd(j+112|0,j+240|0,147);dd(j+96|0,j+192|0,147);dd(j+80|0,j+160|0,147);dd(j+64|0,j+208|0,147);dd(j+48|0,j+144|0,147);dd(j+32|0,j+224|0,147);dd(j+16|0,j+176|0,147);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+192|0,j+96|0);Od(j+160|0,j+80|0);Od(j+208|0,j+64|0);Od(j+144|0,j+48|0);Od(j+224|0,j+32|0);Od(j+176|0,j+16|0);Od(j+128|0,j+176|0);Od(j+112|0,j+256|0);Od(j+96|0,j+240|0);Od(j+112|0,j+176|0);Od(j+80|0,j+192|0);Od(j+64|0,j+160|0);Od(j+48|0,j+208|0);Od(j+80|0,j+176|0);Od(j+32|0,j+144|0);Od(j+16|0,j+224|0);Od(j+64|0,j+176|0);dd(j+256|0,j+256|0,78);dd(j+240|0,j+240|0,78);dd(j+192|0,j+192|0,78);dd(j+160|0,j+160|0,78);dd(j+208|0,j+208|0,78);dd(j+144|0,j+144|0,78);dd(j+224|0,j+224|0,78);dd(j+176|0,j+176|0,78);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+96|0,j+192|0);Od(j+80|0,j+160|0);Od(j+64|0,j+208|0);Od(j+48|0,j+144|0);Od(j+32|0,j+224|0);Od(j+16|0,j+176|0);Od(j+128|0,h+896|0);sb(j+128|0,35320);Od(j+112|0,h+912|0);sb(j+112|0,35320);Od(j+96|0,h+928|0);sb(j+96|0,35320);Od(j+80|0,h+944|0);sb(j+80|0,35320);Od(j+64|0,h+960|0);sb(j+64|0,35320);Od(j+48|0,h+976|0);sb(j+48|0,35320);Od(j+32|0,h+992|0);sb(j+32|0,35320);Od(j+16|0,h+1008|0);sb(j+16|0,35320);Od(j+48|0,j+32|0);Od(j+96|0,j+112|0);Od(j+48|0,j+128|0);Od(j+32|0,j+96|0);Od(j+80|0,j+128|0);Od(j+32|0,j+80|0);Od(j+80|0,j+16|0);Od(j+80|0,j+64|0);Od(j+16|0,j+48|0);Od(j+80|0,j+112|0);Od(j+64|0,j+48|0);Od(j+96|0,j+16|0);Od(j+112|0,j+48|0);Ke(j+208|0,j+16|0);Ke(j+224|0,j+112|0);Ke(j+240|0,j+48|0);Ke(j+176|0,j+96|0);Ke(j+192|0,j+32|0);Od(j+208|0,j+64|0);Od(j+224|0,j+96|0);Od(j+240|0,j+80|0);Od(j+176|0,j+64|0);Od(j+192|0,j+128|0);Ke(j+160|0,j+208|0);Ke(j+256|0,j+224|0);Ke(j+144|0,j+208|0);Rd(j+224|0,j+240|0);Rd(j+208|0,j+192|0);Od(j+144|0,j+256|0);Pd(j+160|0,j+192|0);Pd(j+256|0,j+240|0);Od(j+192|0,j+240|0);Pd(j+144|0,j+192|0);Ke(j+192|0,j+80|0);Od(j+192|0,j+128|0);Pd(j+176|0,j+192|0);Od(j+208|0,j+176|0);Od(j+224|0,j+176|0);Ke(j+176|0,j+16|0);Od(j+176|0,j+112|0);Ke(j+192|0,j+48|0);Ke(j+240|0,j+176|0);Od(j+192|0,j+32|0);Rd(j+240|0,j+192|0);Pd(j+176|0,j+192|0);Od(j+256|0,j+176|0);Od(j+208|0,j+144|0);Od(j+224|0,j+160|0);Od(j+240|0,j+144|0);Od(j+256|0,j+160|0);Od(j+240|0,j+160|0);Ke(j+192|0,j+96|0);Ke(j+176|0,j+64|0);Ke(j+160|0,j+112|0);Ke(j+144|0,j+16|0);Pd(j+192|0,j+80|0);Pd(j+176|0,j+128|0);Pd(j+160|0,j+48|0);Rd(j+144|0,j+32|0);Od(j+208|0,j+192|0);Od(j+224|0,j+176|0);Od(j+240|0,j+160|0);Od(j+256|0,j+144|0);Ke(j+192|0,j+208|0);Od(j+192|0,j+224|0);Pd(j+208|0,j+240|0);Ke(j+160|0,j+256|0);Od(j+160|0,j+208|0);Ke(j+144|0,j+192|0);Pd(j+144|0,j+160|0);Od(j+144|0,j+224|0);Ke(j+176|0,j+240|0);Od(j+176|0,j+256|0);Od(j+208|0,j+224|0);Pd(j+176|0,j+208|0);Od(j+176|0,j+256|0);Od(j+240|0,j+176|0);Ke(j+224|0,j+160|0);Od(j+224|0,j+176|0);Pd(j+224|0,j+256|0);Od(j+240|0,j+224|0);Od(j+160|0,j+224|0);Pd(j+160|0,j+144|0);Od(j+160|0,j+192|0);Ke(j+192|0,j+32|0);Ke(j+256|0,j+48|0);Ke(j+224|0,j+144|0);Od(j+224|0,j+160|0);Pd(j+224|0,j+32|0);Od(j+32|0,j+48|0);Pd(j+32|0,j+160|0);Pd(j+48|0,j+144|0);Od(j+32|0,j+48|0);Od(j+48|0,j+224|0);Od(j+192|0,j+128|0);Od(j+256|0,j+80|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+128|0);Od(j+128|0,j+80|0);Pd(j+128|0,j+240|0);Pd(j+80|0,j+176|0);Od(j+128|0,j+80|0);Od(j+80|0,j+224|0);Od(j+32|0,j+192|0);Od(j+128|0,j+192|0);Od(j+48|0,j+256|0);Od(j+80|0,j+256|0);Ke(j+192|0,j+16|0);Ke(j+256|0,j+112|0);Od(j+192|0,j+64|0);Od(j+256|0,j+96|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+64|0);Od(j+64|0,j+96|0);Pd(j+64|0,j+240|0);Pd(j+96|0,j+176|0);Od(j+64|0,j+96|0);Od(j+96|0,j+224|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+16|0);Od(j+16|0,j+112|0);Pd(j+16|0,j+160|0);Pd(j+112|0,j+144|0);Od(j+16|0,j+112|0);Od(j+112|0,j+208|0);Od(j+16|0,j+192|0);Od(j+64|0,j+192|0);Od(j+112|0,j+256|0);Od(j+96|0,j+256|0);Od(j+16|0,j+128|0);Od(j+112|0,j+32|0);Od(j+64|0,j+16|0);Od(j+32|0,j+128|0);Od(j+128|0,j+112|0);Od(j+112|0,j+48|0);Od(j+48|0,j+96|0);Od(j+64|0,j+48|0);Od(j+96|0,j+80|0);Od(j+80|0,j+48|0);Od(j+32|0,j+80|0);dd(j+256|0,j+128|0,147);dd(j+240|0,j+112|0,147);dd(j+224|0,j+64|0,147);dd(j+208|0,j+32|0,147);dd(j+192|0,j+80|0,147);dd(j+176|0,j+16|0,147);dd(j+160|0,j+96|0,147);dd(j+144|0,j+48|0,147);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+64|0,j+224|0);Od(j+32|0,j+208|0);Od(j+80|0,j+192|0);Od(j+16|0,j+176|0);Od(j+96|0,j+160|0);Od(j+48|0,j+144|0);Od(j+256|0,j+48|0);Od(j+240|0,j+128|0);Od(j+224|0,j+112|0);Od(j+240|0,j+48|0);Od(j+208|0,j+64|0);Od(j+192|0,j+32|0);Od(j+176|0,j+80|0);Od(j+208|0,j+48|0);Od(j+160|0,j+16|0);Od(j+144|0,j+96|0);Od(j+192|0,j+48|0);dd(j+128|0,j+128|0,78);dd(j+112|0,j+112|0,78);dd(j+64|0,j+64|0,78);dd(j+32|0,j+32|0,78);dd(j+80|0,j+80|0,78);dd(j+16|0,j+16|0,78);dd(j+96|0,j+96|0,78);dd(j+48|0,j+48|0,78);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+224|0,j+64|0);Od(j+208|0,j+32|0);Od(j+192|0,j+80|0);Od(j+176|0,j+16|0);Od(j+160|0,j+96|0);Od(j+144|0,j+48|0);Od(j+256|0,h+1024|0);sb(j+256|0,35320);Od(j+240|0,h+1040|0);sb(j+240|0,35320);Od(j+224|0,h+1056|0);sb(j+224|0,35320);Od(j+208|0,h+1072|0);sb(j+208|0,35320);Od(j+192|0,h+1088|0);sb(j+192|0,35320);Od(j+176|0,h+1104|0);sb(j+176|0,35320);Od(j+160|0,h+1120|0);sb(j+160|0,35320);Od(j+144|0,h+1136|0);sb(j+144|0,35320);Od(j+176|0,j+160|0);Od(j+224|0,j+240|0);Od(j+176|0,j+256|0);Od(j+160|0,j+224|0);Od(j+208|0,j+256|0);Od(j+160|0,j+208|0);Od(j+208|0,j+144|0);Od(j+208|0,j+192|0);Od(j+144|0,j+176|0);Od(j+208|0,j+240|0);Od(j+192|0,j+176|0);Od(j+224|0,j+144|0);Od(j+240|0,j+176|0);Ke(j+80|0,j+144|0);Ke(j+96|0,j+240|0);Ke(j+112|0,j+176|0);Ke(j+48|0,j+224|0);Ke(j+64|0,j+160|0);Od(j+80|0,j+192|0);Od(j+96|0,j+224|0);Od(j+112|0,j+208|0);Od(j+48|0,j+192|0);Od(j+64|0,j+256|0);Ke(j+32|0,j+80|0);Ke(j+128|0,j+96|0);Ke(j+16|0,j+80|0);Rd(j+96|0,j+112|0);Rd(j+80|0,j+64|0);Od(j+16|0,j+128|0);Pd(j+32|0,j+64|0);Pd(j+128|0,j+112|0);Od(j+64|0,j+112|0);Pd(j+16|0,j+64|0);Ke(j+64|0,j+208|0);Od(j+64|0,j+256|0);Pd(j+48|0,j+64|0);Od(j+80|0,j+48|0);Od(j+96|0,j+48|0);Ke(j+48|0,j+144|0);Od(j+48|0,j+240|0);Ke(j+64|0,j+176|0);Ke(j+112|0,j+48|0);Od(j+64|0,j+160|0);Rd(j+112|0,j+64|0);Pd(j+48|0,j+64|0);Od(j+128|0,j+48|0);Od(j+80|0,j+16|0);Od(j+96|0,j+32|0);Od(j+112|0,j+16|0);Od(j+128|0,j+32|0);Od(j+112|0,j+32|0);Ke(j+64|0,j+224|0);Ke(j+48|0,j+192|0);Ke(j+32|0,j+240|0);Ke(j+16|0,j+144|0);Pd(j+64|0,j+208|0);Pd(j+48|0,j+256|0);Pd(j+32|0,j+176|0);Rd(j+16|0,j+160|0);Od(j+80|0,j+64|0);Od(j+96|0,j+48|0);Od(j+112|0,j+32|0);Od(j+128|0,j+16|0);Ke(j+64|0,j+80|0);Od(j+64|0,j+96|0);Pd(j+80|0,j+112|0);Ke(j+32|0,j+128|0);Od(j+32|0,j+80|0);Ke(j+16|0,j+64|0);Pd(j+16|0,j+32|0);Od(j+16|0,j+96|0);Ke(j+48|0,j+112|0);Od(j+48|0,j+128|0);Od(j+80|0,j+96|0);Pd(j+48|0,j+80|0);Od(j+48|0,j+128|0);Od(j+112|0,j+48|0);Ke(j+96|0,j+32|0);Od(j+96|0,j+48|0);Pd(j+96|0,j+128|0);Od(j+112|0,j+96|0);Od(j+32|0,j+96|0);Pd(j+32|0,j+16|0);Od(j+32|0,j+64|0);Ke(j+64|0,j+160|0);Ke(j+128|0,j+176|0);Ke(j+96|0,j+16|0);Od(j+96|0,j+32|0);Pd(j+96|0,j+160|0);Od(j+160|0,j+176|0);Pd(j+160|0,j+32|0);Pd(j+176|0,j+16|0);Od(j+160|0,j+176|0);Od(j+176|0,j+96|0);Od(j+64|0,j+256|0);Od(j+128|0,j+208|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+256|0);Od(j+256|0,j+208|0);Pd(j+256|0,j+112|0);Pd(j+208|0,j+48|0);Od(j+256|0,j+208|0);Od(j+208|0,j+96|0);Od(j+160|0,j+64|0);Od(j+256|0,j+64|0);Od(j+176|0,j+128|0);Od(j+208|0,j+128|0);Ke(j+64|0,j+144|0);Ke(j+128|0,j+240|0);Od(j+64|0,j+192|0);Od(j+128|0,j+224|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+64|0);Od(j+64|0,j+128|0);Pd(j+64|0,j+32|0);Pd(j+128|0,j+16|0);Od(j+128|0,j+64|0);Od(j+64|0,j+80|0);Ke(j+96|0,j+48|0);Od(j+96|0,j+112|0);Pd(j+96|0,j+192|0);Od(j+192|0,j+224|0);Pd(j+192|0,j+112|0);Pd(j+224|0,j+48|0);Od(j+192|0,j+224|0);Od(j+224|0,j+96|0);Od(j+16|0,j+48|0);Od(j+32|0,j+112|0);Ke(j+80|0,j+16|0);Od(j+80|0,j+32|0);Pd(j+80|0,j+144|0);Od(j+144|0,j+240|0);Pd(j+144|0,j+32|0);Pd(j+240|0,j+16|0);Od(j+144|0,j+240|0);Od(j+240|0,j+80|0);Od(j+144|0,j+64|0);Od(j+192|0,j+64|0);Od(j+240|0,j+128|0);Od(j+224|0,j+128|0);Od(j+144|0,j+256|0);Od(j+240|0,j+160|0);Od(j+192|0,j+144|0);Od(j+160|0,j+256|0);Od(j+256|0,j+240|0);Od(j+240|0,j+176|0);Od(j+176|0,j+224|0);Od(j+192|0,j+176|0);Od(j+224|0,j+208|0);Od(j+208|0,j+176|0);Od(j+160|0,j+208|0);dd(j+128|0,j+256|0,147);dd(j+112|0,j+240|0,147);dd(j+96|0,j+192|0,147);dd(j+80|0,j+160|0,147);dd(j+64|0,j+208|0,147);dd(j+48|0,j+144|0,147);dd(j+32|0,j+224|0,147);dd(j+16|0,j+176|0,147);Od(j+256|0,j+128|0);Od(j+240|0,j+112|0);Od(j+192|0,j+96|0);Od(j+160|0,j+80|0);Od(j+208|0,j+64|0);Od(j+144|0,j+48|0);Od(j+224|0,j+32|0);Od(j+176|0,j+16|0);Od(j+128|0,j+176|0);Od(j+112|0,j+256|0);Od(j+96|0,j+240|0);Od(j+112|0,j+176|0);Od(j+80|0,j+192|0);Od(j+64|0,j+160|0);Od(j+48|0,j+208|0);Od(j+80|0,j+176|0);Od(j+32|0,j+144|0);Od(j+16|0,j+224|0);Od(j+64|0,j+176|0);dd(j+256|0,j+256|0,78);dd(j+240|0,j+240|0,78);dd(j+192|0,j+192|0,78);dd(j+160|0,j+160|0,78);dd(j+208|0,j+208|0,78);dd(j+144|0,j+144|0,78);dd(j+224|0,j+224|0,78);dd(j+176|0,j+176|0,78);Od(j+128|0,j+256|0);Od(j+112|0,j+240|0);Od(j+96|0,j+192|0);Od(j+80|0,j+160|0);Od(j+64|0,j+208|0);Od(j+48|0,j+144|0);Od(j+32|0,j+224|0);Od(j+16|0,j+176|0);Od(j+128|0,h+1152|0);sb(j+128|0,35336);Od(j+112|0,h+1168|0);sb(j+112|0,35336);Od(j+96|0,h+1184|0);sb(j+96|0,35336);Od(j+80|0,h+1200|0);sb(j+80|0,35336);Od(j+64|0,h+1216|0);sb(j+64|0,35336);Od(j+48|0,h+1232|0);sb(j+48|0,35336);Od(j+32|0,h+1248|0);sb(j+32|0,35336);Od(j+16|0,h+1264|0);sb(j+16|0,35336);Od(j+48|0,j+32|0);Od(j+96|0,j+112|0);Od(j+48|0,j+128|0);Od(j+32|0,j+96|0);Od(j+80|0,j+128|0);Od(j+32|0,j+80|0);Od(j+80|0,j+16|0);Od(j+80|0,j+64|0);Od(j+16|0,j+48|0);Od(j+80|0,j+112|0);Od(j+64|0,j+48|0);Od(j+96|0,j+16|0);Od(j+112|0,j+48|0);Ke(j+208|0,j+16|0);Ke(j+224|0,j+112|0);Ke(j+240|0,j+48|0);Ke(j+176|0,j+96|0);Ke(j+192|0,j+32|0);Od(j+208|0,j+64|0);Od(j+224|0,j+96|0);Od(j+240|0,j+80|0);Od(j+176|0,j+64|0);Od(j+192|0,j+128|0);Ke(j+160|0,j+208|0);Ke(j+256|0,j+224|0);Ke(j+144|0,j+208|0);Rd(j+224|0,j+240|0);Rd(j+208|0,j+192|0);Od(j+144|0,j+256|0);Pd(j+160|0,j+192|0);Pd(j+256|0,j+240|0);Od(j+192|0,j+240|0);Pd(j+144|0,j+192|0);Ke(j+192|0,j+80|0);Od(j+192|0,j+128|0);Pd(j+176|0,j+192|0);Od(j+208|0,j+176|0);Od(j+224|0,j+176|0);Ke(j+176|0,j+16|0);Od(j+176|0,j+112|0);Ke(j+192|0,j+48|0);Ke(j+240|0,j+176|0);Od(j+192|0,j+32|0);Rd(j+240|0,j+192|0);Pd(j+176|0,j+192|0);Od(j+256|0,j+176|0);Od(j+208|0,j+144|0);Od(j+224|0,j+160|0);Od(j+240|0,j+144|0);Od(j+256|0,j+160|0);Od(j+240|0,j+160|0);Ke(j+192|0,j+96|0);Ke(j+176|0,j+64|0);Ke(j+160|0,j+112|0);Ke(j+144|0,j+16|0);Pd(j+192|0,j+80|0);Pd(j+176|0,j+128|0);Pd(j+160|0,j+48|0);Rd(j+144|0,j+32|0);Od(j+208|0,j+192|0);Od(j+224|0,j+176|0);Od(j+240|0,j+160|0);Od(j+256|0,j+144|0);Ke(j+192|0,j+208|0);Od(j+192|0,j+224|0);Pd(j+208|0,j+240|0);Ke(j+160|0,j+256|0);Od(j+160|0,j+208|0);Ke(j+144|0,j+192|0);Pd(j+144|0,j+160|0);Od(j+144|0,j+224|0);Ke(j+176|0,j+240|0);Od(j+176|0,j+256|0);Od(j+208|0,j+224|0);Pd(j+176|0,j+208|0);Od(j+176|0,j+256|0);Od(j+240|0,j+176|0);Ke(j+224|0,j+160|0);Od(j+224|0,j+176|0);Pd(j+224|0,j+256|0);Od(j+240|0,j+224|0);Od(j+160|0,j+224|0);Pd(j+160|0,j+144|0);Od(j+160|0,j+192|0);Ke(j+192|0,j+32|0);Ke(j+256|0,j+48|0);Ke(j+224|0,j+144|0);Od(j+224|0,j+160|0);Pd(j+224|0,j+32|0);Od(j+32|0,j+48|0);Pd(j+32|0,j+160|0);Pd(j+48|0,j+144|0);Od(j+32|0,j+48|0);Od(j+48|0,j+224|0);Od(j+192|0,j+128|0);Od(j+256|0,j+80|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+128|0);Od(j+128|0,j+80|0);Pd(j+128|0,j+240|0);Pd(j+80|0,j+176|0);Od(j+128|0,j+80|0);Od(j+80|0,j+224|0);Od(j+32|0,j+192|0);Od(j+128|0,j+192|0);Od(j+48|0,j+256|0);Od(j+80|0,j+256|0);Ke(j+192|0,j+16|0);Ke(j+256|0,j+112|0);Od(j+192|0,j+64|0);Od(j+256|0,j+96|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+192|0);Od(j+192|0,j+256|0);Pd(j+192|0,j+160|0);Pd(j+256|0,j+144|0);Od(j+256|0,j+192|0);Od(j+192|0,j+208|0);Ke(j+224|0,j+176|0);Od(j+224|0,j+240|0);Pd(j+224|0,j+64|0);Od(j+64|0,j+96|0);Pd(j+64|0,j+240|0);Pd(j+96|0,j+176|0);Od(j+64|0,j+96|0);Od(j+96|0,j+224|0);Od(j+144|0,j+176|0);Od(j+160|0,j+240|0);Ke(j+208|0,j+144|0);Od(j+208|0,j+160|0);Pd(j+208|0,j+16|0);Od(j+16|0,j+112|0);Pd(j+16|0,j+160|0);Pd(j+112|0,j+144|0);Od(j+16|0,j+112|0);Od(j+112|0,j+208|0);Od(j+16|0,j+192|0);Od(j+64|0,j+192|0);Od(j+112|0,j+256|0);Od(j+96|0,j+256|0);Od(j+16|0,j+128|0);Od(j+112|0,j+32|0);Od(j+64|0,j+16|0);Od(j+32|0,j+128|0);Od(j+128|0,j+112|0);Od(j+112|0,j+48|0);Od(j+48|0,j+96|0);Od(j+64|0,j+48|0);Od(j+96|0,j+80|0);Od(j+80|0,j+48|0);Od(j+32|0,j+80|0);Od(j+128|0,h+1280|0);Od(j+112|0,h+1296|0);Od(j+64|0,h+1312|0);Od(j+32|0,h+1328|0);Od(j+80|0,h+1344|0);Od(j+16|0,h+1360|0);Od(j+96|0,h+1376|0);Od(j+48|0,h+1392|0);Ke(j+256|0,j+96|0);ge(j+256|0,1);Od(j+256|0,j+48|0);Pd(j+256|0,1104);Od(j+48|0,j+256|0);ie(j+256|0,1);Od(j+96|0,j+256|0);Ke(j+256|0,j+80|0);ge(j+256|0,1);Od(j+256|0,j+16|0);Pd(j+256|0,1104);Od(j+16|0,j+256|0);ie(j+256|0,1);Od(j+80|0,j+256|0);Ke(j+256|0,j+64|0);ge(j+256|0,1);Od(j+256|0,j+32|0);Pd(j+256|0,1104);Od(j+32|0,j+256|0);ie(j+256|0,1);Od(j+64|0,j+256|0);Ke(j+256|0,j+128|0);ge(j+256|0,1);Od(j+256|0,j+112|0);Pd(j+256|0,1104);Od(j+112|0,j+256|0);ie(j+256|0,1);Od(j+128|0,j+256|0);Ke(j+256|0,j+16|0);ge(j+256|0,2);Od(j+256|0,j+48|0);Pd(j+256|0,1120);Od(j+48|0,j+256|0);ie(j+256|0,2);Od(j+16|0,j+256|0);Ke(j+256|0,j+80|0);ge(j+256|0,2);Od(j+256|0,j+96|0);Pd(j+256|0,1120);Od(j+96|0,j+256|0);ie(j+256|0,2);Od(j+80|0,j+256|0);Ke(j+256|0,j+112|0);ge(j+256|0,2);Od(j+256|0,j+32|0);Pd(j+256|0,1120);Od(j+32|0,j+256|0);ie(j+256|0,2);Od(j+112|0,j+256|0);Ke(j+256|0,j+128|0);ge(j+256|0,2);Od(j+256|0,j+64|0);Pd(j+256|0,1120);Od(j+64|0,j+256|0);ie(j+256|0,2);Od(j+128|0,j+256|0);Ke(j+256|0,j+32|0);ge(j+256|0,4);Od(j+256|0,j+48|0);Pd(j+256|0,1136);Od(j+48|0,j+256|0);ie(j+256|0,4);Od(j+32|0,j+256|0);Ke(j+256|0,j+64|0);ge(j+256|0,4);Od(j+256|0,j+96|0);Pd(j+256|0,1136);Od(j+96|0,j+256|0);ie(j+256|0,4);Od(j+64|0,j+256|0);Ke(j+256|0,j+112|0);ge(j+256|0,4);Od(j+256|0,j+16|0);Pd(j+256|0,1136);Od(j+16|0,j+256|0);ie(j+256|0,4);Od(j+112|0,j+256|0);Ke(j+256|0,j+128|0);ge(j+256|0,4);Od(j+256|0,j+80|0);Pd(j+256|0,1136);Od(j+80|0,j+256|0);ie(j+256|0,4);Od(j+128|0,j+256|0);if(f>>>0<0|(f|0)==0&e>>>0<128){i=5;break}mg(j+12|0,(Ag(j+12|0)|0)+8|0);Od(j+128|0,d);Od(j+112|0,d+16|0);Od(j+64|0,d+32|0);Od(j+32|0,d+48|0);Od(j+80|0,d+64|0);Od(j+16|0,d+80|0);Od(j+96|0,d+96|0);Od(j+48|0,d+112|0);c[b>>2]=c[j+128>>2];c[b+4>>2]=c[j+128+4>>2];c[b+8>>2]=c[j+128+8>>2];c[b+12>>2]=c[j+128+12>>2];g=b+16|0;c[g>>2]=c[j+112>>2];c[g+4>>2]=c[j+112+4>>2];c[g+8>>2]=c[j+112+8>>2];c[g+12>>2]=c[j+112+12>>2];g=b+32|0;c[g>>2]=c[j+64>>2];c[g+4>>2]=c[j+64+4>>2];c[g+8>>2]=c[j+64+8>>2];c[g+12>>2]=c[j+64+12>>2];g=b+48|0;c[g>>2]=c[j+32>>2];c[g+4>>2]=c[j+32+4>>2];c[g+8>>2]=c[j+32+8>>2];c[g+12>>2]=c[j+32+12>>2];g=b+64|0;c[g>>2]=c[j+80>>2];c[g+4>>2]=c[j+80+4>>2];c[g+8>>2]=c[j+80+8>>2];c[g+12>>2]=c[j+80+12>>2];g=b+80|0;c[g>>2]=c[j+16>>2];c[g+4>>2]=c[j+16+4>>2];c[g+8>>2]=c[j+16+8>>2];c[g+12>>2]=c[j+16+12>>2];g=b+96|0;c[g>>2]=c[j+96>>2];c[g+4>>2]=c[j+96+4>>2];c[g+8>>2]=c[j+96+8>>2];c[g+12>>2]=c[j+96+12>>2];g=b+112|0;c[g>>2]=c[j+48>>2];c[g+4>>2]=c[j+48+4>>2];c[g+8>>2]=c[j+48+8>>2];c[g+12>>2]=c[j+48+12>>2];if((e|0)==128&(f|0)==0)break;g=lg(e|0,f|0,-128,-1)|0;b=b+128|0;d=d+128|0;f=z;e=g}if((i|0)==5?(h=Cf(e|0,f|0,4)|0,i=z,i=lg(Ag(j+12|0)|0,0,h|0,i|0)|0,mg(j+12|0,i),c[j+272>>2]=c[j+128>>2],c[j+272+4>>2]=c[j+128+4>>2],c[j+272+8>>2]=c[j+128+8>>2],c[j+272+12>>2]=c[j+128+12>>2],c[j+272+16>>2]=c[j+112>>2],c[j+272+16+4>>2]=c[j+112+4>>2],c[j+272+16+8>>2]=c[j+112+8>>2],c[j+272+16+12>>2]=c[j+112+12>>2],c[j+272+32>>2]=c[j+64>>2],c[j+272+32+4>>2]=c[j+64+4>>2],c[j+272+32+8>>2]=c[j+64+8>>2],c[j+272+32+12>>2]=c[j+64+12>>2],c[j+272+48>>2]=c[j+32>>2],c[j+272+48+4>>2]=c[j+32+4>>2],c[j+272+48+8>>2]=c[j+32+8>>2],c[j+272+48+12>>2]=c[j+32+12>>2],c[j+272+64>>2]=c[j+80>>2],c[j+272+64+4>>2]=c[j+80+4>>2],c[j+272+64+8>>2]=c[j+80+8>>2],c[j+272+64+12>>2]=c[j+80+12>>2],c[j+272+80>>2]=c[j+16>>2],c[j+272+80+4>>2]=c[j+16+4>>2],c[j+272+80+8>>2]=c[j+16+8>>2],c[j+272+80+12>>2]=c[j+16+12>>2],c[j+272+96>>2]=c[j+96>>2],c[j+272+96+4>>2]=c[j+96+4>>2],c[j+272+96+8>>2]=c[j+96+8>>2],c[j+272+96+12>>2]=c[j+96+12>>2],c[j+272+112>>2]=c[j+48>>2],c[j+272+112+4>>2]=c[j+48+4>>2],c[j+272+112+8>>2]=c[j+48+8>>2],c[j+272+112+12>>2]=c[j+48+12>>2],!((e|0)==0&(f|0)==0)):0){g=j+272|0;while(1){a[b>>0]=a[d>>0]^a[g>>0];e=lg(e|0,f|0,-1,-1)|0;f=z;if((e|0)==0&(f|0)==0)break;else{g=g+1|0;d=d+1|0;b=b+1|0}}}l=k;return 0}function fa(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;j=l;i=l=l+63&-64;l=l+400|0;Ke(i,f);while(1){c[i+256>>2]=c[i>>2];c[i+256+4>>2]=c[i+4>>2];c[i+256+8>>2]=c[i+8>>2];c[i+256+12>>2]=c[i+12>>2];Ke(i+240|0,i+256|0);sb(i+240|0,35288);Ke(i+224|0,i+240|0);Ke(i+208|0,i+240|0);Ke(i+192|0,i+240|0);Ke(i+176|0,i+240|0);Ke(i+160|0,i+240|0);Ke(i+144|0,i+240|0);Jg(i+240|0,1);Jg(i+224|0,2);Jg(i+208|0,3);Jg(i+192|0,4);Jg(i+176|0,5);Jg(i+160|0,6);Jg(i+144|0,7);sb(i+256|0,35256);sb(i+240|0,35304);sb(i+224|0,35304);sb(i+208|0,35304);sb(i+192|0,35304);sb(i+176|0,35304);sb(i+160|0,35304);sb(i+144|0,35304);Ke(i+128|0,i+160|0);ge(i+128|0,1);Od(i+128|0,i+144|0);Pd(i+128|0,1104);Od(i+144|0,i+128|0);ie(i+128|0,1);Od(i+160|0,i+128|0);Ke(i+128|0,i+192|0);ge(i+128|0,1);Od(i+128|0,i+176|0);Pd(i+128|0,1104);Od(i+176|0,i+128|0);ie(i+128|0,1);Od(i+192|0,i+128|0);Ke(i+128|0,i+224|0);ge(i+128|0,1);Od(i+128|0,i+208|0);Pd(i+128|0,1104);Od(i+208|0,i+128|0);ie(i+128|0,1);Od(i+224|0,i+128|0);Ke(i+128|0,i+256|0);ge(i+128|0,1);Od(i+128|0,i+240|0);Pd(i+128|0,1104);Od(i+240|0,i+128|0);ie(i+128|0,1);Od(i+256|0,i+128|0);Ke(i+128|0,i+176|0);ge(i+128|0,2);Od(i+128|0,i+144|0);Pd(i+128|0,1120);Od(i+144|0,i+128|0);ie(i+128|0,2);Od(i+176|0,i+128|0);Ke(i+128|0,i+192|0);ge(i+128|0,2);Od(i+128|0,i+160|0);Pd(i+128|0,1120);Od(i+160|0,i+128|0);ie(i+128|0,2);Od(i+192|0,i+128|0);Ke(i+128|0,i+240|0);ge(i+128|0,2);Od(i+128|0,i+208|0);Pd(i+128|0,1120);Od(i+208|0,i+128|0);ie(i+128|0,2);Od(i+240|0,i+128|0);Ke(i+128|0,i+256|0);ge(i+128|0,2);Od(i+128|0,i+224|0);Pd(i+128|0,1120);Od(i+224|0,i+128|0);ie(i+128|0,2);Od(i+256|0,i+128|0);Ke(i+128|0,i+208|0);ge(i+128|0,4);Od(i+128|0,i+144|0);Pd(i+128|0,1136);Od(i+144|0,i+128|0);ie(i+128|0,4);Od(i+208|0,i+128|0);Ke(i+128|0,i+224|0);ge(i+128|0,4);Od(i+128|0,i+160|0);Pd(i+128|0,1136);Od(i+160|0,i+128|0);ie(i+128|0,4);Od(i+224|0,i+128|0);Ke(i+128|0,i+240|0);ge(i+128|0,4);Od(i+128|0,i+176|0);Pd(i+128|0,1136);Od(i+176|0,i+128|0);ie(i+128|0,4);Od(i+240|0,i+128|0);Ke(i+128|0,i+256|0);ge(i+128|0,4);Od(i+128|0,i+192|0);Pd(i+128|0,1136);Od(i+192|0,i+128|0);ie(i+128|0,4);Od(i+256|0,i+128|0);Od(i+256|0,g);sb(i+256|0,35320);Od(i+240|0,g+16|0);sb(i+240|0,35320);Od(i+224|0,g+32|0);sb(i+224|0,35320);Od(i+208|0,g+48|0);sb(i+208|0,35320);Od(i+192|0,g+64|0);sb(i+192|0,35320);Od(i+176|0,g+80|0);sb(i+176|0,35320);Od(i+160|0,g+96|0);sb(i+160|0,35320);Od(i+144|0,g+112|0);sb(i+144|0,35320);Od(i+176|0,i+160|0);Od(i+224|0,i+240|0);Od(i+176|0,i+256|0);Od(i+160|0,i+224|0);Od(i+208|0,i+256|0);Od(i+160|0,i+208|0);Od(i+208|0,i+144|0);Od(i+208|0,i+192|0);Od(i+144|0,i+176|0);Od(i+208|0,i+240|0);Od(i+192|0,i+176|0);Od(i+224|0,i+144|0);Od(i+240|0,i+176|0);Ke(i+80|0,i+144|0);Ke(i+96|0,i+240|0);Ke(i+112|0,i+176|0);Ke(i+48|0,i+224|0);Ke(i+64|0,i+160|0);Od(i+80|0,i+192|0);Od(i+96|0,i+224|0);Od(i+112|0,i+208|0);Od(i+48|0,i+192|0);Od(i+64|0,i+256|0);Ke(i+32|0,i+80|0);Ke(i+128|0,i+96|0);Ke(i+16|0,i+80|0);Rd(i+96|0,i+112|0);Rd(i+80|0,i+64|0);Od(i+16|0,i+128|0);Pd(i+32|0,i+64|0);Pd(i+128|0,i+112|0);Od(i+64|0,i+112|0);Pd(i+16|0,i+64|0);Ke(i+64|0,i+208|0);Od(i+64|0,i+256|0);Pd(i+48|0,i+64|0);Od(i+80|0,i+48|0);Od(i+96|0,i+48|0);Ke(i+48|0,i+144|0);Od(i+48|0,i+240|0);Ke(i+64|0,i+176|0);Ke(i+112|0,i+48|0);Od(i+64|0,i+160|0);Rd(i+112|0,i+64|0);Pd(i+48|0,i+64|0);Od(i+128|0,i+48|0);Od(i+80|0,i+16|0);Od(i+96|0,i+32|0);Od(i+112|0,i+16|0);Od(i+128|0,i+32|0);Od(i+112|0,i+32|0);Ke(i+64|0,i+224|0);Ke(i+48|0,i+192|0);Ke(i+32|0,i+240|0);Ke(i+16|0,i+144|0);Pd(i+64|0,i+208|0);Pd(i+48|0,i+256|0);Pd(i+32|0,i+176|0);Rd(i+16|0,i+160|0);Od(i+80|0,i+64|0);Od(i+96|0,i+48|0);Od(i+112|0,i+32|0);Od(i+128|0,i+16|0);Ke(i+64|0,i+80|0);Od(i+64|0,i+96|0);Pd(i+80|0,i+112|0);Ke(i+32|0,i+128|0);Od(i+32|0,i+80|0);Ke(i+16|0,i+64|0);Pd(i+16|0,i+32|0);Od(i+16|0,i+96|0);Ke(i+48|0,i+112|0);Od(i+48|0,i+128|0);Od(i+80|0,i+96|0);Pd(i+48|0,i+80|0);Od(i+48|0,i+128|0);Od(i+112|0,i+48|0);Ke(i+96|0,i+32|0);Od(i+96|0,i+48|0);Pd(i+96|0,i+128|0);Od(i+112|0,i+96|0);Od(i+32|0,i+96|0);Pd(i+32|0,i+16|0);Od(i+32|0,i+64|0);Ke(i+64|0,i+160|0);Ke(i+128|0,i+176|0);Ke(i+96|0,i+16|0);Od(i+96|0,i+32|0);Pd(i+96|0,i+160|0);Od(i+160|0,i+176|0);Pd(i+160|0,i+32|0);Pd(i+176|0,i+16|0);Od(i+160|0,i+176|0);Od(i+176|0,i+96|0);Od(i+64|0,i+256|0);Od(i+128|0,i+208|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+256|0);Od(i+256|0,i+208|0);Pd(i+256|0,i+112|0);Pd(i+208|0,i+48|0);Od(i+256|0,i+208|0);Od(i+208|0,i+96|0);Od(i+160|0,i+64|0);Od(i+256|0,i+64|0);Od(i+176|0,i+128|0);Od(i+208|0,i+128|0);Ke(i+64|0,i+144|0);Ke(i+128|0,i+240|0);Od(i+64|0,i+192|0);Od(i+128|0,i+224|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+192|0);Od(i+192|0,i+224|0);Pd(i+192|0,i+112|0);Pd(i+224|0,i+48|0);Od(i+192|0,i+224|0);Od(i+224|0,i+96|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+144|0);Od(i+144|0,i+240|0);Pd(i+144|0,i+32|0);Pd(i+240|0,i+16|0);Od(i+144|0,i+240|0);Od(i+240|0,i+80|0);Od(i+144|0,i+64|0);Od(i+192|0,i+64|0);Od(i+240|0,i+128|0);Od(i+224|0,i+128|0);Od(i+144|0,i+256|0);Od(i+240|0,i+160|0);Od(i+192|0,i+144|0);Od(i+160|0,i+256|0);Od(i+256|0,i+240|0);Od(i+240|0,i+176|0);Od(i+176|0,i+224|0);Od(i+192|0,i+176|0);Od(i+224|0,i+208|0);Od(i+208|0,i+176|0);Od(i+160|0,i+208|0);dd(i+128|0,i+256|0,147);dd(i+112|0,i+240|0,147);dd(i+96|0,i+192|0,147);dd(i+80|0,i+160|0,147);dd(i+64|0,i+208|0,147);dd(i+48|0,i+144|0,147);dd(i+32|0,i+224|0,147);dd(i+16|0,i+176|0,147);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+192|0,i+96|0);Od(i+160|0,i+80|0);Od(i+208|0,i+64|0);Od(i+144|0,i+48|0);Od(i+224|0,i+32|0);Od(i+176|0,i+16|0);Od(i+128|0,i+176|0);Od(i+112|0,i+256|0);Od(i+96|0,i+240|0);Od(i+112|0,i+176|0);Od(i+80|0,i+192|0);Od(i+64|0,i+160|0);Od(i+48|0,i+208|0);Od(i+80|0,i+176|0);Od(i+32|0,i+144|0);Od(i+16|0,i+224|0);Od(i+64|0,i+176|0);dd(i+256|0,i+256|0,78);dd(i+240|0,i+240|0,78);dd(i+192|0,i+192|0,78);dd(i+160|0,i+160|0,78);dd(i+208|0,i+208|0,78);dd(i+144|0,i+144|0,78);dd(i+224|0,i+224|0,78);dd(i+176|0,i+176|0,78);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+96|0,i+192|0);Od(i+80|0,i+160|0);Od(i+64|0,i+208|0);Od(i+48|0,i+144|0);Od(i+32|0,i+224|0);Od(i+16|0,i+176|0);Od(i+128|0,g+128|0);sb(i+128|0,35320);Od(i+112|0,g+144|0);sb(i+112|0,35320);Od(i+96|0,g+160|0);sb(i+96|0,35320);Od(i+80|0,g+176|0);sb(i+80|0,35320);Od(i+64|0,g+192|0);sb(i+64|0,35320);Od(i+48|0,g+208|0);sb(i+48|0,35320);Od(i+32|0,g+224|0);sb(i+32|0,35320);Od(i+16|0,g+240|0);sb(i+16|0,35320);Od(i+48|0,i+32|0);Od(i+96|0,i+112|0);Od(i+48|0,i+128|0);Od(i+32|0,i+96|0);Od(i+80|0,i+128|0);Od(i+32|0,i+80|0);Od(i+80|0,i+16|0);Od(i+80|0,i+64|0);Od(i+16|0,i+48|0);Od(i+80|0,i+112|0);Od(i+64|0,i+48|0);Od(i+96|0,i+16|0);Od(i+112|0,i+48|0);Ke(i+208|0,i+16|0);Ke(i+224|0,i+112|0);Ke(i+240|0,i+48|0);Ke(i+176|0,i+96|0);Ke(i+192|0,i+32|0);Od(i+208|0,i+64|0);Od(i+224|0,i+96|0);Od(i+240|0,i+80|0);Od(i+176|0,i+64|0);Od(i+192|0,i+128|0);Ke(i+160|0,i+208|0);Ke(i+256|0,i+224|0);Ke(i+144|0,i+208|0);Rd(i+224|0,i+240|0);Rd(i+208|0,i+192|0);Od(i+144|0,i+256|0);Pd(i+160|0,i+192|0);Pd(i+256|0,i+240|0);Od(i+192|0,i+240|0);Pd(i+144|0,i+192|0);Ke(i+192|0,i+80|0);Od(i+192|0,i+128|0);Pd(i+176|0,i+192|0);Od(i+208|0,i+176|0);Od(i+224|0,i+176|0);Ke(i+176|0,i+16|0);Od(i+176|0,i+112|0);Ke(i+192|0,i+48|0);Ke(i+240|0,i+176|0);Od(i+192|0,i+32|0);Rd(i+240|0,i+192|0);Pd(i+176|0,i+192|0);Od(i+256|0,i+176|0);Od(i+208|0,i+144|0);Od(i+224|0,i+160|0);Od(i+240|0,i+144|0);Od(i+256|0,i+160|0);Od(i+240|0,i+160|0);Ke(i+192|0,i+96|0);Ke(i+176|0,i+64|0);Ke(i+160|0,i+112|0);Ke(i+144|0,i+16|0);Pd(i+192|0,i+80|0);Pd(i+176|0,i+128|0);Pd(i+160|0,i+48|0);Rd(i+144|0,i+32|0);Od(i+208|0,i+192|0);Od(i+224|0,i+176|0);Od(i+240|0,i+160|0);Od(i+256|0,i+144|0);Ke(i+192|0,i+208|0);Od(i+192|0,i+224|0);Pd(i+208|0,i+240|0);Ke(i+160|0,i+256|0);Od(i+160|0,i+208|0);Ke(i+144|0,i+192|0);Pd(i+144|0,i+160|0);Od(i+144|0,i+224|0);Ke(i+176|0,i+240|0);Od(i+176|0,i+256|0);Od(i+208|0,i+224|0);Pd(i+176|0,i+208|0);Od(i+176|0,i+256|0);Od(i+240|0,i+176|0);Ke(i+224|0,i+160|0);Od(i+224|0,i+176|0);Pd(i+224|0,i+256|0);Od(i+240|0,i+224|0);Od(i+160|0,i+224|0);Pd(i+160|0,i+144|0);Od(i+160|0,i+192|0);Ke(i+192|0,i+32|0);Ke(i+256|0,i+48|0);Ke(i+224|0,i+144|0);Od(i+224|0,i+160|0);Pd(i+224|0,i+32|0);Od(i+32|0,i+48|0);Pd(i+32|0,i+160|0);Pd(i+48|0,i+144|0);Od(i+32|0,i+48|0);Od(i+48|0,i+224|0);Od(i+192|0,i+128|0);Od(i+256|0,i+80|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+128|0);Od(i+128|0,i+80|0);Pd(i+128|0,i+240|0);Pd(i+80|0,i+176|0);Od(i+128|0,i+80|0);Od(i+80|0,i+224|0);Od(i+32|0,i+192|0);Od(i+128|0,i+192|0);Od(i+48|0,i+256|0);Od(i+80|0,i+256|0);Ke(i+192|0,i+16|0);Ke(i+256|0,i+112|0);Od(i+192|0,i+64|0);Od(i+256|0,i+96|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+64|0);Od(i+64|0,i+96|0);Pd(i+64|0,i+240|0);Pd(i+96|0,i+176|0);Od(i+64|0,i+96|0);Od(i+96|0,i+224|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+16|0);Od(i+16|0,i+112|0);Pd(i+16|0,i+160|0);Pd(i+112|0,i+144|0);Od(i+16|0,i+112|0);Od(i+112|0,i+208|0);Od(i+16|0,i+192|0);Od(i+64|0,i+192|0);Od(i+112|0,i+256|0);Od(i+96|0,i+256|0);Od(i+16|0,i+128|0);Od(i+112|0,i+32|0);Od(i+64|0,i+16|0);Od(i+32|0,i+128|0);Od(i+128|0,i+112|0);Od(i+112|0,i+48|0);Od(i+48|0,i+96|0);Od(i+64|0,i+48|0);Od(i+96|0,i+80|0);Od(i+80|0,i+48|0);Od(i+32|0,i+80|0);dd(i+256|0,i+128|0,147);dd(i+240|0,i+112|0,147);dd(i+224|0,i+64|0,147);dd(i+208|0,i+32|0,147);dd(i+192|0,i+80|0,147);dd(i+176|0,i+16|0,147);dd(i+160|0,i+96|0,147);dd(i+144|0,i+48|0,147);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+64|0,i+224|0);Od(i+32|0,i+208|0);Od(i+80|0,i+192|0);Od(i+16|0,i+176|0);Od(i+96|0,i+160|0);Od(i+48|0,i+144|0);Od(i+256|0,i+48|0);Od(i+240|0,i+128|0);Od(i+224|0,i+112|0);Od(i+240|0,i+48|0);Od(i+208|0,i+64|0);Od(i+192|0,i+32|0);Od(i+176|0,i+80|0);Od(i+208|0,i+48|0);Od(i+160|0,i+16|0);Od(i+144|0,i+96|0);Od(i+192|0,i+48|0);dd(i+128|0,i+128|0,78);dd(i+112|0,i+112|0,78);dd(i+64|0,i+64|0,78);dd(i+32|0,i+32|0,78);dd(i+80|0,i+80|0,78);dd(i+16|0,i+16|0,78);dd(i+96|0,i+96|0,78);dd(i+48|0,i+48|0,78);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+224|0,i+64|0);Od(i+208|0,i+32|0);Od(i+192|0,i+80|0);Od(i+176|0,i+16|0);Od(i+160|0,i+96|0);Od(i+144|0,i+48|0);Od(i+256|0,g+256|0);sb(i+256|0,35320);Od(i+240|0,g+272|0);sb(i+240|0,35320);Od(i+224|0,g+288|0);sb(i+224|0,35320);Od(i+208|0,g+304|0);sb(i+208|0,35320);Od(i+192|0,g+320|0);sb(i+192|0,35320);Od(i+176|0,g+336|0);sb(i+176|0,35320);Od(i+160|0,g+352|0);sb(i+160|0,35320);Od(i+144|0,g+368|0);sb(i+144|0,35320);Od(i+176|0,i+160|0);Od(i+224|0,i+240|0);Od(i+176|0,i+256|0);Od(i+160|0,i+224|0);Od(i+208|0,i+256|0);Od(i+160|0,i+208|0);Od(i+208|0,i+144|0);Od(i+208|0,i+192|0);Od(i+144|0,i+176|0);Od(i+208|0,i+240|0);Od(i+192|0,i+176|0);Od(i+224|0,i+144|0);Od(i+240|0,i+176|0);Ke(i+80|0,i+144|0);Ke(i+96|0,i+240|0);Ke(i+112|0,i+176|0);Ke(i+48|0,i+224|0);Ke(i+64|0,i+160|0);Od(i+80|0,i+192|0);Od(i+96|0,i+224|0);Od(i+112|0,i+208|0);Od(i+48|0,i+192|0);Od(i+64|0,i+256|0);Ke(i+32|0,i+80|0);Ke(i+128|0,i+96|0);Ke(i+16|0,i+80|0);Rd(i+96|0,i+112|0);Rd(i+80|0,i+64|0);Od(i+16|0,i+128|0);Pd(i+32|0,i+64|0);Pd(i+128|0,i+112|0);Od(i+64|0,i+112|0);Pd(i+16|0,i+64|0);Ke(i+64|0,i+208|0);Od(i+64|0,i+256|0);Pd(i+48|0,i+64|0);Od(i+80|0,i+48|0);Od(i+96|0,i+48|0);Ke(i+48|0,i+144|0);Od(i+48|0,i+240|0);Ke(i+64|0,i+176|0);Ke(i+112|0,i+48|0);Od(i+64|0,i+160|0);Rd(i+112|0,i+64|0);Pd(i+48|0,i+64|0);Od(i+128|0,i+48|0);Od(i+80|0,i+16|0);Od(i+96|0,i+32|0);Od(i+112|0,i+16|0);Od(i+128|0,i+32|0);Od(i+112|0,i+32|0);Ke(i+64|0,i+224|0);Ke(i+48|0,i+192|0);Ke(i+32|0,i+240|0);Ke(i+16|0,i+144|0);Pd(i+64|0,i+208|0);Pd(i+48|0,i+256|0);Pd(i+32|0,i+176|0);Rd(i+16|0,i+160|0);Od(i+80|0,i+64|0);Od(i+96|0,i+48|0);Od(i+112|0,i+32|0);Od(i+128|0,i+16|0);Ke(i+64|0,i+80|0);Od(i+64|0,i+96|0);Pd(i+80|0,i+112|0);Ke(i+32|0,i+128|0);Od(i+32|0,i+80|0);Ke(i+16|0,i+64|0);Pd(i+16|0,i+32|0);Od(i+16|0,i+96|0);Ke(i+48|0,i+112|0);Od(i+48|0,i+128|0);Od(i+80|0,i+96|0);Pd(i+48|0,i+80|0);Od(i+48|0,i+128|0);Od(i+112|0,i+48|0);Ke(i+96|0,i+32|0);Od(i+96|0,i+48|0);Pd(i+96|0,i+128|0);Od(i+112|0,i+96|0);Od(i+32|0,i+96|0);Pd(i+32|0,i+16|0);Od(i+32|0,i+64|0);Ke(i+64|0,i+160|0);Ke(i+128|0,i+176|0);Ke(i+96|0,i+16|0);Od(i+96|0,i+32|0);Pd(i+96|0,i+160|0);Od(i+160|0,i+176|0);Pd(i+160|0,i+32|0);Pd(i+176|0,i+16|0);Od(i+160|0,i+176|0);Od(i+176|0,i+96|0);Od(i+64|0,i+256|0);Od(i+128|0,i+208|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+256|0);Od(i+256|0,i+208|0);Pd(i+256|0,i+112|0);Pd(i+208|0,i+48|0);Od(i+256|0,i+208|0);Od(i+208|0,i+96|0);Od(i+160|0,i+64|0);Od(i+256|0,i+64|0);Od(i+176|0,i+128|0);Od(i+208|0,i+128|0);Ke(i+64|0,i+144|0);Ke(i+128|0,i+240|0);Od(i+64|0,i+192|0);Od(i+128|0,i+224|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+192|0);Od(i+192|0,i+224|0);Pd(i+192|0,i+112|0);Pd(i+224|0,i+48|0);Od(i+192|0,i+224|0);Od(i+224|0,i+96|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+144|0);Od(i+144|0,i+240|0);Pd(i+144|0,i+32|0);Pd(i+240|0,i+16|0);Od(i+144|0,i+240|0);Od(i+240|0,i+80|0);Od(i+144|0,i+64|0);Od(i+192|0,i+64|0);Od(i+240|0,i+128|0);Od(i+224|0,i+128|0);Od(i+144|0,i+256|0);Od(i+240|0,i+160|0);Od(i+192|0,i+144|0);Od(i+160|0,i+256|0);Od(i+256|0,i+240|0);Od(i+240|0,i+176|0);Od(i+176|0,i+224|0);Od(i+192|0,i+176|0);Od(i+224|0,i+208|0);Od(i+208|0,i+176|0);Od(i+160|0,i+208|0);dd(i+128|0,i+256|0,147);dd(i+112|0,i+240|0,147);dd(i+96|0,i+192|0,147);dd(i+80|0,i+160|0,147);dd(i+64|0,i+208|0,147);dd(i+48|0,i+144|0,147);dd(i+32|0,i+224|0,147);dd(i+16|0,i+176|0,147);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+192|0,i+96|0);Od(i+160|0,i+80|0);Od(i+208|0,i+64|0);Od(i+144|0,i+48|0);Od(i+224|0,i+32|0);Od(i+176|0,i+16|0);Od(i+128|0,i+176|0);Od(i+112|0,i+256|0);Od(i+96|0,i+240|0);Od(i+112|0,i+176|0);Od(i+80|0,i+192|0);Od(i+64|0,i+160|0);Od(i+48|0,i+208|0);Od(i+80|0,i+176|0);Od(i+32|0,i+144|0);Od(i+16|0,i+224|0);Od(i+64|0,i+176|0);dd(i+256|0,i+256|0,78);dd(i+240|0,i+240|0,78);dd(i+192|0,i+192|0,78);dd(i+160|0,i+160|0,78);dd(i+208|0,i+208|0,78);dd(i+144|0,i+144|0,78);dd(i+224|0,i+224|0,78);dd(i+176|0,i+176|0,78);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+96|0,i+192|0);Od(i+80|0,i+160|0);Od(i+64|0,i+208|0);Od(i+48|0,i+144|0);Od(i+32|0,i+224|0);Od(i+16|0,i+176|0);Od(i+128|0,g+384|0);sb(i+128|0,35320);Od(i+112|0,g+400|0);sb(i+112|0,35320);Od(i+96|0,g+416|0);sb(i+96|0,35320);Od(i+80|0,g+432|0);sb(i+80|0,35320);Od(i+64|0,g+448|0);sb(i+64|0,35320);Od(i+48|0,g+464|0);sb(i+48|0,35320);Od(i+32|0,g+480|0);sb(i+32|0,35320);Od(i+16|0,g+496|0);sb(i+16|0,35320);Od(i+48|0,i+32|0);Od(i+96|0,i+112|0);Od(i+48|0,i+128|0);Od(i+32|0,i+96|0);Od(i+80|0,i+128|0);Od(i+32|0,i+80|0);Od(i+80|0,i+16|0);Od(i+80|0,i+64|0);Od(i+16|0,i+48|0);Od(i+80|0,i+112|0);Od(i+64|0,i+48|0);Od(i+96|0,i+16|0);Od(i+112|0,i+48|0);Ke(i+208|0,i+16|0);Ke(i+224|0,i+112|0);Ke(i+240|0,i+48|0);Ke(i+176|0,i+96|0);Ke(i+192|0,i+32|0);Od(i+208|0,i+64|0);Od(i+224|0,i+96|0);Od(i+240|0,i+80|0);Od(i+176|0,i+64|0);Od(i+192|0,i+128|0);Ke(i+160|0,i+208|0);Ke(i+256|0,i+224|0);Ke(i+144|0,i+208|0);Rd(i+224|0,i+240|0);Rd(i+208|0,i+192|0);Od(i+144|0,i+256|0);Pd(i+160|0,i+192|0);Pd(i+256|0,i+240|0);Od(i+192|0,i+240|0);Pd(i+144|0,i+192|0);Ke(i+192|0,i+80|0);Od(i+192|0,i+128|0);Pd(i+176|0,i+192|0);Od(i+208|0,i+176|0);Od(i+224|0,i+176|0);Ke(i+176|0,i+16|0);Od(i+176|0,i+112|0);Ke(i+192|0,i+48|0);Ke(i+240|0,i+176|0);Od(i+192|0,i+32|0);Rd(i+240|0,i+192|0);Pd(i+176|0,i+192|0);Od(i+256|0,i+176|0);Od(i+208|0,i+144|0);Od(i+224|0,i+160|0);Od(i+240|0,i+144|0);Od(i+256|0,i+160|0);Od(i+240|0,i+160|0);Ke(i+192|0,i+96|0);Ke(i+176|0,i+64|0);Ke(i+160|0,i+112|0);Ke(i+144|0,i+16|0);Pd(i+192|0,i+80|0);Pd(i+176|0,i+128|0);Pd(i+160|0,i+48|0);Rd(i+144|0,i+32|0);Od(i+208|0,i+192|0);Od(i+224|0,i+176|0);Od(i+240|0,i+160|0);Od(i+256|0,i+144|0);Ke(i+192|0,i+208|0);Od(i+192|0,i+224|0);Pd(i+208|0,i+240|0);Ke(i+160|0,i+256|0);Od(i+160|0,i+208|0);Ke(i+144|0,i+192|0);Pd(i+144|0,i+160|0);Od(i+144|0,i+224|0);Ke(i+176|0,i+240|0);Od(i+176|0,i+256|0);Od(i+208|0,i+224|0);Pd(i+176|0,i+208|0);Od(i+176|0,i+256|0);Od(i+240|0,i+176|0);Ke(i+224|0,i+160|0);Od(i+224|0,i+176|0);Pd(i+224|0,i+256|0);Od(i+240|0,i+224|0);Od(i+160|0,i+224|0);Pd(i+160|0,i+144|0);Od(i+160|0,i+192|0);Ke(i+192|0,i+32|0);Ke(i+256|0,i+48|0);Ke(i+224|0,i+144|0);Od(i+224|0,i+160|0);Pd(i+224|0,i+32|0);Od(i+32|0,i+48|0);Pd(i+32|0,i+160|0);Pd(i+48|0,i+144|0);Od(i+32|0,i+48|0);Od(i+48|0,i+224|0);Od(i+192|0,i+128|0);Od(i+256|0,i+80|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+128|0);Od(i+128|0,i+80|0);Pd(i+128|0,i+240|0);Pd(i+80|0,i+176|0);Od(i+128|0,i+80|0);Od(i+80|0,i+224|0);Od(i+32|0,i+192|0);Od(i+128|0,i+192|0);Od(i+48|0,i+256|0);Od(i+80|0,i+256|0);Ke(i+192|0,i+16|0);Ke(i+256|0,i+112|0);Od(i+192|0,i+64|0);Od(i+256|0,i+96|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+64|0);Od(i+64|0,i+96|0);Pd(i+64|0,i+240|0);Pd(i+96|0,i+176|0);Od(i+64|0,i+96|0);Od(i+96|0,i+224|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+16|0);Od(i+16|0,i+112|0);Pd(i+16|0,i+160|0);Pd(i+112|0,i+144|0);Od(i+16|0,i+112|0);Od(i+112|0,i+208|0);Od(i+16|0,i+192|0);Od(i+64|0,i+192|0);Od(i+112|0,i+256|0);Od(i+96|0,i+256|0);Od(i+16|0,i+128|0);Od(i+112|0,i+32|0);Od(i+64|0,i+16|0);Od(i+32|0,i+128|0);Od(i+128|0,i+112|0);Od(i+112|0,i+48|0);Od(i+48|0,i+96|0);Od(i+64|0,i+48|0);Od(i+96|0,i+80|0);Od(i+80|0,i+48|0);Od(i+32|0,i+80|0);dd(i+256|0,i+128|0,147);dd(i+240|0,i+112|0,147);dd(i+224|0,i+64|0,147);dd(i+208|0,i+32|0,147);dd(i+192|0,i+80|0,147);dd(i+176|0,i+16|0,147);dd(i+160|0,i+96|0,147);dd(i+144|0,i+48|0,147);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+64|0,i+224|0);Od(i+32|0,i+208|0);Od(i+80|0,i+192|0);Od(i+16|0,i+176|0);Od(i+96|0,i+160|0);Od(i+48|0,i+144|0);Od(i+256|0,i+48|0);Od(i+240|0,i+128|0);Od(i+224|0,i+112|0);Od(i+240|0,i+48|0);Od(i+208|0,i+64|0);Od(i+192|0,i+32|0);Od(i+176|0,i+80|0);Od(i+208|0,i+48|0);Od(i+160|0,i+16|0);Od(i+144|0,i+96|0);Od(i+192|0,i+48|0);dd(i+128|0,i+128|0,78);dd(i+112|0,i+112|0,78);dd(i+64|0,i+64|0,78);dd(i+32|0,i+32|0,78);dd(i+80|0,i+80|0,78);dd(i+16|0,i+16|0,78);dd(i+96|0,i+96|0,78);dd(i+48|0,i+48|0,78);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+224|0,i+64|0);Od(i+208|0,i+32|0);Od(i+192|0,i+80|0);Od(i+176|0,i+16|0);Od(i+160|0,i+96|0);Od(i+144|0,i+48|0);Od(i+256|0,g+512|0);sb(i+256|0,35320);Od(i+240|0,g+528|0);sb(i+240|0,35320);Od(i+224|0,g+544|0);sb(i+224|0,35320);Od(i+208|0,g+560|0);sb(i+208|0,35320);Od(i+192|0,g+576|0);sb(i+192|0,35320);Od(i+176|0,g+592|0);sb(i+176|0,35320);Od(i+160|0,g+608|0);sb(i+160|0,35320);Od(i+144|0,g+624|0);sb(i+144|0,35320);Od(i+176|0,i+160|0);Od(i+224|0,i+240|0);Od(i+176|0,i+256|0);Od(i+160|0,i+224|0);Od(i+208|0,i+256|0);Od(i+160|0,i+208|0);Od(i+208|0,i+144|0);Od(i+208|0,i+192|0);Od(i+144|0,i+176|0);Od(i+208|0,i+240|0);Od(i+192|0,i+176|0);Od(i+224|0,i+144|0);Od(i+240|0,i+176|0);Ke(i+80|0,i+144|0);Ke(i+96|0,i+240|0);Ke(i+112|0,i+176|0);Ke(i+48|0,i+224|0);Ke(i+64|0,i+160|0);Od(i+80|0,i+192|0);Od(i+96|0,i+224|0);Od(i+112|0,i+208|0);Od(i+48|0,i+192|0);Od(i+64|0,i+256|0);Ke(i+32|0,i+80|0);Ke(i+128|0,i+96|0);Ke(i+16|0,i+80|0);Rd(i+96|0,i+112|0);Rd(i+80|0,i+64|0);Od(i+16|0,i+128|0);Pd(i+32|0,i+64|0);Pd(i+128|0,i+112|0);Od(i+64|0,i+112|0);Pd(i+16|0,i+64|0);Ke(i+64|0,i+208|0);Od(i+64|0,i+256|0);Pd(i+48|0,i+64|0);Od(i+80|0,i+48|0);Od(i+96|0,i+48|0);Ke(i+48|0,i+144|0);Od(i+48|0,i+240|0);Ke(i+64|0,i+176|0);Ke(i+112|0,i+48|0);Od(i+64|0,i+160|0);Rd(i+112|0,i+64|0);Pd(i+48|0,i+64|0);Od(i+128|0,i+48|0);Od(i+80|0,i+16|0);Od(i+96|0,i+32|0);Od(i+112|0,i+16|0);Od(i+128|0,i+32|0);Od(i+112|0,i+32|0);Ke(i+64|0,i+224|0);Ke(i+48|0,i+192|0);Ke(i+32|0,i+240|0);Ke(i+16|0,i+144|0);Pd(i+64|0,i+208|0);Pd(i+48|0,i+256|0);Pd(i+32|0,i+176|0);Rd(i+16|0,i+160|0);Od(i+80|0,i+64|0);Od(i+96|0,i+48|0);Od(i+112|0,i+32|0);Od(i+128|0,i+16|0);Ke(i+64|0,i+80|0);Od(i+64|0,i+96|0);Pd(i+80|0,i+112|0);Ke(i+32|0,i+128|0);Od(i+32|0,i+80|0);Ke(i+16|0,i+64|0);Pd(i+16|0,i+32|0);Od(i+16|0,i+96|0);Ke(i+48|0,i+112|0);Od(i+48|0,i+128|0);Od(i+80|0,i+96|0);Pd(i+48|0,i+80|0);Od(i+48|0,i+128|0);Od(i+112|0,i+48|0);Ke(i+96|0,i+32|0);Od(i+96|0,i+48|0);Pd(i+96|0,i+128|0);Od(i+112|0,i+96|0);Od(i+32|0,i+96|0);Pd(i+32|0,i+16|0);Od(i+32|0,i+64|0);Ke(i+64|0,i+160|0);Ke(i+128|0,i+176|0);Ke(i+96|0,i+16|0);Od(i+96|0,i+32|0);Pd(i+96|0,i+160|0);Od(i+160|0,i+176|0);Pd(i+160|0,i+32|0);Pd(i+176|0,i+16|0);Od(i+160|0,i+176|0);Od(i+176|0,i+96|0);Od(i+64|0,i+256|0);Od(i+128|0,i+208|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+256|0);Od(i+256|0,i+208|0);Pd(i+256|0,i+112|0);Pd(i+208|0,i+48|0);Od(i+256|0,i+208|0);Od(i+208|0,i+96|0);Od(i+160|0,i+64|0);Od(i+256|0,i+64|0);Od(i+176|0,i+128|0);Od(i+208|0,i+128|0);Ke(i+64|0,i+144|0);Ke(i+128|0,i+240|0);Od(i+64|0,i+192|0);Od(i+128|0,i+224|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+192|0);Od(i+192|0,i+224|0);Pd(i+192|0,i+112|0);Pd(i+224|0,i+48|0);Od(i+192|0,i+224|0);Od(i+224|0,i+96|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+144|0);Od(i+144|0,i+240|0);Pd(i+144|0,i+32|0);Pd(i+240|0,i+16|0);Od(i+144|0,i+240|0);Od(i+240|0,i+80|0);Od(i+144|0,i+64|0);Od(i+192|0,i+64|0);Od(i+240|0,i+128|0);Od(i+224|0,i+128|0);Od(i+144|0,i+256|0);Od(i+240|0,i+160|0);Od(i+192|0,i+144|0);Od(i+160|0,i+256|0);Od(i+256|0,i+240|0);Od(i+240|0,i+176|0);Od(i+176|0,i+224|0);Od(i+192|0,i+176|0);Od(i+224|0,i+208|0);Od(i+208|0,i+176|0);Od(i+160|0,i+208|0);dd(i+128|0,i+256|0,147);dd(i+112|0,i+240|0,147);dd(i+96|0,i+192|0,147);dd(i+80|0,i+160|0,147);dd(i+64|0,i+208|0,147);dd(i+48|0,i+144|0,147);dd(i+32|0,i+224|0,147);dd(i+16|0,i+176|0,147);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+192|0,i+96|0);Od(i+160|0,i+80|0);Od(i+208|0,i+64|0);Od(i+144|0,i+48|0);Od(i+224|0,i+32|0);Od(i+176|0,i+16|0);Od(i+128|0,i+176|0);Od(i+112|0,i+256|0);Od(i+96|0,i+240|0);Od(i+112|0,i+176|0);Od(i+80|0,i+192|0);Od(i+64|0,i+160|0);Od(i+48|0,i+208|0);Od(i+80|0,i+176|0);Od(i+32|0,i+144|0);Od(i+16|0,i+224|0);Od(i+64|0,i+176|0);dd(i+256|0,i+256|0,78);dd(i+240|0,i+240|0,78);dd(i+192|0,i+192|0,78);dd(i+160|0,i+160|0,78);dd(i+208|0,i+208|0,78);dd(i+144|0,i+144|0,78);dd(i+224|0,i+224|0,78);dd(i+176|0,i+176|0,78);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+96|0,i+192|0);Od(i+80|0,i+160|0);Od(i+64|0,i+208|0);Od(i+48|0,i+144|0);Od(i+32|0,i+224|0);Od(i+16|0,i+176|0);Od(i+128|0,g+640|0);sb(i+128|0,35320);Od(i+112|0,g+656|0);sb(i+112|0,35320);Od(i+96|0,g+672|0);sb(i+96|0,35320);Od(i+80|0,g+688|0);sb(i+80|0,35320);Od(i+64|0,g+704|0);sb(i+64|0,35320);Od(i+48|0,g+720|0);sb(i+48|0,35320);Od(i+32|0,g+736|0);sb(i+32|0,35320);Od(i+16|0,g+752|0);sb(i+16|0,35320);Od(i+48|0,i+32|0);Od(i+96|0,i+112|0);Od(i+48|0,i+128|0);Od(i+32|0,i+96|0);Od(i+80|0,i+128|0);Od(i+32|0,i+80|0);Od(i+80|0,i+16|0);Od(i+80|0,i+64|0);Od(i+16|0,i+48|0);Od(i+80|0,i+112|0);Od(i+64|0,i+48|0);Od(i+96|0,i+16|0);Od(i+112|0,i+48|0);Ke(i+208|0,i+16|0);Ke(i+224|0,i+112|0);Ke(i+240|0,i+48|0);Ke(i+176|0,i+96|0);Ke(i+192|0,i+32|0);Od(i+208|0,i+64|0);Od(i+224|0,i+96|0);Od(i+240|0,i+80|0);Od(i+176|0,i+64|0);Od(i+192|0,i+128|0);Ke(i+160|0,i+208|0);Ke(i+256|0,i+224|0);Ke(i+144|0,i+208|0);Rd(i+224|0,i+240|0);Rd(i+208|0,i+192|0);Od(i+144|0,i+256|0);Pd(i+160|0,i+192|0);Pd(i+256|0,i+240|0);Od(i+192|0,i+240|0);Pd(i+144|0,i+192|0);Ke(i+192|0,i+80|0);Od(i+192|0,i+128|0);Pd(i+176|0,i+192|0);Od(i+208|0,i+176|0);Od(i+224|0,i+176|0);Ke(i+176|0,i+16|0);Od(i+176|0,i+112|0);Ke(i+192|0,i+48|0);Ke(i+240|0,i+176|0);Od(i+192|0,i+32|0);Rd(i+240|0,i+192|0);Pd(i+176|0,i+192|0);Od(i+256|0,i+176|0);Od(i+208|0,i+144|0);Od(i+224|0,i+160|0);Od(i+240|0,i+144|0);Od(i+256|0,i+160|0);Od(i+240|0,i+160|0);Ke(i+192|0,i+96|0);Ke(i+176|0,i+64|0);Ke(i+160|0,i+112|0);Ke(i+144|0,i+16|0);Pd(i+192|0,i+80|0);Pd(i+176|0,i+128|0);Pd(i+160|0,i+48|0);Rd(i+144|0,i+32|0);Od(i+208|0,i+192|0);Od(i+224|0,i+176|0);Od(i+240|0,i+160|0);Od(i+256|0,i+144|0);Ke(i+192|0,i+208|0);Od(i+192|0,i+224|0);Pd(i+208|0,i+240|0);Ke(i+160|0,i+256|0);Od(i+160|0,i+208|0);Ke(i+144|0,i+192|0);Pd(i+144|0,i+160|0);Od(i+144|0,i+224|0);Ke(i+176|0,i+240|0);Od(i+176|0,i+256|0);Od(i+208|0,i+224|0);Pd(i+176|0,i+208|0);Od(i+176|0,i+256|0);Od(i+240|0,i+176|0);Ke(i+224|0,i+160|0);Od(i+224|0,i+176|0);Pd(i+224|0,i+256|0);Od(i+240|0,i+224|0);Od(i+160|0,i+224|0);Pd(i+160|0,i+144|0);Od(i+160|0,i+192|0);Ke(i+192|0,i+32|0);Ke(i+256|0,i+48|0);Ke(i+224|0,i+144|0);Od(i+224|0,i+160|0);Pd(i+224|0,i+32|0);Od(i+32|0,i+48|0);Pd(i+32|0,i+160|0);Pd(i+48|0,i+144|0);Od(i+32|0,i+48|0);Od(i+48|0,i+224|0);Od(i+192|0,i+128|0);Od(i+256|0,i+80|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+128|0);Od(i+128|0,i+80|0);Pd(i+128|0,i+240|0);Pd(i+80|0,i+176|0);Od(i+128|0,i+80|0);Od(i+80|0,i+224|0);Od(i+32|0,i+192|0);Od(i+128|0,i+192|0);Od(i+48|0,i+256|0);Od(i+80|0,i+256|0);Ke(i+192|0,i+16|0);Ke(i+256|0,i+112|0);Od(i+192|0,i+64|0);Od(i+256|0,i+96|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+64|0);Od(i+64|0,i+96|0);Pd(i+64|0,i+240|0);Pd(i+96|0,i+176|0);Od(i+64|0,i+96|0);Od(i+96|0,i+224|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+16|0);Od(i+16|0,i+112|0);Pd(i+16|0,i+160|0);Pd(i+112|0,i+144|0);Od(i+16|0,i+112|0);Od(i+112|0,i+208|0);Od(i+16|0,i+192|0);Od(i+64|0,i+192|0);Od(i+112|0,i+256|0);Od(i+96|0,i+256|0);Od(i+16|0,i+128|0);Od(i+112|0,i+32|0);Od(i+64|0,i+16|0);Od(i+32|0,i+128|0);Od(i+128|0,i+112|0);Od(i+112|0,i+48|0);Od(i+48|0,i+96|0);Od(i+64|0,i+48|0);Od(i+96|0,i+80|0);Od(i+80|0,i+48|0);Od(i+32|0,i+80|0);dd(i+256|0,i+128|0,147);dd(i+240|0,i+112|0,147);dd(i+224|0,i+64|0,147);dd(i+208|0,i+32|0,147);dd(i+192|0,i+80|0,147);dd(i+176|0,i+16|0,147);dd(i+160|0,i+96|0,147);dd(i+144|0,i+48|0,147);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+64|0,i+224|0);Od(i+32|0,i+208|0);Od(i+80|0,i+192|0);Od(i+16|0,i+176|0);Od(i+96|0,i+160|0);Od(i+48|0,i+144|0);Od(i+256|0,i+48|0);Od(i+240|0,i+128|0);Od(i+224|0,i+112|0);Od(i+240|0,i+48|0);Od(i+208|0,i+64|0);Od(i+192|0,i+32|0);Od(i+176|0,i+80|0);Od(i+208|0,i+48|0);Od(i+160|0,i+16|0);Od(i+144|0,i+96|0);Od(i+192|0,i+48|0);dd(i+128|0,i+128|0,78);dd(i+112|0,i+112|0,78);dd(i+64|0,i+64|0,78);dd(i+32|0,i+32|0,78);dd(i+80|0,i+80|0,78);dd(i+16|0,i+16|0,78);dd(i+96|0,i+96|0,78);dd(i+48|0,i+48|0,78);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+224|0,i+64|0);Od(i+208|0,i+32|0);Od(i+192|0,i+80|0);Od(i+176|0,i+16|0);Od(i+160|0,i+96|0);Od(i+144|0,i+48|0);Od(i+256|0,g+768|0);sb(i+256|0,35320);Od(i+240|0,g+784|0);sb(i+240|0,35320);Od(i+224|0,g+800|0);sb(i+224|0,35320);Od(i+208|0,g+816|0);sb(i+208|0,35320);Od(i+192|0,g+832|0);sb(i+192|0,35320);Od(i+176|0,g+848|0);sb(i+176|0,35320);Od(i+160|0,g+864|0);sb(i+160|0,35320);Od(i+144|0,g+880|0);sb(i+144|0,35320);Od(i+176|0,i+160|0);Od(i+224|0,i+240|0);Od(i+176|0,i+256|0);Od(i+160|0,i+224|0);Od(i+208|0,i+256|0);Od(i+160|0,i+208|0);Od(i+208|0,i+144|0);Od(i+208|0,i+192|0);Od(i+144|0,i+176|0);Od(i+208|0,i+240|0);Od(i+192|0,i+176|0);Od(i+224|0,i+144|0);Od(i+240|0,i+176|0);Ke(i+80|0,i+144|0);Ke(i+96|0,i+240|0);Ke(i+112|0,i+176|0);Ke(i+48|0,i+224|0);Ke(i+64|0,i+160|0);Od(i+80|0,i+192|0);Od(i+96|0,i+224|0);Od(i+112|0,i+208|0);Od(i+48|0,i+192|0);Od(i+64|0,i+256|0);Ke(i+32|0,i+80|0);Ke(i+128|0,i+96|0);Ke(i+16|0,i+80|0);Rd(i+96|0,i+112|0);Rd(i+80|0,i+64|0);Od(i+16|0,i+128|0);Pd(i+32|0,i+64|0);Pd(i+128|0,i+112|0);Od(i+64|0,i+112|0);Pd(i+16|0,i+64|0);Ke(i+64|0,i+208|0);Od(i+64|0,i+256|0);Pd(i+48|0,i+64|0);Od(i+80|0,i+48|0);Od(i+96|0,i+48|0);Ke(i+48|0,i+144|0);Od(i+48|0,i+240|0);Ke(i+64|0,i+176|0);Ke(i+112|0,i+48|0);Od(i+64|0,i+160|0);Rd(i+112|0,i+64|0);Pd(i+48|0,i+64|0);Od(i+128|0,i+48|0);Od(i+80|0,i+16|0);Od(i+96|0,i+32|0);Od(i+112|0,i+16|0);Od(i+128|0,i+32|0);Od(i+112|0,i+32|0);Ke(i+64|0,i+224|0);Ke(i+48|0,i+192|0);Ke(i+32|0,i+240|0);Ke(i+16|0,i+144|0);Pd(i+64|0,i+208|0);Pd(i+48|0,i+256|0);Pd(i+32|0,i+176|0);Rd(i+16|0,i+160|0);Od(i+80|0,i+64|0);Od(i+96|0,i+48|0);Od(i+112|0,i+32|0);Od(i+128|0,i+16|0);Ke(i+64|0,i+80|0);Od(i+64|0,i+96|0);Pd(i+80|0,i+112|0);Ke(i+32|0,i+128|0);Od(i+32|0,i+80|0);Ke(i+16|0,i+64|0);Pd(i+16|0,i+32|0);Od(i+16|0,i+96|0);Ke(i+48|0,i+112|0);Od(i+48|0,i+128|0);Od(i+80|0,i+96|0);Pd(i+48|0,i+80|0);Od(i+48|0,i+128|0);Od(i+112|0,i+48|0);Ke(i+96|0,i+32|0);Od(i+96|0,i+48|0);Pd(i+96|0,i+128|0);Od(i+112|0,i+96|0);Od(i+32|0,i+96|0);Pd(i+32|0,i+16|0);Od(i+32|0,i+64|0);Ke(i+64|0,i+160|0);Ke(i+128|0,i+176|0);Ke(i+96|0,i+16|0);Od(i+96|0,i+32|0);Pd(i+96|0,i+160|0);Od(i+160|0,i+176|0);Pd(i+160|0,i+32|0);Pd(i+176|0,i+16|0);Od(i+160|0,i+176|0);Od(i+176|0,i+96|0);Od(i+64|0,i+256|0);Od(i+128|0,i+208|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+256|0);Od(i+256|0,i+208|0);Pd(i+256|0,i+112|0);Pd(i+208|0,i+48|0);Od(i+256|0,i+208|0);Od(i+208|0,i+96|0);Od(i+160|0,i+64|0);Od(i+256|0,i+64|0);Od(i+176|0,i+128|0);Od(i+208|0,i+128|0);Ke(i+64|0,i+144|0);Ke(i+128|0,i+240|0);Od(i+64|0,i+192|0);Od(i+128|0,i+224|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+192|0);Od(i+192|0,i+224|0);Pd(i+192|0,i+112|0);Pd(i+224|0,i+48|0);Od(i+192|0,i+224|0);Od(i+224|0,i+96|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+144|0);Od(i+144|0,i+240|0);Pd(i+144|0,i+32|0);Pd(i+240|0,i+16|0);Od(i+144|0,i+240|0);Od(i+240|0,i+80|0);Od(i+144|0,i+64|0);Od(i+192|0,i+64|0);Od(i+240|0,i+128|0);Od(i+224|0,i+128|0);Od(i+144|0,i+256|0);Od(i+240|0,i+160|0);Od(i+192|0,i+144|0);Od(i+160|0,i+256|0);Od(i+256|0,i+240|0);Od(i+240|0,i+176|0);Od(i+176|0,i+224|0);Od(i+192|0,i+176|0);Od(i+224|0,i+208|0);Od(i+208|0,i+176|0);Od(i+160|0,i+208|0);dd(i+128|0,i+256|0,147);dd(i+112|0,i+240|0,147);dd(i+96|0,i+192|0,147);dd(i+80|0,i+160|0,147);dd(i+64|0,i+208|0,147);dd(i+48|0,i+144|0,147);dd(i+32|0,i+224|0,147);dd(i+16|0,i+176|0,147);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+192|0,i+96|0);Od(i+160|0,i+80|0);Od(i+208|0,i+64|0);Od(i+144|0,i+48|0);Od(i+224|0,i+32|0);Od(i+176|0,i+16|0);Od(i+128|0,i+176|0);Od(i+112|0,i+256|0);Od(i+96|0,i+240|0);Od(i+112|0,i+176|0);Od(i+80|0,i+192|0);Od(i+64|0,i+160|0);Od(i+48|0,i+208|0);Od(i+80|0,i+176|0);Od(i+32|0,i+144|0);Od(i+16|0,i+224|0);Od(i+64|0,i+176|0);dd(i+256|0,i+256|0,78);dd(i+240|0,i+240|0,78);dd(i+192|0,i+192|0,78);dd(i+160|0,i+160|0,78);dd(i+208|0,i+208|0,78);dd(i+144|0,i+144|0,78);dd(i+224|0,i+224|0,78);dd(i+176|0,i+176|0,78);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+96|0,i+192|0);Od(i+80|0,i+160|0);Od(i+64|0,i+208|0);Od(i+48|0,i+144|0);Od(i+32|0,i+224|0);Od(i+16|0,i+176|0);Od(i+128|0,g+896|0);sb(i+128|0,35320);Od(i+112|0,g+912|0);sb(i+112|0,35320);Od(i+96|0,g+928|0);sb(i+96|0,35320);Od(i+80|0,g+944|0);sb(i+80|0,35320);Od(i+64|0,g+960|0);sb(i+64|0,35320);Od(i+48|0,g+976|0);sb(i+48|0,35320);Od(i+32|0,g+992|0);sb(i+32|0,35320);Od(i+16|0,g+1008|0);sb(i+16|0,35320);Od(i+48|0,i+32|0);Od(i+96|0,i+112|0);Od(i+48|0,i+128|0);Od(i+32|0,i+96|0);Od(i+80|0,i+128|0);Od(i+32|0,i+80|0);Od(i+80|0,i+16|0);Od(i+80|0,i+64|0);Od(i+16|0,i+48|0);Od(i+80|0,i+112|0);Od(i+64|0,i+48|0);Od(i+96|0,i+16|0);Od(i+112|0,i+48|0);Ke(i+208|0,i+16|0);Ke(i+224|0,i+112|0);Ke(i+240|0,i+48|0);Ke(i+176|0,i+96|0);Ke(i+192|0,i+32|0);Od(i+208|0,i+64|0);Od(i+224|0,i+96|0);Od(i+240|0,i+80|0);Od(i+176|0,i+64|0);Od(i+192|0,i+128|0);Ke(i+160|0,i+208|0);Ke(i+256|0,i+224|0);Ke(i+144|0,i+208|0);Rd(i+224|0,i+240|0);Rd(i+208|0,i+192|0);Od(i+144|0,i+256|0);Pd(i+160|0,i+192|0);Pd(i+256|0,i+240|0);Od(i+192|0,i+240|0);Pd(i+144|0,i+192|0);Ke(i+192|0,i+80|0);Od(i+192|0,i+128|0);Pd(i+176|0,i+192|0);Od(i+208|0,i+176|0);Od(i+224|0,i+176|0);Ke(i+176|0,i+16|0);Od(i+176|0,i+112|0);Ke(i+192|0,i+48|0);Ke(i+240|0,i+176|0);Od(i+192|0,i+32|0);Rd(i+240|0,i+192|0);Pd(i+176|0,i+192|0);Od(i+256|0,i+176|0);Od(i+208|0,i+144|0);Od(i+224|0,i+160|0);Od(i+240|0,i+144|0);Od(i+256|0,i+160|0);Od(i+240|0,i+160|0);Ke(i+192|0,i+96|0);Ke(i+176|0,i+64|0);Ke(i+160|0,i+112|0);Ke(i+144|0,i+16|0);Pd(i+192|0,i+80|0);Pd(i+176|0,i+128|0);Pd(i+160|0,i+48|0);Rd(i+144|0,i+32|0);Od(i+208|0,i+192|0);Od(i+224|0,i+176|0);Od(i+240|0,i+160|0);Od(i+256|0,i+144|0);Ke(i+192|0,i+208|0);Od(i+192|0,i+224|0);Pd(i+208|0,i+240|0);Ke(i+160|0,i+256|0);Od(i+160|0,i+208|0);Ke(i+144|0,i+192|0);Pd(i+144|0,i+160|0);Od(i+144|0,i+224|0);Ke(i+176|0,i+240|0);Od(i+176|0,i+256|0);Od(i+208|0,i+224|0);Pd(i+176|0,i+208|0);Od(i+176|0,i+256|0);Od(i+240|0,i+176|0);Ke(i+224|0,i+160|0);Od(i+224|0,i+176|0);Pd(i+224|0,i+256|0);Od(i+240|0,i+224|0);Od(i+160|0,i+224|0);Pd(i+160|0,i+144|0);Od(i+160|0,i+192|0);Ke(i+192|0,i+32|0);Ke(i+256|0,i+48|0);Ke(i+224|0,i+144|0);Od(i+224|0,i+160|0);Pd(i+224|0,i+32|0);Od(i+32|0,i+48|0);Pd(i+32|0,i+160|0);Pd(i+48|0,i+144|0);Od(i+32|0,i+48|0);Od(i+48|0,i+224|0);Od(i+192|0,i+128|0);Od(i+256|0,i+80|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+128|0);Od(i+128|0,i+80|0);Pd(i+128|0,i+240|0);Pd(i+80|0,i+176|0);Od(i+128|0,i+80|0);Od(i+80|0,i+224|0);Od(i+32|0,i+192|0);Od(i+128|0,i+192|0);Od(i+48|0,i+256|0);Od(i+80|0,i+256|0);Ke(i+192|0,i+16|0);Ke(i+256|0,i+112|0);Od(i+192|0,i+64|0);Od(i+256|0,i+96|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+64|0);Od(i+64|0,i+96|0);Pd(i+64|0,i+240|0);Pd(i+96|0,i+176|0);Od(i+64|0,i+96|0);Od(i+96|0,i+224|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+16|0);Od(i+16|0,i+112|0);Pd(i+16|0,i+160|0);Pd(i+112|0,i+144|0);Od(i+16|0,i+112|0);Od(i+112|0,i+208|0);Od(i+16|0,i+192|0);Od(i+64|0,i+192|0);Od(i+112|0,i+256|0);Od(i+96|0,i+256|0);Od(i+16|0,i+128|0);Od(i+112|0,i+32|0);Od(i+64|0,i+16|0);Od(i+32|0,i+128|0);Od(i+128|0,i+112|0);Od(i+112|0,i+48|0);Od(i+48|0,i+96|0);Od(i+64|0,i+48|0);Od(i+96|0,i+80|0);Od(i+80|0,i+48|0);Od(i+32|0,i+80|0);dd(i+256|0,i+128|0,147);dd(i+240|0,i+112|0,147);dd(i+224|0,i+64|0,147);dd(i+208|0,i+32|0,147);dd(i+192|0,i+80|0,147);dd(i+176|0,i+16|0,147);dd(i+160|0,i+96|0,147);dd(i+144|0,i+48|0,147);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+64|0,i+224|0);Od(i+32|0,i+208|0);Od(i+80|0,i+192|0);Od(i+16|0,i+176|0);Od(i+96|0,i+160|0);Od(i+48|0,i+144|0);Od(i+256|0,i+48|0);Od(i+240|0,i+128|0);Od(i+224|0,i+112|0);Od(i+240|0,i+48|0);Od(i+208|0,i+64|0);Od(i+192|0,i+32|0);Od(i+176|0,i+80|0);Od(i+208|0,i+48|0);Od(i+160|0,i+16|0);Od(i+144|0,i+96|0);Od(i+192|0,i+48|0);dd(i+128|0,i+128|0,78);dd(i+112|0,i+112|0,78);dd(i+64|0,i+64|0,78);dd(i+32|0,i+32|0,78);dd(i+80|0,i+80|0,78);dd(i+16|0,i+16|0,78);dd(i+96|0,i+96|0,78);dd(i+48|0,i+48|0,78);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+224|0,i+64|0);Od(i+208|0,i+32|0);Od(i+192|0,i+80|0);Od(i+176|0,i+16|0);Od(i+160|0,i+96|0);Od(i+144|0,i+48|0);Od(i+256|0,g+1024|0);sb(i+256|0,35320);Od(i+240|0,g+1040|0);sb(i+240|0,35320);Od(i+224|0,g+1056|0);sb(i+224|0,35320);Od(i+208|0,g+1072|0);sb(i+208|0,35320);Od(i+192|0,g+1088|0);sb(i+192|0,35320);Od(i+176|0,g+1104|0);sb(i+176|0,35320);Od(i+160|0,g+1120|0);sb(i+160|0,35320);Od(i+144|0,g+1136|0);sb(i+144|0,35320);Od(i+176|0,i+160|0);Od(i+224|0,i+240|0);Od(i+176|0,i+256|0);Od(i+160|0,i+224|0);Od(i+208|0,i+256|0);Od(i+160|0,i+208|0);Od(i+208|0,i+144|0);Od(i+208|0,i+192|0);Od(i+144|0,i+176|0);Od(i+208|0,i+240|0);Od(i+192|0,i+176|0);Od(i+224|0,i+144|0);Od(i+240|0,i+176|0);Ke(i+80|0,i+144|0);Ke(i+96|0,i+240|0);Ke(i+112|0,i+176|0);Ke(i+48|0,i+224|0);Ke(i+64|0,i+160|0);Od(i+80|0,i+192|0);Od(i+96|0,i+224|0);Od(i+112|0,i+208|0);Od(i+48|0,i+192|0);Od(i+64|0,i+256|0);Ke(i+32|0,i+80|0);Ke(i+128|0,i+96|0);Ke(i+16|0,i+80|0);Rd(i+96|0,i+112|0);Rd(i+80|0,i+64|0);Od(i+16|0,i+128|0);Pd(i+32|0,i+64|0);Pd(i+128|0,i+112|0);Od(i+64|0,i+112|0);Pd(i+16|0,i+64|0);Ke(i+64|0,i+208|0);Od(i+64|0,i+256|0);Pd(i+48|0,i+64|0);Od(i+80|0,i+48|0);Od(i+96|0,i+48|0);Ke(i+48|0,i+144|0);Od(i+48|0,i+240|0);Ke(i+64|0,i+176|0);Ke(i+112|0,i+48|0);Od(i+64|0,i+160|0);Rd(i+112|0,i+64|0);Pd(i+48|0,i+64|0);Od(i+128|0,i+48|0);Od(i+80|0,i+16|0);Od(i+96|0,i+32|0);Od(i+112|0,i+16|0);Od(i+128|0,i+32|0);Od(i+112|0,i+32|0);Ke(i+64|0,i+224|0);Ke(i+48|0,i+192|0);Ke(i+32|0,i+240|0);Ke(i+16|0,i+144|0);Pd(i+64|0,i+208|0);Pd(i+48|0,i+256|0);Pd(i+32|0,i+176|0);Rd(i+16|0,i+160|0);Od(i+80|0,i+64|0);Od(i+96|0,i+48|0);Od(i+112|0,i+32|0);Od(i+128|0,i+16|0);Ke(i+64|0,i+80|0);Od(i+64|0,i+96|0);Pd(i+80|0,i+112|0);Ke(i+32|0,i+128|0);Od(i+32|0,i+80|0);Ke(i+16|0,i+64|0);Pd(i+16|0,i+32|0);Od(i+16|0,i+96|0);Ke(i+48|0,i+112|0);Od(i+48|0,i+128|0);Od(i+80|0,i+96|0);Pd(i+48|0,i+80|0);Od(i+48|0,i+128|0);Od(i+112|0,i+48|0);Ke(i+96|0,i+32|0);Od(i+96|0,i+48|0);Pd(i+96|0,i+128|0);Od(i+112|0,i+96|0);Od(i+32|0,i+96|0);Pd(i+32|0,i+16|0);Od(i+32|0,i+64|0);Ke(i+64|0,i+160|0);Ke(i+128|0,i+176|0);Ke(i+96|0,i+16|0);Od(i+96|0,i+32|0);Pd(i+96|0,i+160|0);Od(i+160|0,i+176|0);Pd(i+160|0,i+32|0);Pd(i+176|0,i+16|0);Od(i+160|0,i+176|0);Od(i+176|0,i+96|0);Od(i+64|0,i+256|0);Od(i+128|0,i+208|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+256|0);Od(i+256|0,i+208|0);Pd(i+256|0,i+112|0);Pd(i+208|0,i+48|0);Od(i+256|0,i+208|0);Od(i+208|0,i+96|0);Od(i+160|0,i+64|0);Od(i+256|0,i+64|0);Od(i+176|0,i+128|0);Od(i+208|0,i+128|0);Ke(i+64|0,i+144|0);Ke(i+128|0,i+240|0);Od(i+64|0,i+192|0);Od(i+128|0,i+224|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+64|0);Od(i+64|0,i+128|0);Pd(i+64|0,i+32|0);Pd(i+128|0,i+16|0);Od(i+128|0,i+64|0);Od(i+64|0,i+80|0);Ke(i+96|0,i+48|0);Od(i+96|0,i+112|0);Pd(i+96|0,i+192|0);Od(i+192|0,i+224|0);Pd(i+192|0,i+112|0);Pd(i+224|0,i+48|0);Od(i+192|0,i+224|0);Od(i+224|0,i+96|0);Od(i+16|0,i+48|0);Od(i+32|0,i+112|0);Ke(i+80|0,i+16|0);Od(i+80|0,i+32|0);Pd(i+80|0,i+144|0);Od(i+144|0,i+240|0);Pd(i+144|0,i+32|0);Pd(i+240|0,i+16|0);Od(i+144|0,i+240|0);Od(i+240|0,i+80|0);Od(i+144|0,i+64|0);Od(i+192|0,i+64|0);Od(i+240|0,i+128|0);Od(i+224|0,i+128|0);Od(i+144|0,i+256|0);Od(i+240|0,i+160|0);Od(i+192|0,i+144|0);Od(i+160|0,i+256|0);Od(i+256|0,i+240|0);Od(i+240|0,i+176|0);Od(i+176|0,i+224|0);Od(i+192|0,i+176|0);Od(i+224|0,i+208|0);Od(i+208|0,i+176|0);Od(i+160|0,i+208|0);dd(i+128|0,i+256|0,147);dd(i+112|0,i+240|0,147);dd(i+96|0,i+192|0,147);dd(i+80|0,i+160|0,147);dd(i+64|0,i+208|0,147);dd(i+48|0,i+144|0,147);dd(i+32|0,i+224|0,147);dd(i+16|0,i+176|0,147);Od(i+256|0,i+128|0);Od(i+240|0,i+112|0);Od(i+192|0,i+96|0);Od(i+160|0,i+80|0);Od(i+208|0,i+64|0);Od(i+144|0,i+48|0);Od(i+224|0,i+32|0);Od(i+176|0,i+16|0);Od(i+128|0,i+176|0);Od(i+112|0,i+256|0);Od(i+96|0,i+240|0);Od(i+112|0,i+176|0);Od(i+80|0,i+192|0);Od(i+64|0,i+160|0);Od(i+48|0,i+208|0);Od(i+80|0,i+176|0);Od(i+32|0,i+144|0);Od(i+16|0,i+224|0);Od(i+64|0,i+176|0);dd(i+256|0,i+256|0,78);dd(i+240|0,i+240|0,78);dd(i+192|0,i+192|0,78);dd(i+160|0,i+160|0,78);dd(i+208|0,i+208|0,78);dd(i+144|0,i+144|0,78);dd(i+224|0,i+224|0,78);dd(i+176|0,i+176|0,78);Od(i+128|0,i+256|0);Od(i+112|0,i+240|0);Od(i+96|0,i+192|0);Od(i+80|0,i+160|0);Od(i+64|0,i+208|0);Od(i+48|0,i+144|0);Od(i+32|0,i+224|0);Od(i+16|0,i+176|0);Od(i+128|0,g+1152|0);sb(i+128|0,35336);Od(i+112|0,g+1168|0);sb(i+112|0,35336);Od(i+96|0,g+1184|0);sb(i+96|0,35336);Od(i+80|0,g+1200|0);sb(i+80|0,35336);Od(i+64|0,g+1216|0);sb(i+64|0,35336);Od(i+48|0,g+1232|0);sb(i+48|0,35336);Od(i+32|0,g+1248|0);sb(i+32|0,35336);Od(i+16|0,g+1264|0);sb(i+16|0,35336);Od(i+48|0,i+32|0);Od(i+96|0,i+112|0);Od(i+48|0,i+128|0);Od(i+32|0,i+96|0);Od(i+80|0,i+128|0);Od(i+32|0,i+80|0);Od(i+80|0,i+16|0);Od(i+80|0,i+64|0);Od(i+16|0,i+48|0);Od(i+80|0,i+112|0);Od(i+64|0,i+48|0);Od(i+96|0,i+16|0);Od(i+112|0,i+48|0);Ke(i+208|0,i+16|0);Ke(i+224|0,i+112|0);Ke(i+240|0,i+48|0);Ke(i+176|0,i+96|0);Ke(i+192|0,i+32|0);Od(i+208|0,i+64|0);Od(i+224|0,i+96|0);Od(i+240|0,i+80|0);Od(i+176|0,i+64|0);Od(i+192|0,i+128|0);Ke(i+160|0,i+208|0);Ke(i+256|0,i+224|0);Ke(i+144|0,i+208|0);Rd(i+224|0,i+240|0);Rd(i+208|0,i+192|0);Od(i+144|0,i+256|0);Pd(i+160|0,i+192|0);Pd(i+256|0,i+240|0);Od(i+192|0,i+240|0);Pd(i+144|0,i+192|0);Ke(i+192|0,i+80|0);Od(i+192|0,i+128|0);Pd(i+176|0,i+192|0);Od(i+208|0,i+176|0);Od(i+224|0,i+176|0);Ke(i+176|0,i+16|0);Od(i+176|0,i+112|0);Ke(i+192|0,i+48|0);Ke(i+240|0,i+176|0);Od(i+192|0,i+32|0);Rd(i+240|0,i+192|0);Pd(i+176|0,i+192|0);Od(i+256|0,i+176|0);Od(i+208|0,i+144|0);Od(i+224|0,i+160|0);Od(i+240|0,i+144|0);Od(i+256|0,i+160|0);Od(i+240|0,i+160|0);Ke(i+192|0,i+96|0);Ke(i+176|0,i+64|0);Ke(i+160|0,i+112|0);Ke(i+144|0,i+16|0);Pd(i+192|0,i+80|0);Pd(i+176|0,i+128|0);Pd(i+160|0,i+48|0);Rd(i+144|0,i+32|0);Od(i+208|0,i+192|0);Od(i+224|0,i+176|0);Od(i+240|0,i+160|0);Od(i+256|0,i+144|0);Ke(i+192|0,i+208|0);Od(i+192|0,i+224|0);Pd(i+208|0,i+240|0);Ke(i+160|0,i+256|0);Od(i+160|0,i+208|0);Ke(i+144|0,i+192|0);Pd(i+144|0,i+160|0);Od(i+144|0,i+224|0);Ke(i+176|0,i+240|0);Od(i+176|0,i+256|0);Od(i+208|0,i+224|0);Pd(i+176|0,i+208|0);Od(i+176|0,i+256|0);Od(i+240|0,i+176|0);Ke(i+224|0,i+160|0);Od(i+224|0,i+176|0);Pd(i+224|0,i+256|0);Od(i+240|0,i+224|0);Od(i+160|0,i+224|0);Pd(i+160|0,i+144|0);Od(i+160|0,i+192|0);Ke(i+192|0,i+32|0);Ke(i+256|0,i+48|0);Ke(i+224|0,i+144|0);Od(i+224|0,i+160|0);Pd(i+224|0,i+32|0);Od(i+32|0,i+48|0);Pd(i+32|0,i+160|0);Pd(i+48|0,i+144|0);Od(i+32|0,i+48|0);Od(i+48|0,i+224|0);Od(i+192|0,i+128|0);Od(i+256|0,i+80|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+128|0);Od(i+128|0,i+80|0);Pd(i+128|0,i+240|0);Pd(i+80|0,i+176|0);Od(i+128|0,i+80|0);Od(i+80|0,i+224|0);Od(i+32|0,i+192|0);Od(i+128|0,i+192|0);Od(i+48|0,i+256|0);Od(i+80|0,i+256|0);Ke(i+192|0,i+16|0);Ke(i+256|0,i+112|0);Od(i+192|0,i+64|0);Od(i+256|0,i+96|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+192|0);Od(i+192|0,i+256|0);Pd(i+192|0,i+160|0);Pd(i+256|0,i+144|0);Od(i+256|0,i+192|0);Od(i+192|0,i+208|0);Ke(i+224|0,i+176|0);Od(i+224|0,i+240|0);Pd(i+224|0,i+64|0);Od(i+64|0,i+96|0);Pd(i+64|0,i+240|0);Pd(i+96|0,i+176|0);Od(i+64|0,i+96|0);Od(i+96|0,i+224|0);Od(i+144|0,i+176|0);Od(i+160|0,i+240|0);Ke(i+208|0,i+144|0);Od(i+208|0,i+160|0);Pd(i+208|0,i+16|0);Od(i+16|0,i+112|0);Pd(i+16|0,i+160|0);Pd(i+112|0,i+144|0);Od(i+16|0,i+112|0);Od(i+112|0,i+208|0);Od(i+16|0,i+192|0);Od(i+64|0,i+192|0);Od(i+112|0,i+256|0);Od(i+96|0,i+256|0);Od(i+16|0,i+128|0);Od(i+112|0,i+32|0);Od(i+64|0,i+16|0);Od(i+32|0,i+128|0);Od(i+128|0,i+112|0);Od(i+112|0,i+48|0);Od(i+48|0,i+96|0);Od(i+64|0,i+48|0);Od(i+96|0,i+80|0);Od(i+80|0,i+48|0);Od(i+32|0,i+80|0);Od(i+128|0,g+1280|0);Od(i+112|0,g+1296|0);Od(i+64|0,g+1312|0);Od(i+32|0,g+1328|0);Od(i+80|0,g+1344|0);Od(i+16|0,g+1360|0);Od(i+96|0,g+1376|0);Od(i+48|0,g+1392|0);Ke(i+256|0,i+96|0);ge(i+256|0,1);Od(i+256|0,i+48|0);Pd(i+256|0,1104);Od(i+48|0,i+256|0);ie(i+256|0,1);Od(i+96|0,i+256|0);Ke(i+256|0,i+80|0);ge(i+256|0,1);Od(i+256|0,i+16|0);Pd(i+256|0,1104);Od(i+16|0,i+256|0);ie(i+256|0,1);Od(i+80|0,i+256|0);Ke(i+256|0,i+64|0);ge(i+256|0,1);Od(i+256|0,i+32|0);Pd(i+256|0,1104);Od(i+32|0,i+256|0);ie(i+256|0,1);Od(i+64|0,i+256|0);Ke(i+256|0,i+128|0);ge(i+256|0,1);Od(i+256|0,i+112|0);Pd(i+256|0,1104);Od(i+112|0,i+256|0);ie(i+256|0,1);Od(i+128|0,i+256|0);Ke(i+256|0,i+16|0);ge(i+256|0,2);Od(i+256|0,i+48|0);Pd(i+256|0,1120);Od(i+48|0,i+256|0);ie(i+256|0,2);Od(i+16|0,i+256|0);Ke(i+256|0,i+80|0);ge(i+256|0,2);Od(i+256|0,i+96|0);Pd(i+256|0,1120);Od(i+96|0,i+256|0);ie(i+256|0,2);Od(i+80|0,i+256|0);Ke(i+256|0,i+112|0);ge(i+256|0,2);Od(i+256|0,i+32|0);Pd(i+256|0,1120);Od(i+32|0,i+256|0);ie(i+256|0,2);Od(i+112|0,i+256|0);Ke(i+256|0,i+128|0);ge(i+256|0,2);Od(i+256|0,i+64|0);Pd(i+256|0,1120);Od(i+64|0,i+256|0);ie(i+256|0,2);Od(i+128|0,i+256|0);Ke(i+256|0,i+32|0);ge(i+256|0,4);Od(i+256|0,i+48|0);Pd(i+256|0,1136);Od(i+48|0,i+256|0);ie(i+256|0,4);Od(i+32|0,i+256|0);Ke(i+256|0,i+64|0);ge(i+256|0,4);Od(i+256|0,i+96|0);Pd(i+256|0,1136);Od(i+96|0,i+256|0);ie(i+256|0,4);Od(i+64|0,i+256|0);Ke(i+256|0,i+112|0);ge(i+256|0,4);Od(i+256|0,i+16|0);Pd(i+256|0,1136);Od(i+16|0,i+256|0);ie(i+256|0,4);Od(i+112|0,i+256|0);Ke(i+256|0,i+128|0);ge(i+256|0,4);Od(i+256|0,i+80|0);Pd(i+256|0,1136);Od(i+80|0,i+256|0);ie(i+256|0,4);Od(i+128|0,i+256|0);if(e>>>0<0|(e|0)==0&d>>>0<128){h=5;break}mg(i+12|0,(Ag(i+12|0)|0)+8|0);c[b>>2]=c[i+128>>2];c[b+4>>2]=c[i+128+4>>2];c[b+8>>2]=c[i+128+8>>2];c[b+12>>2]=c[i+128+12>>2];f=b+16|0;c[f>>2]=c[i+112>>2];c[f+4>>2]=c[i+112+4>>2];c[f+8>>2]=c[i+112+8>>2];c[f+12>>2]=c[i+112+12>>2];f=b+32|0;c[f>>2]=c[i+64>>2];c[f+4>>2]=c[i+64+4>>2];c[f+8>>2]=c[i+64+8>>2];c[f+12>>2]=c[i+64+12>>2];f=b+48|0;c[f>>2]=c[i+32>>2];c[f+4>>2]=c[i+32+4>>2];c[f+8>>2]=c[i+32+8>>2];c[f+12>>2]=c[i+32+12>>2];f=b+64|0;c[f>>2]=c[i+80>>2];c[f+4>>2]=c[i+80+4>>2];c[f+8>>2]=c[i+80+8>>2];c[f+12>>2]=c[i+80+12>>2];f=b+80|0;c[f>>2]=c[i+16>>2];c[f+4>>2]=c[i+16+4>>2];c[f+8>>2]=c[i+16+8>>2];c[f+12>>2]=c[i+16+12>>2];f=b+96|0;c[f>>2]=c[i+96>>2];c[f+4>>2]=c[i+96+4>>2];c[f+8>>2]=c[i+96+8>>2];c[f+12>>2]=c[i+96+12>>2];f=b+112|0;c[f>>2]=c[i+48>>2];c[f+4>>2]=c[i+48+4>>2];c[f+8>>2]=c[i+48+8>>2];c[f+12>>2]=c[i+48+12>>2];if((d|0)==128&(e|0)==0)break;f=lg(d|0,e|0,-128,-1)|0;b=b+128|0;e=z;d=f}if((h|0)==5?(g=Cf(d|0,e|0,4)|0,h=z,h=lg(Ag(i+12|0)|0,0,g|0,h|0)|0,mg(i+12|0,h),c[i+272>>2]=c[i+128>>2],c[i+272+4>>2]=c[i+128+4>>2],c[i+272+8>>2]=c[i+128+8>>2],c[i+272+12>>2]=c[i+128+12>>2],c[i+272+16>>2]=c[i+112>>2],c[i+272+16+4>>2]=c[i+112+4>>2],c[i+272+16+8>>2]=c[i+112+8>>2],c[i+272+16+12>>2]=c[i+112+12>>2],c[i+272+32>>2]=c[i+64>>2],c[i+272+32+4>>2]=c[i+64+4>>2],c[i+272+32+8>>2]=c[i+64+8>>2],c[i+272+32+12>>2]=c[i+64+12>>2],c[i+272+48>>2]=c[i+32>>2],c[i+272+48+4>>2]=c[i+32+4>>2],c[i+272+48+8>>2]=c[i+32+8>>2],c[i+272+48+12>>2]=c[i+32+12>>2],c[i+272+64>>2]=c[i+80>>2],c[i+272+64+4>>2]=c[i+80+4>>2],c[i+272+64+8>>2]=c[i+80+8>>2],c[i+272+64+12>>2]=c[i+80+12>>2],c[i+272+80>>2]=c[i+16>>2],c[i+272+80+4>>2]=c[i+16+4>>2],c[i+272+80+8>>2]=c[i+16+8>>2],c[i+272+80+12>>2]=c[i+16+12>>2],c[i+272+96>>2]=c[i+96>>2],c[i+272+96+4>>2]=c[i+96+4>>2],c[i+272+96+8>>2]=c[i+96+8>>2],c[i+272+96+12>>2]=c[i+96+12>>2],c[i+272+112>>2]=c[i+48>>2],c[i+272+112+4>>2]=c[i+48+4>>2],c[i+272+112+8>>2]=c[i+48+8>>2],c[i+272+112+12>>2]=c[i+48+12>>2],!((d|0)==0&(e|0)==0)):0){f=i+272|0;while(1){a[b>>0]=a[f>>0]|0;d=lg(d|0,e|0,-1,-1)|0;e=z;if((d|0)==0&(e|0)==0)break;else{f=f+1|0;b=b+1|0}}}l=j;return 0}
function Jb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=l;f=l=l+63&-64;l=l+128|0;e=Rg(c)|0;c=(c<<24>>24)-((c<<24>>24&0-(e&255))<<1)&255;Lf(a);Re(a,2232+(b*960|0)|0,zh(c,1)|0);Re(a,2232+(b*960|0)+120|0,zh(c,2)|0);Re(a,2232+(b*960|0)+240|0,zh(c,3)|0);Re(a,2232+(b*960|0)+360|0,zh(c,4)|0);Re(a,2232+(b*960|0)+480|0,zh(c,5)|0);Re(a,2232+(b*960|0)+600|0,zh(c,6)|0);Re(a,2232+(b*960|0)+720|0,zh(c,7)|0);Re(a,2232+(b*960|0)+840|0,zh(c,8)|0);tc(f,a+40|0);tc(f+40|0,a);fc(f+80|0,a+80|0);Re(a,f,e);l=d;return}function Kb(a,b,d,e,f,g,h,i,j,k,m,n){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;m=m|0;n=n|0;k=l;l=l+336|0;Hg(k+264|0,64,0,m,n)|0;dh(k,k+264|0)|0;_d(k+264|0,64);kg(k,h,i,j)|0;ze(k+256|0,i,j);kg(k,k+256|0,8,0)|0;nf(a,e,f,g,m,1,0,n)|0;kg(k,a,f,g)|0;ze(k+256|0,f,g);kg(k,k+256|0,8,0)|0;ch(k,b)|0;_d(k,256);if(d|0){c[d>>2]=16;c[d+4>>2]=0}l=k;return 0}function Lb(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;i=l;h=l=l+63&-64;l=l+480|0;g=(b|0)==0?c:b;c=(c|0)==0?g:c;if(!g)Z();if(!(gh(h+448|0,e,f)|0)){Ig(h,0,0,64)|0;xg(h,h+448|0,32,0)|0;_d(h+448|0,32);xg(h,f,32,0)|0;xg(h,d,32,0)|0;Yg(h,h+384|0,64)|0;_d(h,384);b=0;do{a[c+b>>0]=a[h+384+b>>0]|0;a[g+b>>0]=a[h+384+(b+32)>>0]|0;b=b+1|0}while((b|0)!=32);_d(h+384|0,64);b=0}else b=-1;l=i;return b|0}function Mb(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;i=l;h=l=l+63&-64;l=l+480|0;g=(b|0)==0?c:b;c=(c|0)==0?g:c;if(!g)Z();if(!(gh(h+448|0,e,f)|0)){Ig(h,0,0,64)|0;xg(h,h+448|0,32,0)|0;_d(h+448|0,32);xg(h,d,32,0)|0;xg(h,f,32,0)|0;Yg(h,h+384|0,64)|0;_d(h,384);b=0;do{a[g+b>>0]=a[h+384+b>>0]|0;a[c+b>>0]=a[h+384+(b+32)>>0]|0;b=b+1|0}while((b|0)!=32);_d(h+384|0,64);b=0}else b=-1;l=i;return b|0}function Nb(b,d,e,f,g,h,i){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0,o=0;o=l;k=l=l+63&-64;l=l+128|0;j=b;m=j+102|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(m|0));if(!(f>>>0>0|(f|0)==0&e>>>0>4294967295)){jb(g,h,i,k+8|0,k+4|0,k);lf(k+88|0,32);if((rc(c[k+8>>2]|0,c[k>>2]|0,c[k+4>>2]|0,k+88|0,k+24|0)|0)!=0?(Qh(k+12|0),m=(wb(k+12|0,d,e,k+24|0,b)|0)==0,Rh(k+12|0),!m):0)b=0;else{b=22;n=4}}else{b=27;n=4}if((n|0)==4){c[8326]=b;b=-1}l=o;return b|0}function Ob(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=l;h=l=l+63&-64;l=l+64|0;if((c+-1&255)>63)Z();a[h>>0]=c;a[h+1>>0]=0;a[h+2>>0]=1;a[h+3>>0]=1;_g(h+4|0);ff(h+8|0);c=h+16|0;f=c+16|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(f|0));if(!d){c=h+32|0;f=c+16|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(f|0))}else pf(h,d);if(!e){c=h+48|0;f=c+16|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(f|0))}else of(h,e);Cd(b,h);l=g;return}function Pb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=b+e|0;d=d&255;if((e|0)>=67){while(b&3){a[b>>0]=d;b=b+1|0}g=d|d<<8|d<<16|d<<24;while((b|0)<=((f&-4)-64|0)){c[b>>2]=g;c[b+4>>2]=g;c[b+8>>2]=g;c[b+12>>2]=g;c[b+16>>2]=g;c[b+20>>2]=g;c[b+24>>2]=g;c[b+28>>2]=g;c[b+32>>2]=g;c[b+36>>2]=g;c[b+40>>2]=g;c[b+44>>2]=g;c[b+48>>2]=g;c[b+52>>2]=g;c[b+56>>2]=g;c[b+60>>2]=g;b=b+64|0}while((b|0)<(f&-4|0)){c[b>>2]=g;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return f-e|0}function Qb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+48|0;Gb(a,b+40|0,b);Fb(a+40|0,b+40|0,b);la(a+80|0,a,c+40|0);la(a+40|0,a+40|0,c);la(a+120|0,c+120|0,b+120|0);la(a,b+80|0,c+80|0);Gb(e,a,a);Fb(a,a+80|0,a+40|0);Gb(a+40|0,a+80|0,a+40|0);Fb(a+80|0,e,a+120|0);Gb(a+120|0,e,a+120|0);l=d;return}function Rb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+48|0;Gb(a,b+40|0,b);Fb(a+40|0,b+40|0,b);la(a+80|0,a,c);la(a+40|0,a+40|0,c+40|0);la(a+120|0,c+120|0,b+120|0);la(a,b+80|0,c+80|0);Gb(e,a,a);Fb(a,a+80|0,a+40|0);Gb(a+40|0,a+80|0,a+40|0);Gb(a+80|0,e,a+120|0);Fb(a+120|0,e,a+120|0);l=d;return}function Sb(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=l;h=l=l+63&-64;l=l+192|0;if((c+-1&255)>63)Z();if((e+-1&255)>63|(d|0)==0)Z();else{a[h+128>>0]=c;a[h+128+1>>0]=e;a[h+128+2>>0]=1;a[h+128+3>>0]=1;_g(h+128+4|0);ff(h+128+8|0);c=h+128+16|0;f=c+48|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(f|0));Cd(b,h+128|0);Pb(h+(e&255)|0,0,(e<<24>>24<0?0:128-(e&255)|0)|0)|0;fb(h|0,d|0,e&255|0)|0;Bb(b,h,128,0);_d(h,128);l=g;return}}function Tb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;e=l;f=l=l+63&-64;l=l+2048|0;if((a|0)!=0&(b|0)!=0){Dh(f,(c[(c[b>>2]|0)+4>>2]|0)+(c[b+16>>2]<<10)+-1024|0);if((c[b+20>>2]|0)>>>0>1){d=1;do{g=c[b+16>>2]|0;g=g+-1+(O(g,d)|0)|0;ae(f,(c[(c[b>>2]|0)+4>>2]|0)+(g<<10)|0);d=d+1|0}while(d>>>0<(c[b+20>>2]|0)>>>0)}We(f+1024|0,f);Qa(c[a>>2]|0,c[a+4>>2]|0,f+1024|0,1024);_d(f,1024);_d(f+1024|0,1024);Mf(b,c[a+56>>2]&1);kh(c[b>>2]|0)}l=e;return}function Ub(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;f=l;e=l=l+63&-64;l=l+48|0;d=ib(a)|0;if(!d)if((b+-1|0)>>>0<=1){g=c[a+44>>2]|0;d=c[a+48>>2]|0;g=((g>>>0<d<<3>>>0?d<<3:g)>>>0)/(d<<2>>>0)|0;h=O(g,d<<2)|0;c[e>>2]=0;c[e+4>>2]=c[a+40>>2];c[e+8>>2]=h;c[e+12>>2]=g;c[e+16>>2]=g<<2;c[e+20>>2]=d;c[e+24>>2]=c[a+52>>2];c[e+28>>2]=b;d=fd(e,a)|0;if(!d){d=xb(e)|0;if(!d){Tb(a,e);d=0}}}else d=-26;l=f;return d|0}function Vb(a,b,d,e,f,g,h,i,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var m=0,n=0;n=l;m=l=l+63&-64;l=l+16|0;Pb(a|0,0,b|0)|0;do if(!((g|d)>>>0>0|(g|d|0)==0&(f|b)>>>0>4294967295))if(d>>>0<0|(d|0)==0&b>>>0<16){c[8326]=22;a=-1;break}else{jb(i,j,k,m+8|0,m+4|0,m);k=zf(1,0,c[m+8>>2]|0)|0;a=id(e,f,h,32,k,z,c[m>>2]|0,c[m+4>>2]|0,a,b)|0;break}else{c[8326]=27;a=-1}while(0);l=n;return a|0}function Wb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+48|0;Gb(a,b+40|0,b);Fb(a+40|0,b+40|0,b);la(a+80|0,a,c+40|0);la(a+40|0,a+40|0,c);la(a+120|0,c+80|0,b+120|0);Gb(e,b+80|0,b+80|0);Fb(a,a+80|0,a+40|0);Gb(a+40|0,a+80|0,a+40|0);Fb(a+80|0,e,a+120|0);Gb(a+120|0,e,a+120|0);l=d;return}function Xb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+48|0;Gb(a,b+40|0,b);Fb(a+40|0,b+40|0,b);la(a+80|0,a,c);la(a+40|0,a+40|0,c+40|0);la(a+120|0,c+80|0,b+120|0);Gb(e,b+80|0,b+80|0);Fb(a,a+80|0,a+40|0);Gb(a+40|0,a+80|0,a+40|0);Gb(a+80|0,e,a+120|0);Fb(a+120|0,e,a+120|0);l=d;return}function Yb(a,b,e,f,g,h,i,j,k,m,n,o){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;m=m|0;n=n|0;o=o|0;m=l;l=l+48|0;c[m>>2]=0;Ea(m+16|0,n,o,0)|0;o=d[n+16+4>>0]|d[n+16+4+1>>0]<<8|d[n+16+4+2>>0]<<16|d[n+16+4+3>>0]<<24;c[m+4>>2]=d[n+16>>0]|d[n+16+1>>0]<<8|d[n+16+2>>0]<<16|d[n+16+3>>0]<<24;c[m+4+4>>2]=o;yb(a,b,e,f,g,h,i,j,k,0,m,m+16|0)|0;_d(m+16|0,32);l=m;return 0}function Zb(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0;j=l;k=l=l+63&-64;l=l+384|0;if((b|0)==0&((e|0)!=0|(f|0)!=0))Z();if(!a)Z();if((d+-1&255)>63)Z();if(!((c|0)!=0|g<<24>>24!=0^1))Z();if((g&255)>64)Z();if(g<<24>>24)nb(k,d,c,g,h,i);else Ob(k,d,h,i);Bb(k,b,e,f);Db(k,a,d)|0;l=j;return}function _b(a,b,e,f,g,h,i,j,k,m,n){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;m=m|0;n=n|0;b=l;l=l+48|0;c[b>>2]=0;Ea(b+16|0,m,n,0)|0;n=d[m+16+4>>0]|d[m+16+4+1>>0]<<8|d[m+16+4+2>>0]<<16|d[m+16+4+3>>0]<<24;c[b+4>>2]=d[m+16>>0]|d[m+16+1>>0]<<8|d[m+16+2>>0]<<16|d[m+16+3>>0]<<24;c[b+4+4>>2]=n;m=lb(a,0,e,f,g,h,i,j,k,b,b+16|0)|0;_d(b+16|0,32);l=b;return m|0}function $b(b,d,e,f,g,h,i){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0;n=l;k=l=l+63&-64;l=l+16|0;j=b;m=j+128|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(m|0));do if(!((h|f)>>>0>0|(h|f|0)==0&(g|e)>>>0>4294967295|i>>>0>2147484671))if(h>>>0<0|(h|0)==0&g>>>0<3|i>>>0<8192){c[8326]=22;b=-1;break}else{lf(k,16);b=((Tf(g,i>>>10,d,e,k,b)|0)!=0)<<31>>31;break}else{c[8326]=27;b=-1}while(0);l=n;return b|0}function ac(b,d,e,f,g,h,i){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,m=0,n=0;n=l;k=l=l+63&-64;l=l+16|0;j=b;m=j+128|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(m|0));do if(!((h|f)>>>0>0|(h|f|0)==0&(g|e)>>>0>4294967295|i>>>0>2147484671))if(h>>>0<0|(h|0)==0&g>>>0<3|i>>>0<8192){c[8326]=22;b=-1;break}else{lf(k,16);b=((Uf(g,i>>>10,d,e,k,b)|0)!=0)<<31>>31;break}else{c[8326]=27;b=-1}while(0);l=n;return b|0}function bc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;e=c[a+32>>2]|0;i=c[a+32+4>>2]|0;d=Cf(e|0,i|0,3)|0;if(0<0|0==0&(d&56)>>>0<56){fb(a+40+(d&63)|0,33915,56-(d&63)|0)|0;f=a+40|0;g=b+256|0;h=a;d=i}else{fb(a+40+(d&63)|0,33915,64-(d&63)|0)|0;pa(a,a+40|0,b,b+256|0);d=a+40|0;e=d+56|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(e|0));f=a+40|0;g=b+256|0;h=a;e=c[a+32>>2]|0;d=c[a+32+4>>2]|0}Qc(a+96|0,e,d);pa(h,f,b,g);return}function cc(b,d){b=b|0;d=d|0;c[b>>2]=(Wg(d)|0)&67108863;c[b+4>>2]=(Wg(d+3|0)|0)>>>2&67108611;c[b+8>>2]=(Wg(d+6|0)|0)>>>4&67092735;c[b+12>>2]=(Wg(d+9|0)|0)>>>6&66076671;c[b+16>>2]=(Wg(d+12|0)|0)>>>8&1048575;c[b+20>>2]=0;c[b+20+4>>2]=0;c[b+20+8>>2]=0;c[b+20+12>>2]=0;c[b+20+16>>2]=0;c[b+40>>2]=Wg(d+16|0)|0;c[b+44>>2]=Wg(d+20|0)|0;c[b+48>>2]=Wg(d+24|0)|0;c[b+52>>2]=Wg(d+28|0)|0;c[b+56>>2]=0;c[b+56+4>>2]=0;a[b+80>>0]=0;return}function dc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=l;h=l=l+63&-64;l=l+464|0;qb(h+208|0,a,b)|0;Cg(h+208|0,c,d,0)|0;if(f|0){a=0;b=0;do{a=a+1|0;mg(h+448|0,a);fb(h|0,h+208|0,208)|0;Cg(h,h+448|0,4,0)|0;ye(h,h+416|0)|0;d=f-b|0;fb(e+b|0,h+416|0,(d>>>0<32?d:32)|0)|0;b=a<<5}while(b>>>0<f>>>0)}_d(h+208|0,208);l=g;return}function ec(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;Pb(a|0,0,b|0)|0;do if(!((g|d|j)>>>0>0|(g|d|j|0)==0&(f|b|i)>>>0>4294967295|k>>>0>2147484671)){if(d>>>0<0|(d|0)==0&b>>>0<16|(j>>>0<0|(j|0)==0&i>>>0<3)|k>>>0<8192){c[8326]=22;a=-1;break}if((l|0)==2){a=((Ef(i,k>>>10,e,f,h,a,b)|0)!=0)<<31>>31;break}else{c[8326]=22;a=-1;break}}else{c[8326]=27;a=-1}while(0);return a|0}function fc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;l=0-(c[b+4>>2]|0)|0;k=0-(c[b+8>>2]|0)|0;j=0-(c[b+12>>2]|0)|0;i=0-(c[b+16>>2]|0)|0;h=0-(c[b+20>>2]|0)|0;g=0-(c[b+24>>2]|0)|0;f=0-(c[b+28>>2]|0)|0;e=0-(c[b+32>>2]|0)|0;d=0-(c[b+36>>2]|0)|0;c[a>>2]=0-(c[b>>2]|0);c[a+4>>2]=l;c[a+8>>2]=k;c[a+12>>2]=j;c[a+16>>2]=i;c[a+20>>2]=h;c[a+24>>2]=g;c[a+28>>2]=f;c[a+32>>2]=e;c[a+36>>2]=d;return}function gc(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;k=l;h=l=l+63&-64;l=l+96|0;if(!(zg(h+32|0,h)|0)){g=b;i=h+32|0;j=g+32|0;do{a[g>>0]=a[i>>0]|0;g=g+1|0;i=i+1|0}while((g|0)<(j|0));Ed(h+64|0,h+32|0,f);b=Ud(b+32|0,c,d,e,h+64|0,f,h)|0;_d(h,32);_d(h+32|0,32);_d(h+64|0,24)}else b=-1;l=k;return b|0}function hc(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;Pb(a|0,0,b|0)|0;do if(!((g|d|j)>>>0>0|(g|d|j|0)==0&(f|b|i)>>>0>4294967295|k>>>0>2147484671)){if(d>>>0<0|(d|0)==0&b>>>0<16|(j>>>0<0|(j|0)==0&i>>>0<3)|k>>>0<8192){c[8326]=22;a=-1;break}if((l|0)==1){a=((Hf(i,k>>>10,e,f,h,a,b)|0)!=0)<<31>>31;break}else{c[8326]=22;a=-1;break}}else{c[8326]=27;a=-1}while(0);return a|0}function ic(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if(!d)b=0;else{i=a[b>>0]|0;e=a[c>>0]|0;a:do if(!(i<<24>>24)){d=e&255;b=i&255}else{j=b;h=d;f=e;g=i;d=e&255;b=i&255;do{h=h+-1|0;if(!(g<<24>>24==f<<24>>24&((h|0)!=0&f<<24>>24!=0)))break a;j=j+1|0;c=c+1|0;g=a[j>>0]|0;b=g&255;f=a[c>>0]|0;d=f&255}while(g<<24>>24!=0)}while(0);b=b-d|0}return b|0}function jc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=l;f=l=l+63&-64;l=l+1024|0;if(c[b+20>>2]|0){d=0;do{pg(a+64|0,0);pg(a+68|0,d);Qa(f,1024,a,72);Me((c[(c[b>>2]|0)+4>>2]|0)+((O(c[b+16>>2]|0,d)|0)<<10)|0,f);pg(a+64|0,1);Qa(f,1024,a,72);Me((c[(c[b>>2]|0)+4>>2]|0)+((O(c[b+16>>2]|0,d)|0)+1<<10)|0,f);d=d+1|0}while(d>>>0<(c[b+20>>2]|0)>>>0)}_d(f,1024);l=e;return}function kc(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;h=l;i=l=l+63&-64;l=l+384|0;if((b|0)==0&((e|0)!=0|(f|0)!=0))Z();if(!a)Z();if((d+-1&255)>63)Z();if(!((c|0)!=0|g<<24>>24!=0^1))Z();if((g&255)>64)Z();if(g<<24>>24)Sb(i,d,c,g);else Kc(i,d);Bb(i,b,e,f);Db(i,a,d)|0;l=h;return}function lc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=l;d=l=l+63&-64;l=l+16|0;do if((((a|0)!=0?(b|0)!=0:0)?((b<<10>>>0)/(b>>>0)|0|0)==1024:0)?(f=ja(12)|0,c[a>>2]=f,(f|0)!=0):0){f=wf(d,b<<10)|0;c[8326]=f;if(f|0){c[d>>2]=0;d=-22;break}d=c[d>>2]|0;if(d){c[c[a>>2]>>2]=d;c[(c[a>>2]|0)+4>>2]=d;c[(c[a>>2]|0)+8>>2]=b<<10;d=0}else d=-22}else d=-22;while(0);l=e;return d|0}function mc(a,b){a=a|0;b=b|0;var c=0,d=0;c=l;d=l=l+63&-64;l=l+48|0;qa(a,b);qa(a+80|0,b+40|0);oa(a+120|0,b+80|0);Gb(a+40|0,b,b+40|0);qa(d,a+40|0);Gb(a+40|0,a+80|0,a);Fb(a+80|0,a+80|0,a);Fb(a,d,a+40|0);Fb(a+120|0,a+120|0,a+80|0);l=c;return}function nc(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;h=l;i=l=l+63&-64;l=l+16|0;Md(a+64|0,d|0,e|0)|0;Of(a,i,a+64|0,e,f,g)|0;if((c[i>>2]|0)==64&(c[i+4>>2]|0)==0)if(b|0){a=lg(e|0,f|0,64,0)|0;c[b>>2]=a;c[b+4>>2]=z;a=0}else a=0;else{if(b|0){c[b>>2]=0;c[b+4>>2]=0}i=lg(e|0,f|0,64,0)|0;Pb(a|0,0,i|0)|0;a=-1}l=h;return a|0}function oc(a,b){a=a|0;b=b|0;var c=0,d=0;d=l;c=l=l+63&-64;l=l+240|0;if(!(Za(c+80|0,b)|0)){Gf(c);Fb(c,c,c+80+40|0);Ga(c,c);Gf(c+40|0);Gb(c+40|0,c+40|0,c+80+40|0);la(c+40|0,c+40|0,c);Ja(a,c+40|0);a=0}else a=-1;l=d;return a|0}function pc(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;e=lg(e|0,f|0,-64,-1)|0;f=z;do if(f>>>0>0|(f|0)==0&e>>>0>4294967231)h=7;else{if(Wf(d,d+64|0,e,f,g)|0){Pb(a|0,0,e|0)|0;h=7;break}if(b|0){c[b>>2]=e;c[b+4>>2]=f}Md(a|0,d+64|0,e|0)|0;e=0}while(0);if((h|0)==7)if(!b)e=-1;else{c[b>>2]=0;c[b+4>>2]=0;e=-1}return e|0}function qc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=a[b>>0]|0;a:do if((i+-48&255)<=9){g=0;h=b;f=i;while(1){e=(f<<24>>24)+-48|0;f=g*10|0;if(!(g>>>0<429496730&(e>>>0>~f>>>0^1))){e=0;break a}g=(e>>>0>~f>>>0?0:e)+f|0;e=h+1|0;f=a[e>>0]|0;if((f+-48&255)>9)break;else h=e}if((e|0)!=(b|0)?(h|0)==(b|0)|i<<24>>24!=48:0)c[d>>2]=g;else e=0}else e=0;while(0);return e|0}function rc(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;if((((b>>>0<=63?(j=ef(d|0,0,c|0,0)|0,k=z,!(k>>>0>0|(k|0)==0&j>>>0>1073741823)):0)?(a[f>>0]=36,a[f+1>>0]=55,a[f+2>>0]=36,a[f+3>>0]=a[35171+b>>0]|0,g=gd(f+4|0,54,c,30)|0,(g|0)!=0):0)?(h=gd(g,f+58-g|0,d,30)|0,(h|0)!=0):0)?(i=Wc(h,f+58-h|0,e)|0,(i|0)!=0&i>>>0<(f+58|0)>>>0):0)a[i>>0]=0;else f=0;return f|0}function sc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=Cf(c[a+72>>2]|0,c[a+72+4>>2]|0,3)|0;if(0<0|0==0&(d&112)>>>0<112){fb(a+80+(d&127)|0,33979,112-(d&127)|0)|0;d=a+80|0;e=b+640|0;f=a}else{fb(a+80+(d&127)|0,33979,128-(d&127)|0)|0;ia(a,a+80|0,b,b+640|0);d=a+80|0;e=d+112|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(e|0));d=a+80|0;e=b+640|0;f=a}ve(a+192|0,a+64|0,16);ia(f,d,b,e);return}function tc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;l=c[b+4>>2]|0;k=c[b+8>>2]|0;j=c[b+12>>2]|0;i=c[b+16>>2]|0;h=c[b+20>>2]|0;g=c[b+24>>2]|0;f=c[b+28>>2]|0;e=c[b+32>>2]|0;d=c[b+36>>2]|0;c[a>>2]=c[b>>2];c[a+4>>2]=l;c[a+8>>2]=k;c[a+12>>2]=j;c[a+16>>2]=i;c[a+20>>2]=h;c[a+24>>2]=g;c[a+28>>2]=f;c[a+32>>2]=e;c[a+36>>2]=d;return}function uc(b,c,d,e,f,g){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;i=l;h=l=l+63&-64;l=l+32|0;if(!(e>>>0<0|(e|0)==0&d>>>0<32)?(Id(h,32,0,f,g)|0,j=lg(d|0,e|0,-32,-1)|0,(Yf(c+16|0,c+32|0,j,z,h)|0)==0):0){Nf(b,c,d,e,f,g)|0;c=b+32|0;do{a[b>>0]=0;b=b+1|0}while((b|0)<(c|0));b=0}else b=-1;l=i;return b|0}function vc(a){a=a|0;return ((0-((0-(a^47)|0)>>>8&63^63|(0-(a^43)|0)>>>8&62^62|((a+65439|0)>>>8^255)&a+185&((122-a|0)>>>8&255^255)|((a+-65|0)>>>8^255)&a+-65&((90-a|0)>>>8&255^255)|((a+65488|0)>>>8^255)&a+4&((57-a|0)>>>8&255^255))|0)>>>8&255^255)&(0-(a^65)|0)>>>8|((0-(a^47)|0)>>>8&63^63|(0-(a^43)|0)>>>8&62^62|((a+65439|0)>>>8^255)&a+185&((122-a|0)>>>8&255^255)|((a+-65|0)>>>8^255)&a+-65&((90-a|0)>>>8&255^255)|((a+65488|0)>>>8^255)&a+4&((57-a|0)>>>8&255^255))|0}function wc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;f=0;h=0;i=0;a:while(1){while(1){g=vc(a[e>>0]|0)|0;if((g|0)==255){j=7;break a}e=e+1|0;h=g+(h<<6)|0;g=f+6|0;if(g>>>0>7)break;else f=g}f=f+-2|0;if(i>>>0>=(c[d>>2]|0)>>>0){e=0;break}a[b>>0]=h>>>f;b=b+1|0;i=i+1|0}if((j|0)==7)if(f>>>0<=4?((1<<f)+-1&h|0)==0:0)c[d>>2]=i;else e=0;return e|0}function xc(b){b=b|0;var d=0,e=0,f=0;a:do if(!(b&3)){d=b;f=4}else{d=b;e=b;while(1){if(!(a[d>>0]|0)){d=e;break a}d=d+1|0;e=d;if(!(e&3)){f=4;break}}}while(0);if((f|0)==4){while(1){e=c[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((a[d>>0]|0)!=0)}return d-b|0}function yc(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=l;f=l=l+63&-64;l=l+128|0;if((mb(b,0,102)|0)==(b+101|0)){Qh(f);e=f+12|0;g=e+102|0;do{a[e>>0]=0;e=e+1|0}while((e|0)<(g|0));d=(wb(f,c,d,b,f+12|0)|0)==0;Rh(f);if(!d){e=Pc(f+12|0,b,102)|0;_d(f+12|0,102)}else e=-1}else e=-1;l=h;return e|0}function zc(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;j=l;l=l+96|0;if(!(jh(j+32|0,j)|0)){g=b;h=j+32|0;i=g+32|0;do{a[g>>0]=a[h>>0]|0;g=g+1|0;h=h+1|0}while((g|0)<(i|0));Ed(j+64|0,j+32|0,f);b=Ae(b+32|0,c,d,e,j+64|0,f,j)|0;_d(j,32);_d(j+32|0,32);_d(j+64|0,24)}else b=-1;l=j;return b|0}function Ac(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;do if(!(c>>>0>64|(d+-1|0)>>>0>63)){if(d>>>0>=256)ba(33636,33656,75,33829);if(c>>>0>=256)ba(33736,33656,76,33829);if((b|0)==0|(c|0)==0){Ob(a,d&255,e,f);a=0;break}else{nb(a,d&255,b,c&255,e,f);a=0;break}}else a=-1;while(0);return a|0}function Bc(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=l;g=l=l+63&-64;l=l+240|0;e=g+200|0;d=e+32|0;do{a[e>>0]=a[c>>0]|0;e=e+1|0;c=c+1|0}while((e|0)<(d|0));a[g+200>>0]=a[g+200>>0]&-8;a[g+200+31>>0]=a[g+200+31>>0]&63|64;ab(g+40|0,g+200|0);yd(g,g+40+40|0,g+40+80|0);Ja(b,g);l=f;return 0}function Cc(a){a=a|0;var b=0,c=0,e=0,f=0,g=0,h=0,i=0;g=d[a+7>>0]|0;h=zf(d[a+6>>0]|0|0,0,8)|0;i=z;f=zf(d[a+5>>0]|0|0,0,16)|0;i=i|z;e=zf(d[a+4>>0]|0|0,0,24)|0;i=i|z|(d[a+3>>0]|0);c=zf(d[a+2>>0]|0|0,0,40)|0;i=i|z;b=zf(d[a+1>>0]|0|0,0,48)|0;i=i|z;a=zf(d[a>>0]|0|0,0,56)|0;z=i|z;return h|g|f|e|c|b|a|0}function Dc(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if(g>>>0>0|(g|0)==0&f>>>0>15){d=lg(f|0,g|0,-16,-1)|0;a=_b(a,0,e,d,z,e+f+-16|0,h,i,j,k,l)|0}else a=-1;if(b|0){k=(a|0)==0;g=lg(f|0,g|0,-16,-1)|0;c[b>>2]=k?g:0;c[b+4>>2]=k?z:0}return a|0}function Ec(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if(g>>>0>0|(g|0)==0&f>>>0>15){d=lg(f|0,g|0,-16,-1)|0;a=lb(a,0,e,d,z,e+f+-16|0,h,i,j,k,l)|0}else a=-1;if(b|0){k=(a|0)==0;g=lg(f|0,g|0,-16,-1)|0;c[b>>2]=k?g:0;c[b+4>>2]=k?z:0}return a|0}function Fc(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if(g>>>0>0|(g|0)==0&f>>>0>15){d=lg(f|0,g|0,-16,-1)|0;a=zb(a,0,e,d,z,e+f+-16|0,h,i,j,k,l)|0}else a=-1;if(b|0){k=(a|0)==0;g=lg(f|0,g|0,-16,-1)|0;c[b>>2]=k?g:0;c[b+4>>2]=k?z:0}return a|0}function Gc(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0;if(!(f>>>0<2147483647&f<<1>>>0<c>>>0))Z();if(!f)c=0;else{g=0;c=0;while(1){h=d[e+g>>0]|0;a[b+c>>0]=(h>>>4)+87+(((h>>>4)+65526|0)>>>8&217);a[b+(c|1)>>0]=(((h&15)<<8)+22272+((h&15)+65526&55552)|0)>>>8;c=g+1|0;if((c|0)==(f|0)){c=f<<1;break}else{g=c;c=c<<1}}}a[b+c>>0]=0;return b|0}function Hc(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0;do if(!((b+-1|0)>>>0>63|g>>>0>64)){if(b>>>0>=256)ba(33636,33656,35,33756);if(g>>>0<256){Zb(a,c,f,b&255,d,e,g&255,h,i);j=0;break}else ba(33736,33656,36,33756)}else j=-1;while(0);return j|0}function Ic(a,b){a=a|0;b=b|0;c[a>>2]=1634760805;c[a+4>>2]=857760878;c[a+8>>2]=2036477234;c[a+12>>2]=1797285236;c[a+16>>2]=Wg(b)|0;c[a+20>>2]=Wg(b+4|0)|0;c[a+24>>2]=Wg(b+8|0)|0;c[a+28>>2]=Wg(b+12|0)|0;c[a+32>>2]=Wg(b+16|0)|0;c[a+36>>2]=Wg(b+20|0)|0;c[a+40>>2]=Wg(b+24|0)|0;c[a+44>>2]=Wg(b+28|0)|0;return}function Jc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;do if(!(c>>>0>64|(d+-1|0)>>>0>63)){if(d>>>0>=256)ba(33636,33656,52,33797);if(c>>>0>=256)ba(33736,33656,53,33797);if((b|0)==0|(c|0)==0){Kc(a,d&255);a=0;break}else{Sb(a,d&255,b,c&255);a=0;break}}else a=-1;while(0);return a|0}function Kc(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;e=l;f=l=l+63&-64;l=l+64|0;if((c+-1&255)>63)Z();else{a[f>>0]=c;a[f+1>>0]=0;a[f+2>>0]=1;a[f+3>>0]=1;_g(f+4|0);ff(f+8|0);c=f+16|0;d=c+48|0;do{a[c>>0]=0;c=c+1|0}while((c|0)<(d|0));Cd(b,f);l=e;return}}function Lc(b,c){b=b|0;c=c|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+128|0;Ga(f+80|0,c+80|0);la(f+40|0,c,f+80|0);la(f,c+40|0,f+80|0);Ja(b,f);c=(Ze(f+40|0)|0)<<7;a[b+31>>0]=(d[b+31>>0]|0)^c;l=e;return}function Mc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+16|0;c[g+8>>2]=b;c[g+4>>2]=d;c[g>>2]=0;if(e|0){b=0;do{c[g>>2]=(a[(c[g+4>>2]|0)+b>>0]^a[(c[g+8>>2]|0)+b>>0])&255|c[g>>2];b=b+1|0}while((b|0)!=(e|0))}l=f;return (((c[g>>2]|0)+511|0)>>>8&1)+-1|0}function Nc(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if(f>>>0>4294967295|(f|0)==-1&e>>>0>4294967279)Z();Yb(a,a+e|0,0,d,e,f,g,h,i,0,k,l)|0;if(b|0){k=lg(e|0,f|0,16,0)|0;c[b>>2]=k;c[b+4>>2]=z}return 0}function Oc(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if(f>>>0>4294967295|(f|0)==-1&e>>>0>4294967279)Z();yb(a,a+e|0,0,d,e,f,g,h,i,0,k,l)|0;if(b|0){k=lg(e|0,f|0,16,0)|0;c[b>>2]=k;c[b+4>>2]=z}return 0}function Pc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0;g=l;h=l=l+63&-64;l=l+16|0;c[h+4>>2]=b;c[h>>2]=e;a[h+8>>0]=0;if(f|0){b=0;do{a[h+8>>0]=a[h+8>>0]|a[(c[h>>2]|0)+b>>0]^a[(c[h+4>>2]|0)+b>>0];b=b+1|0}while((b|0)!=(f|0))}l=g;return (((d[h+8>>0]|0)+511|0)>>>8&1)+-1|0}function Qc(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;a[b+7>>0]=c;e=Cf(c|0,d|0,8)|0;a[b+6>>0]=e;e=Cf(c|0,d|0,16)|0;a[b+5>>0]=e;e=Cf(c|0,d|0,24)|0;a[b+4>>0]=e;a[b+3>>0]=d;e=Cf(c|0,d|0,40)|0;a[b+2>>0]=e;e=Cf(c|0,d|0,48)|0;a[b+1>>0]=e;d=Cf(c|0,d|0,56)|0;a[b>>0]=d;return}function Rc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=l;g=l=l+63&-64;l=l+32|0;if(d>>>0<0|(d|0)==0&c>>>0<48)a=-1;else{c=lg(c|0,d|0,-32,-1)|0;d=z;Ed(g,b,e);a=zd(a,b+32|0,c,d,g,b,f)|0}l=h;return a|0}function Sc(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;j=l;i=l=l+63&-64;l=l+32|0;if(!(Jd(i,g,h)|0)){a=Qe(a,b,c,d,e,f,i)|0;_d(i,32)}else a=-1;l=j;return a|0}function Tc(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if(f>>>0>4294967295|(f|0)==-1&e>>>0>4294967279)Z();Kb(a,a+e|0,0,d,e,f,g,h,i,0,k,l)|0;if(b|0){k=lg(e|0,f|0,16,0)|0;c[b>>2]=k;c[b+4>>2]=z}return 0}function Uc(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;j=l;i=l=l+63&-64;l=l+32|0;if(!(Jd(i,g,h)|0)){Ue(a,b,c,d,e,f,i)|0;_d(i,32);a=0}else a=-1;l=j;return a|0}function Vc(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;i=l;j=l=l+63&-64;l=l+80|0;if(!((c|0)==0&(d|0)==0)){pg(j+64|0,f);pg(j+64+4|0,g);Ic(j,h);he(j,e,j+64|0);va(j,b,a,c,d);_d(j,64)}l=i;return 0}function Wc(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0;e=0;while(1){if(e>>>0<32){f=0;g=0}else break;do{h=e;e=e+1|0;g=(d[c+h>>0]|0)<<f|g;f=f+8|0}while(e>>>0<32&f>>>0<24);i=a;a=gd(a,b,g,f)|0;h=(a|0)==0;b=(h?0:i-a|0)+b|0;if(h){a=0;break}}return a|0}function Xc(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;do if(!((b+-1|0)>>>0>63|g>>>0>64)){if(b>>>0>=256)ba(33636,33656,18,33709);if(g>>>0<256){kc(a,c,f,b&255,d,e,g&255);h=0;break}else ba(33736,33656,19,33709)}else h=-1;while(0);return h|0}function Yc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=l;f=l=l+63&-64;l=l+16|0;g=0;e=0;while(1){if(eg(f,a[d>>0]|0)|0){e=3;break}d=d+1|0;g=c[f>>2]<<e|g;e=e+6|0;if(e>>>0>=30){e=5;break}}if((e|0)==3){c[b>>2]=0;d=0}else if((e|0)==5)c[b>>2]=g;l=h;return d|0}function Zc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;Kf(c,a+((d<<5)+-16<<2)|0);if(d<<1|0){e=0;do{g=e<<4;df(c,a+(g<<2)|0);Ca(c);f=e<<3;Kf(b+(f<<2)|0,c);df(c,a+((g|16)<<2)|0);Ca(c);Kf(b+(f+(d<<4)<<2)|0,c);e=e+2|0}while(e>>>0<d<<1>>>0)}return}function _c(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+160|0;le(c,d,32,0)|0;a[c>>0]=a[c>>0]&-8;a[c+31>>0]=a[c+31>>0]&63|64;ab(f,c);Lc(b,f);Md(c|0,d|0,32)|0;Md(c+32|0,b|0,32)|0;l=e;return 0}function $c(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;g=l;h=l=l+63&-64;l=l+64|0;le(h,d,32,0)|0;d=c;e=h;f=d+32|0;do{a[d>>0]=a[e>>0]|0;d=d+1|0;e=e+1|0}while((d|0)<(f|0));_d(h,64);h=bh(b,c)|0;l=g;return h|0}function ad(b,c,d,e,f,g){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;if(e>>>0<0|(e|0)==0&d>>>0<32)b=-1;else{Nf(b,c,d,e,f,g)|0;c=lg(d|0,e|0,-32,-1)|0;dg(b+16|0,b+32|0,c,z,b)|0;c=b+16|0;do{a[b>>0]=0;b=b+1|0}while((b|0)<(c|0));b=0}return b|0}function bd(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;e=l;f=l=l+63&-64;l=l+64|0;le(f,c,32,0)|0;a[f>>0]=a[f>>0]&-8;a[f+31>>0]=a[f+31>>0]&63|64;c=f;d=b+32|0;do{a[b>>0]=a[c>>0]|0;b=b+1|0;c=c+1|0}while((b|0)<(d|0));_d(f,64);l=e;return 0}function cd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=l;g=l=l+63&-64;l=l+32|0;if(d>>>0<0|(d|0)==0&c>>>0<48)a=-1;else{c=lg(c|0,d|0,-32,-1)|0;d=z;Ed(g,b,e);a=Xd(a,b+32|0,c,d,g,b,f)|0}l=h;return a|0}function dd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+16|0;c[f>>2]=c[b+((d&3)<<2)>>2];c[f+4>>2]=c[b+((d>>>2&3)<<2)>>2];c[f+8>>2]=c[b+((d>>>4&3)<<2)>>2];c[f+12>>2]=c[b+((d>>>6&3)<<2)>>2];Ke(a,f);l=e;return}function ed(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;h=l;i=l=l+63&-64;l=l+80|0;if(!((c|0)==0&(d|0)==0)){pg(i+64|0,f);Ic(i,g);we(i,e,i+64|0);va(i,b,a,c,d);_d(i,64)}l=h;return 0}function fd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;f=l;e=l=l+63&-64;l=l+80|0;if(!((a|0)==0|(b|0)==0)){d=lc(a,c[a+8>>2]|0)|0;if(!d){Pa(e,b,c[a+28>>2]|0);_d(e+64|0,8);jc(e,a);_d(e,72);d=0}}else d=-25;l=f;return d|0}function gd(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;a:do if(e){f=0;while(1){if(!c){b=0;break a}g=b+1|0;a[b>>0]=a[35171+(d&63)>>0]|0;f=f+6|0;if(f>>>0>=e>>>0){b=g;break}else{d=d>>>6;c=c+-1|0;b=g}}}while(0);return b|0}function hd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=lg(c[a+64>>2]|0,c[a+64+4>>2]|0,b|0,d|0)|0;f=z;c[a+64>>2]=e;c[a+64+4>>2]=f;d=lg((f>>>0<d>>>0|(f|0)==(d|0)&e>>>0<b>>>0)&1|0,0,c[a+72>>2]|0,c[a+72+4>>2]|0)|0;c[a+72>>2]=d;c[a+72+4>>2]=z;return}function id(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,m=0;k=l;m=l=l+63&-64;l=l+16|0;Qh(m);j=_a(m,a,b,c,d,e,f,g,h,i,j)|0;Rh(m);l=k;return j|0}function jd(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=l;h=l=l+63&-64;l=l+32|0;if(!(Kd(h,f,g)|0)){a=Qf(a,b,c,d,e,h)|0;_d(h,32)}else a=-1;l=i;return a|0}function kd(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=l;g=l=l+63&-64;l=l+16|0;e=10;while(1){d=e+-1|0;a[g+d>>0]=(c>>>0)%10|0|48;if(c>>>0>9&(d|0)!=0){e=d;c=(c>>>0)/10|0}else break}e=11-e|0;fb(b|0,g+d|0,e|0)|0;a[b+e>>0]=0;l=f;return}function ld(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=l;h=l=l+63&-64;l=l+32|0;if(!(Kd(h,f,g)|0)){a=_f(a,b,c,d,e,h)|0;_d(h,32)}else a=-1;l=i;return a|0}function md(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;i=l;j=l=l+63&-64;l=l+32|0;Ha(j,e,h,0)|0;h=jf(a,b,c,d,e+16|0,f,g,j)|0;_d(j,32);l=i;return h|0}function nd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+64|0;if(!((b|0)==0&(c|0)==0)){Ic(g,e);we(g,d,0);Pb(a|0,0,b|0)|0;va(g,a,a,b,c);_d(g,64)}l=f;return 0}function od(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a:do if(e>>>0>0|(e|0)==0&d>>>0>4294967295){c[8326]=27;a=-1}else{switch(th(a,b,d)|0){case 0:{a=0;break a}case -35:{c[8326]=22;break}default:{}}a=-1}while(0);return a|0}function pd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a:do if(e>>>0>0|(e|0)==0&d>>>0>4294967295){c[8326]=27;a=-1}else{switch(uh(a,b,d)|0){case 0:{a=0;break a}case -35:{c[8326]=22;break}default:{}}a=-1}while(0);return a|0}function qd(a){a=a|0;var b=0,d=0;d=a+15&-16|0;b=c[i>>2]|0;a=b+d|0;if((d|0)>0&(a|0)<(b|0)|(a|0)<0){W()|0;_(12);return -1}c[i>>2]=a;if((a|0)>(V()|0)?(U()|0)==0:0){c[i>>2]=b;_(12);return -1}return b|0}function rd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+64|0;if(!((b|0)==0&(c|0)==0)){Ic(g,e);he(g,d,0);Pb(a|0,0,b|0)|0;va(g,a,a,b,c);_d(g,64)}l=f;return 0}function sd(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;i=l;j=l=l+63&-64;l=l+32|0;Ea(j,e,h,0)|0;h=nf(a,b,c,d,e+16|0,f,g,j)|0;l=i;return h|0}function td(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;do if(ic(a,34208,10)|0)if(!(ic(a,34198,9)|0)){a=pd(a,b,d,e)|0;break}else{c[8326]=22;a=-1;break}else a=od(a,b,d,e)|0;while(0);return a|0}function ud(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;i=l;l=l+32|0;if(!(Og(i,g,h)|0)){a=qf(a,b,c,d,e,f,i)|0;_d(i,32)}else a=-1;l=i;return a|0}function vd(b){b=b|0;var c=0,d=0,e=0,f=0,g=0;d=32;c=1;e=0;while(1){d=d+-1|0;f=a[b+d>>0]|0;g=a[34273+d>>0]|0;c=c&255;e=((f&255)-(g&255)|0)>>>8&c|e&255;if(!d)break;else c=(((g^f)&255)+65535|0)>>>8&c}return ((e|0)==0)<<31>>31|0}function wd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;e=l;d=l=l+63&-64;l=l+16|0;f=wf(d,b)|0;c[8326]=f;if(!f)d=c[d>>2]|0;else{c[d>>2]=0;d=0}c[a>>2]=d;c[a+4>>2]=d;c[a+8>>2]=d|0?b:0;l=e;return d|0}function xd(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;i=l;l=l+32|0;if(!(Og(i,g,h)|0)){uf(a,b,c,d,e,f,i)|0;_d(i,32);a=0}else a=-1;l=i;return a|0}function yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+80|0;Gb(e+40|0,c,b);Fb(e,c,b);Ga(e,e);la(a,e+40|0,e);l=d;return}function zd(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;if(d>>>0<0|(d|0)==0&c>>>0<16)a=-1;else{d=lg(c|0,d|0,-16,-1)|0;a=Sc(a,b+16|0,b,d,z,e,f,g)|0}return a|0}function Ad(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0<0|(d|0)==0&c>>>0<16)a=-1;else{d=lg(c|0,d|0,-16,-1)|0;a=Qe(a,b+16|0,b,d,z,e,f)|0}return a|0}function Bd(a){a=a|0;c[a+32>>2]=0;c[a+32+4>>2]=0;c[a>>2]=c[8238];c[a+4>>2]=c[8239];c[a+8>>2]=c[8240];c[a+12>>2]=c[8241];c[a+16>>2]=c[8242];c[a+20>>2]=c[8243];c[a+24>>2]=c[8244];c[a+28>>2]=c[8245];return 0}function Cd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;kf(a);d=0;do{g=Xe(b+(d<<3)|0)|0;e=a+(d<<3)|0;f=c[e+4>>2]^z;c[e>>2]=c[e>>2]^g;c[e+4>>2]=f;d=d+1|0}while((d|0)!=8);return}function Dd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0<0|(d|0)==0&c>>>0<16)a=-1;else{d=lg(c|0,d|0,-16,-1)|0;a=Ya(a,b+16|0,b,d,z,e,f)|0}return a|0}function Ed(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+384|0;Ig(e,0,0,24)|0;xg(e,b,32,0)|0;xg(e,c,32,0)|0;Yg(e,a,24)|0;l=d;return}function Fd(a,b,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;if((l+-1|0)>>>0<2)a=hc(a,b,d,e,f,g,h,i,j,k,l)|0;else{c[8326]=22;a=-1}return a|0}function Gd(b){b=b|0;var c=0,d=0,e=0;d=0;while(1){c=0;e=0;do{e=(a[16+(d<<5)+c>>0]^a[b+c>>0])&255|e;c=c+1|0}while((c|0)!=32);d=d+1|0;if(!e){c=1;break}if(d>>>0>=12){c=0;break}}return c|0}function Hd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=l;h=l=l+63&-64;l=l+1408|0;da(h,f)|0;ea(a,b,c,d,e,h)|0;l=g;return 0}function Id(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+32|0;Ha(g,d,e,0)|0;e=Dg(a,b,c,d+16|0,g)|0;_d(g,32);l=f;return e|0}function Jd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=l;d=l=l+63&-64;l=l+32|0;if(!(Wd(d,c,b)|0)){Ea(a,36008,d,0)|0;a=0}else a=-1;l=e;return a|0}function Kd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=l;d=l=l+63&-64;l=l+32|0;if(!(Wd(d,c,b)|0)){Ha(a,35944,d,0)|0;a=0}else a=-1;l=e;return a|0}function Ld(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=l;l=l+32|0;re(f,b,c,d,e)|0;e=Bh(a,f)|0;e=((f|0)==(a|0)?-1:e)|(Pc(f,a,32)|0);l=f;return e|0}function Md(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else fb(b,c,d)|0;return b|0}function Nd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=O(b&65535,a&65535)|0;e=(c>>>16)+(O(b&65535,a>>>16)|0)|0;d=O(b>>>16,a&65535)|0;return (z=(e>>>16)+(O(b>>>16,a>>>16)|0)+(((e&65535)+d|0)>>>16)|0,e+d<<16|c&65535|0)|0}function Od(a,b){a=a|0;b=b|0;var d=0;d=c[a+4>>2]^c[b+4>>2];c[a>>2]=c[a>>2]^c[b>>2];c[a+4>>2]=d;d=c[a+8+4>>2]^c[b+8+4>>2];c[a+8>>2]=c[a+8>>2]^c[b+8>>2];c[a+8+4>>2]=d;return}function Pd(a,b){a=a|0;b=b|0;var d=0;d=c[a+4>>2]&c[b+4>>2];c[a>>2]=c[a>>2]&c[b>>2];c[a+4>>2]=d;d=c[a+8+4>>2]&c[b+8+4>>2];c[a+8>>2]=c[a+8>>2]&c[b+8>>2];c[a+8+4>>2]=d;return}function Qd(a,b){a=a|0;b=b|0;la(a,b,b+120|0);la(a+40|0,b+40|0,b+80|0);la(a+80|0,b+80|0,b+120|0);la(a+120|0,b,b+40|0);return}function Rd(a,b){a=a|0;b=b|0;var d=0;d=c[a+4>>2]|c[b+4>>2];c[a>>2]=c[a>>2]|c[b>>2];c[a+4>>2]=d;d=c[a+8+4>>2]|c[b+8+4>>2];c[a+8>>2]=c[a+8>>2]|c[b+8>>2];c[a+8+4>>2]=d;return}function Sd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=l;l=l+64|0;qe(f,b,c,d,e)|0;e=Ah(a,f)|0;e=((f|0)==(a|0)?-1:e)|(Pc(f,a,64)|0);l=f;return e|0}function Td(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=l;l=l+32|0;oe(f,b,c,d,e)|0;e=Bh(a,f)|0;e=((f|0)==(a|0)?-1:e)|(Pc(f,a,32)|0);l=f;return e|0}function Ud(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279)a=-1;else a=Uc(a+16|0,a,b,c,d,e,f,g)|0;return a|0}function Vd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279)a=-1;else{Ue(a+16|0,a,b,c,d,e,f)|0;a=0}return a|0}function Wd(a,b,c){a=a|0;b=b|0;c=c|0;if(!(Ka(a,b,c)|0)){b=0;c=0;do{c=d[a+b>>0]|0|c;b=b+1|0}while((b|0)!=32);b=0-((c+511|0)>>>8&1)|0}else b=-1;return b|0}function Xd(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;if(d>>>0<0|(d|0)==0&c>>>0<16)a=-1;else{d=lg(c|0,d|0,-16,-1)|0;a=ud(a,b+16|0,b,d,z,e,f,g)|0}return a|0}function Yd(a){a=a|0;var b=0,c=0,e=0,f=0;c=d[a>>0]|0;e=zf(d[a+1>>0]|0|0,0,8)|0;f=z;b=zf(d[a+2>>0]|0|0,0,16)|0;f=f|z;a=zf(d[a+3>>0]|0|0,0,24)|0;z=f|z;return e|c|b|a|0}function Zd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+16|0;pe(g,b,c,d,e)|0;e=Ch(a,g)|0;l=f;return e|0}function _d(b,d){b=b|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+16|0;c[f>>2]=b;if(d|0){b=0;do{a[(c[f>>2]|0)+b>>0]=0;b=b+1|0}while((b|0)!=(d|0))}l=e;return}function $d(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0<0|(d|0)==0&c>>>0<16)a=-1;else{d=lg(c|0,d|0,-16,-1)|0;a=qf(a,b+16|0,b,d,z,e,f)|0}return a|0}function ae(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=0;do{g=b+(d<<3)|0;e=a+(d<<3)|0;f=c[e+4>>2]^c[g+4>>2];c[e>>2]=c[e>>2]^c[g>>2];c[e+4>>2]=f;d=d+1|0}while((d|0)!=128);return}function be(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+32|0;Ea(g,d,e,0)|0;e=Hg(a,b,c,d+16|0,g)|0;l=f;return e|0}function ce(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0<0|(d|0)==0&c>>>0<16)a=-1;else{d=lg(c|0,d|0,-16,-1)|0;a=$a(a,b+16|0,b,d,z,e,f)|0}return a|0}function de(a,b){a=a|0;b=b|0;Gb(a,b+40|0,b);Fb(a+40|0,b+40|0,b);tc(a+80|0,b+80|0);la(a+120|0,b+120|0,1232);return}function ee(b){b=b|0;var c=0;c=a[n+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[n+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[n+(b>>>24)>>0]|0)+24|0}function fe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+1408|0;da(g,e)|0;fa(a,b,c,d,g)|0;l=f;return 0}function ge(a,b){a=a|0;b=b|0;var c=0;c=Xe(a)|0;c=Cf(c|0,z|0,b|0)|0;ze(a,c,z);c=Xe(a+8|0)|0;b=Cf(c|0,z|0,b|0)|0;ze(a+8|0,b,z);return}function he(a,b,d){a=a|0;b=b|0;d=d|0;if(!d){c[a+48>>2]=0;d=0}else{c[a+48>>2]=Wg(d)|0;d=Wg(d+4|0)|0}c[a+52>>2]=d;c[a+56>>2]=Wg(b)|0;c[a+60>>2]=Wg(b+4|0)|0;return}function ie(a,b){a=a|0;b=b|0;var c=0;c=Xe(a)|0;c=zf(c|0,z|0,b|0)|0;ze(a,c,z);c=Xe(a+8|0)|0;b=zf(c|0,z|0,b|0)|0;ze(a+8|0,b,z);return}function je(b,c){b=b|0;c=c|0;var d=0,e=0;e=l;l=l+64|0;xe(b,e)|0;b=e;d=c+32|0;do{a[c>>0]=a[b>>0]|0;c=c+1|0;b=b+1|0}while((c|0)<(d|0));l=e;return 0}function ke(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=lg(c|0,d|0,a|0,b|0)|0;e=z;d=zf(a|0,b|0,1)|0;d=ef(d&-2|0,z&1|0,c|0,0)|0;d=lg(f|0,e|0,d|0,z|0)|0;return d|0}function le(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+208|0;ue(f)|0;Fa(f,b,c,d)|0;Je(f,a)|0;l=e;return 0}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+112|0;Bd(f)|0;Ma(f,b,c,d)|0;Ne(f,a)|0;l=e;return 0}function ne(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279)a=-1;else{Sa(a+16|0,a,b,c,d,e,f)|0;a=0}return a|0}function oe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=l;l=l+208|0;qb(f,e,32)|0;Cg(f,b,c,d)|0;ye(f,a)|0;l=f;return 0}function pe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=l;g=l=l+63&-64;l=l+96|0;cc(g,e);Na(g,b,c,d);Wa(g,a);l=f;return 0}function qe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=l;l=l+416|0;pb(f,e,32)|0;Fg(f,b,c,d)|0;xe(f,a)|0;l=f;return 0}function re(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=l;l=l+416|0;Ug(f,e,32)|0;Lg(f,b,c,d)|0;je(f,a)|0;l=f;return 0}function se(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=l;f=l=l+63&-64;l=l+64|0;Je(a,f)|0;ub(b,c,f,64,0,d,1);l=e;return 0}function te(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=l;e=l=l+63&-64;l=l+64|0;Je(a,e)|0;c=vb(b,e,64,0,c,1)|0;l=d;return c|0}function ue(a){a=a|0;var b=0,d=0;c[a+64>>2]=0;c[a+64+4>>2]=0;c[a+64+8>>2]=0;c[a+64+12>>2]=0;b=400;d=a+64|0;do{c[a>>2]=c[b>>2];a=a+4|0;b=b+4|0}while((a|0)<(d|0));return 0}function ve(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;if(d>>>3|0){e=0;do{f=b+(e<<3)|0;Qc(a+(e<<3)|0,c[f>>2]|0,c[f+4>>2]|0);e=e+1|0}while((e|0)!=(d>>>3|0))}return}function we(a,b,d){a=a|0;b=b|0;d=d|0;if(!d)d=0;else d=Wg(d)|0;c[a+48>>2]=d;c[a+52>>2]=Wg(b)|0;c[a+56>>2]=Wg(b+4|0)|0;c[a+60>>2]=Wg(b+8|0)|0;return}function xe(a,b){a=a|0;b=b|0;var c=0;c=l;l=l+64|0;Je(a,c)|0;Fa(a+208|0,c,64,0)|0;Je(a+208|0,b)|0;_d(c,64);l=c;return 0}function ye(a,b){a=a|0;b=b|0;var c=0;c=l;l=l+32|0;Ne(a,c)|0;Ma(a+104|0,c,32,0)|0;Ne(a+104|0,b)|0;_d(c,32);l=c;return 0}function ze(b,c,d){b=b|0;c=c|0;d=d|0;a[b>>0]=c;a[b+1>>0]=c>>8;a[b+2>>0]=c>>16;a[b+3>>0]=c>>24;a[b+4>>0]=d;a[b+4+1>>0]=d>>8;a[b+4+2>>0]=d>>16;a[b+4+3>>0]=d>>24;return}function Ae(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279)a=-1;else a=xd(a+16|0,a,b,c,d,e,f,g)|0;return a|0}function Be(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279)a=-1;else{uf(a+16|0,a,b,c,d,e,f)|0;a=0}return a|0}function Ce(a){a=a|0;pg(a,(Wg(a)|0)>>>8);pg(a+4|0,(Wg(a+4|0)|0)>>>8);pg(a+8|0,(Wg(a+8|0)|0)>>>8);pg(a+12|0,(Wg(a+12|0)|0)>>>8);return}function De(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279)a=-1;else{Va(a+16|0,a,b,c,d,e,f)|0;a=0}return a|0}function Ee(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;if(d>>>2|0){e=0;do{f=a+(e<<2)|0;c[f>>2]=c[f>>2]^c[b+(e<<2)>>2];e=e+1|0}while((e|0)!=(d>>>2|0))}return}function Fe(a){a=a|0;return (0-(a^62)|0)>>>8&43^43|(a+65510|0)>>>8&255&a+65|(0-(a^63)|0)>>>8&47^47|(a+65484|0)>>>8&a+71&((a+65510|0)>>>8&255^255)|(a+65474|0)>>>8&a+252&((a+65484|0)>>>8&255^255)|0}function Ge(a,b){a=a|0;b=b|0;var c=0,d=0;c=l;d=l=l+63&-64;l=l+128|0;Ye(d,b);mc(a,d);l=c;return}function He(a,b){a=a|0;b=b|0;la(a,b,b+120|0);la(a+40|0,b+40|0,b+80|0);la(a+80|0,b+80|0,b+120|0);return}function Ie(a,b){a=a|0;b=b|0;var c=0,d=0;c=l;d=l=l+63&-64;l=l+32|0;lf(d,32);_c(a,b,d)|0;_d(d,32);l=c;return 0}function Je(a,b){a=a|0;b=b|0;var c=0,d=0;c=l;d=l=l+63&-64;l=l+704|0;sc(a,d);ve(b,a,64);_d(d,704);_d(a,208);l=c;return 0}function Ke(a,b){a=a|0;b=b|0;var d=0;d=c[b+4>>2]|0;c[a>>2]=c[b>>2];c[a+4>>2]=d;d=c[b+8+4>>2]|0;c[a+8>>2]=c[b+8>>2];c[a+8+4>>2]=d;return}function Le(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=0;do{f=Cc(b+(d<<3)|0)|0;e=a+(d<<3)|0;c[e>>2]=f;c[e+4>>2]=z;d=d+1|0}while((d|0)!=16);return}function Me(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=0;do{f=Xe(b+(d<<3)|0)|0;e=a+(d<<3)|0;c[e>>2]=f;c[e+4>>2]=z;d=d+1|0}while((d|0)!=128);return}function Ne(a,b){a=a|0;b=b|0;var c=0,d=0;c=l;d=l=l+63&-64;l=l+288|0;bc(a,d);yf(b,a);_d(d,288);_d(a,104);l=c;return 0}function Oe(a){a=a|0;var b=0,c=0;b=l;c=l=l+63&-64;l=l+32|0;Ja(c,a);a=Bh(c,35960)|0;l=b;return a|0}function Pe(a){a=a|0;var b=0;if(a>>>0<2)a=0;else{do b=Xh()|0;while(b>>>0<(((0-a|0)>>>0)%(a>>>0)|0)>>>0);a=(b>>>0)%(a>>>0)|0}return a|0}function Qe(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Ya(a,b,c,d,e,f,g)|0}function Re(a,b,c){a=a|0;b=b|0;c=c|0;tb(a,b,c&255);tb(a+40|0,b+40|0,c&255);tb(a+80|0,b+80|0,c&255);return}function Se(a){a=a|0;var b=0;b=~c[a+4>>2];c[a>>2]=~c[a>>2];c[a+4>>2]=b;b=~c[a+8+4>>2];c[a+8>>2]=~c[a+8>>2];c[a+8+4>>2]=b;return}function Te(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=l;l=l+16|0;za(a,b,d,e,f|0)|0;l=f;return (z=c[f+4>>2]|0,c[f>>2]|0)|0}function Ue(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Sa(a,b,c,d,e,f,g)|0;return 0}function Ve(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if(d>>>2|0){e=0;do{c[a+(e<<2)>>2]=c[b+(e<<2)>>2];e=e+1|0}while((e|0)!=(d>>>2|0))}return}function We(a,b){a=a|0;b=b|0;var d=0,e=0;d=0;do{e=b+(d<<3)|0;ze(a+(d<<3)|0,c[e>>2]|0,c[e+4>>2]|0);d=d+1|0}while((d|0)!=128);return}function Xe(a){a=a|0;z=d[a+4>>0]|d[a+4+1>>0]<<8|d[a+4+2>>0]<<16|d[a+4+3>>0]<<24;return d[a>>0]|d[a+1>>0]<<8|d[a+2>>0]<<16|d[a+3>>0]<<24|0}function Ye(a,b){a=a|0;b=b|0;tc(a,b);tc(a+40|0,b+40|0);tc(a+80|0,b+80|0);return}function Ze(b){b=b|0;var c=0,d=0;d=l;c=l=l+63&-64;l=l+32|0;Ja(c,b);l=d;return a[c>>0]&1|0}function _e(){}function $e(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){z=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}z=(b|0)<0?-1:0;return b>>c-32|0}function af(a){a=a|0;rg(a);Gf(a+40|0);Gf(a+80|0);rg(a+120|0);return}function bf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Cf(a|0,b|0,c|0)|0;e=z;c=zf(a|0,b|0,64-c|0)|0;z=z|e;return c|d|0}function cf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=zf(a|0,b|0,c|0)|0;e=z;c=Cf(a|0,b|0,64-c|0)|0;z=z|e;return c|d|0}function df(a,b){a=a|0;b=b|0;var d=0,e=0;d=0;do{e=a+(d<<2)|0;c[e>>2]=c[e>>2]^c[b+(d<<2)>>2];d=d+1|0}while((d|0)!=16);return}function ef(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=Nd(a,c)|0;f=z;return (z=(O(b,c)|0)+(O(d,a)|0)+f|f&0,e|0|0)|0}function ff(b){b=b|0;a[b>>0]=0;a[b+1>>0]=0;a[b+2>>0]=0;a[b+3>>0]=0;a[b+4>>0]=0;a[b+4+1>>0]=0;a[b+4+2>>0]=0;a[b+4+3>>0]=0;return}function gf(a,b,c){a=a|0;b=b|0;c=c|0;if(c>>>0<256)return Db(a,b,c&255)|0;else ba(33636,33656,102,33875);return 0}function hf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;b=zf(b&255|0,0,8)|0;d=z;c=zf(c&255|0,0,16)|0;z=d|z;return b|a&255|c|0}function jf(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return Ra(a,b,c,d,e,f,g,h)|0}function kf(a){a=a|0;var b=0,d=0;Pb(a+64|0,0,320)|0;b=400;d=a+64|0;do{c[a>>2]=c[b>>2];a=a+4|0;b=b+4|0}while((a|0)<(d|0));return}function lf(b,c){b=b|0;c=c|0;var d=0;if(c|0){d=0;do{a[b+d>>0]=Xh()|0;d=d+1|0}while((d|0)!=(c|0))}return}function mf(b,c){b=b|0;c=c|0;var d=0;d=c;do{if(!d){c=0;break}d=d+-1|0;c=b+d|0}while((a[c>>0]|0)!=36);return c|0}function nf(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return Vc(a,b,c,d,e,f,g,h)|0}function of(b,c){b=b|0;c=c|0;var d=0;d=b+48|0;b=d+16|0;do{a[d>>0]=a[c>>0]|0;d=d+1|0;c=c+1|0}while((d|0)<(b|0));return}function pf(b,c){b=b|0;c=c|0;var d=0;d=b+32|0;b=d+16|0;do{a[d>>0]=a[c>>0]|0;d=d+1|0;c=c+1|0}while((d|0)<(b|0));return}function qf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return $a(a,b,c,d,e,f,g)|0}function rf(){var a=0,b=0;a=l;b=l=l+63&-64;l=l+16|0;ah(b);if(c[b>>2]|0)ah(b);l=a;return}function sf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return jd(a,b,c,d,e,f,g)|0}function tf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return ed(a,b,c,d,e,f,g)|0}function uf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Va(a,b,c,d,e,f,g)|0;return 0}function vf(){var a=0;a=Y(30)|0;if((a|0)>0)c[8841]=a;else a=c[8841]|0;if(a>>>0<16)Z();else{lf(35992,16);return}}function wf(a,b){a=a|0;b=b|0;var d=0;if(b>>>0<=4294967168?(d=ob(b)|0,(d|0)!=0):0){c[a>>2]=d;a=0}else a=12;return a|0}function xf(a,b){a=a|0;b=b|0;var d=0;d=0;do{c[a+(d<<2)>>2]=Ag(b+(d<<2)|0)|0;d=d+1|0}while((d|0)!=16);return}function yf(a,b){a=a|0;b=b|0;var d=0;d=0;do{mg(a+(d<<2)|0,c[b+(d<<2)>>2]|0);d=d+1|0}while((d|0)!=8);return}function zf(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){z=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}z=a<<c-32;return 0}function Af(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return ld(a,b,c,d,e,f,g)|0}function Bf(){var a=0;if(!(c[8840]|0)){Ih();Zh();vf();c[8840]=1;a=0}else a=1;return a|0}function Cf(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){z=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}z=0;return b>>>c-32|0}function Df(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Xc(a,b,c,d,e,f,g)|0}function Ef(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return rb(a,b,1,c,d,e,16,f,g,0,0,2)|0}function Ff(a,b,c){a=a|0;b=b|0;c=c|0;if(c>>>0<1|(c|0)==1&b>>>0<0){lf(a,b);return}else ba(35106,35126,200,35152)}function Gf(a){a=a|0;var b=0;c[a>>2]=1;a=a+4|0;b=a+36|0;do{c[a>>2]=0;a=a+4|0}while((a|0)<(b|0));return}function Hf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return rb(a,b,1,c,d,e,16,f,g,0,0,1)|0}function If(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return ac(a,b,c,d,e,f,g)|0}function Jf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return sd(a,b,c,d,e,0,0,f)|0}function Kf(a,b){a=a|0;b=b|0;var d=0;d=0;do{c[a+(d<<2)>>2]=c[b+(d<<2)>>2];d=d+1|0}while((d|0)!=16);return}function Lf(a){a=a|0;Gf(a);Gf(a+40|0);rg(a+80|0);return}function Mf(a,b){a=a|0;b=b|0;var d=0;d=c[a>>2]|0;if((b|0)!=0&(d|0)!=0)_d(c[d+4>>2]|0,c[a+8>>2]<<10);return}function Nf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return md(a,b,c,d,e,0,0,f)|0}function Of(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ub(a,b,c,d,e,f,0);return 0}function Pf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Ib(a,b,c,d,e,f)|0}function Qf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return uc(a,b,c,d,e,f)|0}function Rf(a){a=a|0;rg(a);Gf(a+40|0);Gf(a+80|0);return}function Sf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return ed(a,b,c,d,e,0,f)|0}function Tf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return rb(a,b,1,c,d,e,16,0,32,f,128,2)|0}function Uf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return rb(a,b,1,c,d,e,16,0,32,f,128,1)|0}function Vf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Ra(a,b,c,d,e,0,0,f)|0}function Wf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return vb(a,b,c,d,e,0)|0}function Xf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Of(a,b,c,d,e,f)|0;return 0}function Yf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Zd(a,b,c,d,e)|0}function Zf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Vc(a,b,c,d,e,0,0,f)|0}function _f(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return ad(a,b,c,d,e,f)|0}function $f(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Qf(a,b,c,d,e,f)|0}function ag(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Nf(a,b,c,d,e,f)|0}function bg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Wf(a,b,c,d,e)|0}function cg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return pc(a,b,c,d,e,f)|0}function dg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return pe(a,b,c,d,e)|0}function eg(a,b){a=a|0;b=b|0;b=mb(35171,b&255,65)|0;c[a>>2]=(b|0)==0?0:b-35171|0;return ((b|0)==0)<<31>>31|0}function fg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Yf(a,b,c,d,e)|0}function gg(a,b){a=a|0;b=b|0;ue(a)|0;if(b|0)Fa(a,34305,34,0)|0;return}function hg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return _f(a,b,c,d,e,f)|0}function ig(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (z=d,a-c>>>0|0)|0}function jg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return nc(a,b,c,d,e,f)|0}function kg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Gg(a,b,c,d)|0}function lg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return (z=b+d+(a+c>>>0>>>0<a>>>0|0)>>>0,a+c>>>0|0)|0}function mg(b,c){b=b|0;c=c|0;a[b+3>>0]=c;a[b+2>>0]=c>>>8;a[b+1>>0]=c>>>16;a[b>>0]=c>>>24;return}function ng(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Ld(a,b,c,d,e)|0}function og(b){b=b|0;if(a[b+356>>0]|0)xh(b);c[b+80>>2]=-1;c[b+80+4>>2]=-1;return}function pg(b,c){b=b|0;c=c|0;a[b>>0]=c;a[b+1>>0]=c>>8;a[b+2>>0]=c>>16;a[b+3>>0]=c>>24;return}function qg(a,b,c){a=a|0;b=b|0;c=c|0;Df(b,32,c,32,0,0,0)|0;return nh(a,b)|0}function rg(a){a=a|0;var b=0;b=a+40|0;do{c[a>>2]=0;a=a+4|0}while((a|0)<(b|0));return}function sg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ua(a,b,c,d,e)|0;return 0}function tg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return dg(a,b,c,d,e)|0}function ug(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Bb(a,b,c,d);return 0}function vg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return nd(a,b,c,d,e)|0}function wg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;se(a,b,c,d)|0;return 0}function xg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ug(a,b,c,d)|0;return 0}function yg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;re(a,b,c,d,e)|0;return 0}function zg(a,b){a=a|0;b=b|0;lf(b,32);return bh(a,b)|0}function Ag(a){a=a|0;return (d[a+2>>0]|0)<<8|(d[a+3>>0]|0)|(d[a+1>>0]|0)<<16|(d[a>>0]|0)<<24|0}function Bg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return kg(a,b,c,d)|0}function Cg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ma(a,b,c,d)|0;return 0}function Dg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return eb(a,b,c,d,e)|0}function Eg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Id(a,b,c,d,e)|0}function Fg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Fa(a,b,c,d)|0;return 0}function Gg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Na(a,b,c,d);return 0}function Hg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return rd(a,b,c,d,e)|0}function Ig(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Jc(a,b,c,d)|0}function Jg(a,b){a=a|0;b=b|0;pg(a+12|0,(Wg(a+12|0)|0)+b|0);return}function Kg(a,b,c){a=a|0;b=b|0;c=c|0;return $c(a,b,c)|0}function Lg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Fg(a,b,c,d)|0;return 0}function Mg(a,b,c){a=a|0;b=b|0;c=c|0;vg(a,b,0,35094,c)|0;return}function Ng(a,b){a=a|0;b=b|0;z=c[a+-64+(b<<7)+4>>2]|0;return c[a+-64+(b<<7)>>2]|0}function Og(a,b,c){a=a|0;b=b|0;c=c|0;return Kd(a,b,c)|0}function Pg(b,c){b=b|0;c=c|0;b=Hb(b,c)|0;return ((a[b>>0]|0)==(c&255)<<24>>24?b:0)|0}function Qg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Aa(a,b,c,d,12);return 0}function Rg(a){a=a|0;a=Cf(a<<24>>24|0,((a<<24>>24|0)<0)<<31>>31|0,63)|0;return a&255|0}function Sg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Aa(a,b,c,d,8);return 0}function Tg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Aa(a,b,c,d,20);return 0}function Ug(a,b,c){a=a|0;b=b|0;c=c|0;pb(a,b,c)|0;return 0}function Vg(a,b,c){a=a|0;b=b|0;c=c|0;_c(a,b,c)|0;return 0}function Wg(a){a=a|0;return d[a>>0]|d[a+1>>0]<<8|d[a+2>>0]<<16|d[a+3>>0]<<24|0}function Xg(a,b,c){a=a|0;b=b|0;c=c|0;return te(a,b,c)|0}function Yg(a,b,c){a=a|0;b=b|0;c=c|0;return gf(a,b,c)|0}function Zg(a){a=a|0;var b=0;b=l;l=l+a|0;l=l+15&-16;return b|0}function _g(b){b=b|0;a[b>>0]=0;a[b+1>>0]=0;a[b+2>>0]=0;a[b+3>>0]=0;return}function $g(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;le(a,b,c,d)|0;return 0}function ah(a){a=a|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;return}function bh(a,b){a=a|0;b=b|0;return Bc(a,b)|0}function ch(a,b){a=a|0;b=b|0;return ph(a,b)|0}function dh(a,b){a=a|0;b=b|0;return vh(a,b)|0}function eh(a){a=a|0;var b=0;b=c[a>>2]|0;if(b|0)sa(b);rh(a);return}function fh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return za(a,b,c,d,0)|0}function gh(a,b,c){a=a|0;b=b|0;c=c|0;return Wd(a,b,c)|0}function hh(a,b){a=a|0;b=b|0;lf(b,32);return nh(a,b)|0}function ih(a){a=a|0;pg(a+12|0,~(Wg(a+12|0)|0));return}function jh(a,b){a=a|0;b=b|0;return zg(a,b)|0}function kh(a){a=a|0;var b=0;b=c[a>>2]|0;if(b|0)sa(b);sa(a);return}function lh(a,b){a=a|0;b=b|0;return ch(a,b)|0}function mh(a,b){a=a|0;b=b|0;Md(a|0,b+32|0,32)|0;return 0}function nh(a,b){a=a|0;b=b|0;return bh(a,b)|0}function oh(a,b){a=a|0;b=b|0;return dh(a,b)|0}function ph(a,b){a=a|0;b=b|0;Wa(a,b);return 0}function qh(a,b){a=a|0;b=b|0;if(!o){o=a;p=b}}function rh(a){a=a|0;c[a+4>>2]=0;c[a>>2]=0;c[a+8>>2]=0;return}function sh(a,b){a=a|0;b=b|0;Md(a|0,b|0,32)|0;return 0}function th(a,b,c){a=a|0;b=b|0;c=c|0;return gb(a,b,c,2)|0}function uh(a,b,c){a=a|0;b=b|0;c=c|0;return gb(a,b,c,1)|0}function vh(a,b){a=a|0;b=b|0;cc(a,b);return 0}function wh(a,b){a=a|0;b=b|0;Ie(a,b)|0;return 0}function xh(a){a=a|0;c[a+88>>2]=-1;c[a+88+4>>2]=-1;return}function yh(a,b){a=a|0;b=b|0;return ((a|0)!=0|(b|0)!=0)&1|0}function zh(a,b){a=a|0;b=b|0;return (((b^a)&255)+-1|0)>>>31&255|0}function Ah(a,b){a=a|0;b=b|0;return Mc(a,b,64)|0}function Bh(a,b){a=a|0;b=b|0;return Mc(a,b,32)|0}function Ch(a,b){a=a|0;b=b|0;return Mc(a,b,16)|0}function Dh(a,b){a=a|0;b=b|0;fb(a|0,b|0,1024)|0;return}function Eh(a){a=a|0;ue(a)|0;return 0}function Fh(a,b){a=a|0;b=b|0;l=a;m=b}function Gh(a,b){a=a|0;b=b|0;return a>>>(32-b|0)|a<<b|0}function Hh(a){a=a|0;Eh(a)|0;return 0}function Ih(){rf();return}function Jh(a,b){a=a|0;b=b|0;return a<<32-b|a>>>b|0}function Kh(a){a=a|0;return mf(a,(xc(a)|0)+1|0)|0}function Lh(a){a=a|0;lf(a,16);return}function Mh(a){a=a|0;Pb(a|0,0,1024)|0;return}function Nh(){return 524288}function Oh(a){a=a|0;lf(a,32);return}function Ph(){return 16777216}function Qh(a){a=a|0;rh(a);return}function Rh(a){a=a|0;eh(a);return}function Sh(){return 32768}function Th(){return 1073741824}function Uh(){return 67108864}function Vh(){return 35236}function Wh(){return 268435456}function Xh(){return X(0)|0}function Yh(){return 102}function Zh(){aa(1);return}function _h(){return 33554432}function $h(){return 1408}function ai(){return 536870912}function bi(){return 12}function ci(){return 134217728}function di(){return -2147483648}function ei(){return 34208}function fi(){return 34348}function gi(){return 416}function hi(){return 4}function ii(a){a=a|0;l=a}function ji(){return 34129}function ki(a){a=a|0;z=a}function li(){return 34227}function mi(){return 6}function ni(){return 256}function oi(){return 104}function pi(){return 384}function qi(){return 35864}function ri(){return 34255}function si(){return 34238}function ti(){return 8192}function ui(){return 5}function vi(){return 9}function wi(){return 2}function xi(){return 34339}function yi(){return 34198}function zi(){return 34219}function Ai(){return 3}function Bi(){return 35164}function Ci(){return 34265}function Di(){return 1}function Ei(){return 33908}function Fi(){return 33484}function Gi(){return 208}function Hi(){return 128}function Ii(){return -1}function Ji(){return 34107}function Ki(){return 33498}function Li(){return 34115}function Mi(){return 8}function Ni(){return 24}function Oi(){return z|0}function Pi(){return 48}function Qi(){return 16}function Ri(){return l|0}function Si(){return 64}function Ti(){return 32}function Ui(){return 0}

// EMSCRIPTEN_END_FUNCS
return{_crypto_onetimeauth_poly1305_init:dh,_crypto_hash_sha512_init:ue,_crypto_sign_ed25519_pk_to_curve25519:oc,_crypto_pwhash_scryptsalsa208sha256:Vb,_crypto_scalarmult_primitive:li,_crypto_scalarmult_base:nh,_crypto_auth_bytes:Ti,_crypto_stream_chacha20_keybytes:Ti,_crypto_aead_chacha20poly1305_decrypt_detached:zb,_crypto_kdf_blake2b_bytes_min:Qi,_crypto_box_curve25519xchacha20poly1305_open_easy_afternm:Ad,_crypto_generichash_blake2b_keybytes_max:Si,_crypto_box_beforenmbytes:Ti,_crypto_stream_salsa208:db,___udivmoddi4:za,_crypto_sign_ed25519_sk_to_curve25519:bd,_crypto_stream_chacha20_ietf_xor_ic:tf,_crypto_secretbox_xsalsa20poly1305_open:uc,_crypto_box_zerobytes:Ti,_crypto_secretbox_xchacha20poly1305_open_detached:Ya,_crypto_stream_salsa208_keybytes:Ti,_crypto_hash_sha512_bytes:Si,_crypto_pwhash_argon2id_opslimit_interactive:wi,_crypto_stream_xsalsa20_xor_ic:md,_crypto_core_hsalsa20_keybytes:Ti,_crypto_sign_primitive:Ci,_crypto_scalarmult_curve25519_bytes:Ti,_crypto_scalarmult_curve25519_scalarbytes:Ti,_crypto_sign_ed25519_bytes:Si,_crypto_pwhash_argon2i_str_verify:pd,_crypto_box_curve25519xchacha20poly1305_secretkeybytes:Ti,_crypto_auth_hmacsha512_keygen:Oh,_crypto_box_curve25519xchacha20poly1305_sealbytes:Pi,_crypto_box_detached_afternm:uf,_crypto_stream_salsa20_xor_ic:jf,_crypto_auth_hmacsha256_init:qb,_crypto_stream_chacha20_ietf_xor:Sf,_crypto_auth_hmacsha512256_final:je,_crypto_pwhash_argon2id_opslimit_sensitive:hi,_crypto_stream_aes128ctr_xor_afternm:ea,setThrew:qh,_crypto_pwhash_argon2id_passwd_min:Ui,_crypto_aead_chacha20poly1305_ietf_nsecbytes:Ui,_crypto_kdf_blake2b_derive_from_key:Ib,_crypto_box_curve25519xsalsa20poly1305_keypair:zg,_crypto_hash_sha256_init:Bd,_crypto_stream_xsalsa20_noncebytes:Ni,_crypto_generichash_keybytes_max:Si,_crypto_verify_64:Ah,stackAlloc:Zg,_crypto_box_curve25519xchacha20poly1305_keypair:zg,_crypto_box_curve25519xsalsa20poly1305_open:jd,_crypto_pwhash_memlimit_sensitive:ai,_crypto_pwhash_argon2i_opslimit_interactive:hi,_crypto_kdf_blake2b_keybytes:Ti,_crypto_pwhash_argon2id_str:$b,_crypto_hash_sha512_update:Fa,_crypto_core_hchacha20:Ea,_crypto_pwhash_bytes_min:Qi,_crypto_secretbox_open:Qf,_crypto_auth_hmacsha256_final:ye,_crypto_verify_16:Ch,_crypto_pwhash_argon2id:ec,_crypto_stream_aes128ctr_xor:Hd,_crypto_pwhash_scryptsalsa208sha256_memlimit_max:Ii,_crypto_pwhash_scryptsalsa208sha256_ll:id,_crypto_pwhash_argon2id_memlimit_interactive:Uh,_crypto_stream_salsa208_xor:Ua,_crypto_secretbox_xsalsa20poly1305_keygen:Oh,_crypto_aead_chacha20poly1305_abytes:Qi,_crypto_pwhash_argon2i_bytes_max:Ii,_crypto_box_curve25519xchacha20poly1305_easy_afternm:Vd,_crypto_onetimeauth_poly1305_update:kg,_crypto_pwhash_memlimit_max:di,_crypto_verify_64_bytes:Si,_crypto_onetimeauth_poly1305_keygen:Oh,_crypto_generichash_blake2b_keygen:Oh,_crypto_pwhash_argon2i_strprefix:yi,_crypto_auth_hmacsha256_update:Cg,_crypto_aead_xchacha20poly1305_ietf_encrypt:Nc,_crypto_pwhash_scryptsalsa208sha256_strbytes:Yh,_crypto_stream_xsalsa20_keybytes:Ti,_crypto_generichash_keygen:Oh,_crypto_pwhash_argon2i_str:ac,_crypto_pwhash_argon2id_bytes_max:Ii,_crypto_box_sealbytes:Pi,_crypto_onetimeauth:tg,_crypto_secretbox_boxzerobytes:Qi,_crypto_aead_chacha20poly1305_ietf_keygen:Oh,_crypto_stream_chacha20:Hg,_crypto_box_open_afternm:$f,_crypto_pwhash_opslimit_moderate:mi,_crypto_box_macbytes:Qi,_crypto_shorthash_bytes:Mi,_crypto_pwhash_argon2id_saltbytes:Qi,_crypto_generichash_primitive:Ji,_crypto_sign_ed25519_keypair:Ie,_crypto_sign_ed25519ph_statebytes:Gi,_crypto_aead_xchacha20poly1305_ietf_keybytes:Ti,_crypto_auth_primitive:Fi,_crypto_core_salsa2012_keybytes:Ti,_malloc:ja,_crypto_stream_noncebytes:Ni,_crypto_secretbox_xchacha20poly1305_keybytes:Ti,_crypto_secretbox_xsalsa20poly1305_keybytes:Ti,_crypto_pwhash_saltbytes:Qi,_crypto_secretbox_noncebytes:Ni,_crypto_secretbox_xsalsa20poly1305_macbytes:Qi,_crypto_pwhash_argon2i_opslimit_max:Ii,_crypto_auth_hmacsha512_bytes:Si,_crypto_generichash_keybytes:Ti,_crypto_hash_bytes:Si,_crypto_sign_publickeybytes:Ti,_crypto_pwhash_argon2i_memlimit_moderate:ci,_crypto_generichash_blake2b:Xc,_crypto_core_hchacha20_keybytes:Ti,___uremdi3:Te,_crypto_pwhash_argon2i_opslimit_moderate:mi,_randombytes_implementation_name:fi,_crypto_stream_xchacha20_noncebytes:Ni,_crypto_sign_ed25519_verify_detached:Wf,_crypto_hash_sha512_statebytes:Gi,_crypto_secretbox_primitive:si,_crypto_verify_32_bytes:Ti,stackRestore:ii,_crypto_kdf_keygen:Oh,_crypto_stream_xsalsa20_xor:Nf,_crypto_stream_chacha20_ietf_keygen:Oh,_crypto_stream_chacha20_keygen:Oh,_crypto_box_easy:Ae,_crypto_hash_sha256:me,_crypto_sign_ed25519_seedbytes:Ti,_crypto_pwhash_alg_argon2i13:Di,_crypto_box_curve25519xchacha20poly1305_seal_open:Rc,_crypto_pwhash_opslimit_min:Ai,_crypto_box_curve25519xsalsa20poly1305_publickeybytes:Ti,_crypto_kdf_blake2b_bytes_max:Si,_crypto_hash_sha256_statebytes:oi,_crypto_stream_chacha20_ietf_noncebytes:bi,_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive:Th,_crypto_box_curve25519xchacha20poly1305_open_easy:zd,_crypto_box_beforenm:Og,_crypto_box_curve25519xsalsa20poly1305_afternm:_f,_crypto_sign_statebytes:Gi,_crypto_sign_open:cg,stackSave:Ri,_crypto_box_seed_keypair:Kg,_crypto_auth_hmacsha512_init:pb,_crypto_sign_ed25519_sk_to_pk:mh,_crypto_scalarmult_curve25519:Wd,_crypto_box_open_easy:Xd,_crypto_auth_hmacsha512:qe,_crypto_stream_keygen:Oh,_crypto_secretbox_xsalsa20poly1305_zerobytes:Ti,_crypto_auth_hmacsha512256_keybytes:Ti,_crypto_aead_chacha20poly1305_keybytes:Ti,_free:sa,_crypto_kx_client_session_keys:Mb,_crypto_sign_verify_detached:bg,_crypto_onetimeauth_poly1305_keybytes:Ti,_crypto_sign_ed25519_secretkeybytes:Si,_crypto_kdf_blake2b_contextbytes:Mi,_crypto_stream_salsa2012:cb,_crypto_sign_seedbytes:Ti,_crypto_box_curve25519xchacha20poly1305_beforenmbytes:Ti,_randombytes_random:Xh,_crypto_sign_ed25519ph_update:Fg,_crypto_auth_hmacsha256_keygen:Oh,_crypto_auth_hmacsha256_statebytes:Gi,_randombytes_buf_deterministic:Mg,_crypto_aead_chacha20poly1305_encrypt_detached:Kb,_crypto_stream_xsalsa20_keygen:Oh,_crypto_hash_primitive:Ei,_crypto_pwhash_argon2id_passwd_max:Ii,_crypto_shorthash_siphash24:ua,_crypto_box_curve25519xsalsa20poly1305_macbytes:Qi,_crypto_pwhash_scryptsalsa208sha256_saltbytes:Ti,_crypto_sign_ed25519:nc,_crypto_box_curve25519xchacha20poly1305_seal:gc,_crypto_core_salsa20_constbytes:Qi,_crypto_pwhash_argon2id_str_verify:od,_crypto_box_boxzerobytes:Qi,_crypto_pwhash_argon2i_saltbytes:Qi,_crypto_box_curve25519xchacha20poly1305_open_detached_afternm:Qe,_crypto_box_curve25519xsalsa20poly1305_beforenmbytes:Ti,_crypto_stream_xchacha20_keygen:Oh,_crypto_core_hchacha20_constbytes:Qi,_crypto_stream_xchacha20_xor:Jf,_randombytes_seedbytes:Ti,_crypto_sign_final_create:wg,_crypto_kx_secretkeybytes:Ti,_crypto_box_detached:xd,_randombytes_buf:lf,_crypto_generichash_blake2b_saltbytes:Qi,_crypto_box_open_detached:ud,_crypto_kx_seedbytes:Ti,_crypto_pwhash_argon2id_strprefix:ei,_crypto_box_curve25519xchacha20poly1305_open_detached:Sc,_crypto_generichash_blake2b_keybytes:Ti,_crypto_box_curve25519xchacha20poly1305_easy:Ud,_crypto_pwhash_argon2i_bytes_min:Qi,_crypto_pwhash_scryptsalsa208sha256_str:Nb,_crypto_pwhash_argon2id_bytes_min:Qi,_i64Subtract:ig,_crypto_box_seedbytes:Ti,_crypto_generichash_blake2b_bytes_min:Qi,_crypto_hash:$g,_crypto_generichash_blake2b_statebytes:pi,_crypto_sign_ed25519ph_final_create:se,_crypto_aead_chacha20poly1305_ietf_decrypt_detached:lb,_crypto_generichash_final:Yg,_crypto_auth_hmacsha512_update:Fg,_crypto_auth_hmacsha256:oe,_crypto_box_keypair:jh,_crypto_hash_sha256_bytes:Ti,___udivdi3:fh,_crypto_pwhash_argon2i_passwd_max:Ii,_sodium_init:Bf,_crypto_secretbox_macbytes:Qi,_crypto_aead_xchacha20poly1305_ietf_npubbytes:Ni,_bitshift64Shl:zf,_crypto_pwhash_argon2i_opslimit_min:Ai,setTempRet0:ki,_crypto_sign_seed_keypair:Vg,_crypto_core_hchacha20_inputbytes:Qi,___muldi3:ef,_crypto_core_salsa2012_constbytes:Qi,_crypto_kx_seed_keypair:qg,_crypto_box_curve25519xchacha20poly1305_detached_afternm:Ue,_crypto_box_curve25519xsalsa20poly1305:ld,_crypto_aead_chacha20poly1305_nsecbytes:Ui,_sodium_library_minimal:Ui,_crypto_aead_xchacha20poly1305_ietf_nsecbytes:Ui,_crypto_pwhash_argon2i_strbytes:Hi,_crypto_pwhash_argon2i_memlimit_max:di,_crypto_generichash_blake2b_salt_personal:Hc,_crypto_stream_aes128ctr_beforenmbytes:$h,_crypto_kdf_derive_from_key:Pf,_crypto_secretbox_xsalsa20poly1305_noncebytes:Ni,_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive:Nh,_crypto_pwhash_argon2i_memlimit_interactive:_h,_crypto_pwhash_alg_argon2id13:wi,_crypto_stream_keybytes:Ti,_crypto_pwhash_memlimit_min:ti,_crypto_aead_chacha20poly1305_ietf_npubbytes:bi,_crypto_stream_salsa208_noncebytes:Mi,_sodium_library_version_minor:ui,_crypto_onetimeauth_bytes:Qi,_crypto_box_open:sf,_crypto_secretbox_xchacha20poly1305_open_easy:Dd,_crypto_scalarmult_curve25519_base:bh,_crypto_sign_ed25519_open:pc,_crypto_stream_chacha20_ietf_keybytes:Ti,_crypto_box_noncebytes:Ni,_crypto_core_hchacha20_outputbytes:Ti,_crypto_stream_salsa2012_xor:Ta,_crypto_onetimeauth_keygen:Oh,_crypto_pwhash_strbytes:Hi,_crypto_auth_hmacsha512256_update:Lg,_crypto_core_salsa208_outputbytes:Si,_crypto_onetimeauth_poly1305:dg,_crypto_secretbox_xchacha20poly1305_macbytes:Qi,_crypto_kdf_bytes_min:Qi,_crypto_sign_ed25519_sk_to_seed:sh,_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive:Ph,_crypto_stream_xsalsa20:Id,_crypto_box_open_easy_afternm:$d,_crypto_box_curve25519xsalsa20poly1305_seedbytes:Ti,_crypto_stream_salsa20_keybytes:Ti,_crypto_kdf_primitive:Ji,_crypto_sign_ed25519ph_final_verify:te,_crypto_sign_ed25519_publickeybytes:Ti,_crypto_stream_aes128ctr:fe,_crypto_shorthash:sg,_crypto_auth_keybytes:Ti,_crypto_box_curve25519xsalsa20poly1305_open_afternm:Qf,_crypto_aead_chacha20poly1305_npubbytes:Mi,_crypto_aead_xchacha20poly1305_ietf_abytes:Qi,_crypto_onetimeauth_poly1305_final:ch,_crypto_onetimeauth_poly1305_bytes:Qi,_crypto_box_curve25519xsalsa20poly1305_seed_keypair:$c,_crypto_box_primitive:Ki,_crypto_pwhash_str:If,_crypto_auth_hmacsha512_keybytes:Ti,_crypto_auth:yg,_crypto_pwhash_scryptsalsa208sha256_bytes_min:Qi,_crypto_core_salsa20_keybytes:Ti,_crypto_box_afternm:hg,_crypto_core_salsa208_constbytes:Qi,_crypto_pwhash_argon2id_memlimit_sensitive:Th,_crypto_onetimeauth_primitive:ji,_crypto_pwhash_scryptsalsa208sha256_str_verify:yc,_sodium_version_string:Bi,_crypto_stream_xchacha20_xor_ic:sd,_crypto_pwhash_scryptsalsa208sha256_passwd_min:Ui,_crypto_stream_chacha20_ietf:vg,_crypto_generichash:Df,_crypto_core_hsalsa20_outputbytes:Ti,_crypto_pwhash_opslimit_interactive:hi,_crypto_stream_aes128ctr_beforenm:da,getTempRet0:Oi,_crypto_box_curve25519xsalsa20poly1305_noncebytes:Ni,_crypto_stream_salsa2012_noncebytes:Mi,_crypto_core_salsa208_keybytes:Ti,_crypto_aead_chacha20poly1305_ietf_decrypt:Ec,_crypto_auth_hmacsha512256_init:Ug,_crypto_kx_server_session_keys:Lb,_crypto_onetimeauth_poly1305_verify:Yf,_crypto_auth_hmacsha512_final:xe,_crypto_stream_aes128ctr_noncebytes:Qi,_crypto_box_secretkeybytes:Ti,_crypto_stream_salsa2012_keygen:Oh,_crypto_onetimeauth_update:Bg,_crypto_core_salsa20:Tg,_crypto_pwhash_memlimit_interactive:_h,_crypto_scalarmult_bytes:Ti,_crypto_secretbox_zerobytes:Ti,_crypto_pwhash_argon2id_memlimit_moderate:Wh,_crypto_secretbox_detached:Va,_crypto_stream_xor:ag,_crypto_secretbox_xchacha20poly1305_easy:ne,_crypto_secretbox_easy:De,_crypto_aead_xchacha20poly1305_ietf_decrypt_detached:_b,_crypto_stream_salsa20:Dg,_sodium_bin2hex:Gc,_crypto_auth_hmacsha512_statebytes:gi,_crypto_pwhash_argon2i_opslimit_sensitive:Mi,_crypto_generichash_blake2b_bytes_max:Si,_crypto_hash_sha256_update:Ma,_crypto_core_hsalsa20_constbytes:Qi,_crypto_box_easy_afternm:Be,_crypto_auth_hmacsha512256_verify:Ld,_crypto_pwhash_memlimit_moderate:ci,_crypto_core_salsa20_inputbytes:Qi,_crypto_box_publickeybytes:Ti,_crypto_sign_secretkeybytes:Si,___muldsi3:Nd,_crypto_scalarmult_scalarbytes:Ti,_crypto_verify_32:Bh,_crypto_kx_sessionkeybytes:Ti,_crypto_aead_chacha20poly1305_decrypt:Fc,_crypto_pwhash_argon2id_opslimit_moderate:Ai,_crypto_pwhash_argon2id_opslimit_min:Di,_crypto_sign:jg,_crypto_pwhash_argon2id_memlimit_min:ti,_crypto_pwhash_passwd_max:Ii,_crypto_pwhash_scryptsalsa208sha256_opslimit_min:Sh,_sodium_hex2bin:kb,_crypto_pwhash_argon2i_alg_argon2i13:Di,_crypto_secretbox_keybytes:Ti,_crypto_pwhash_argon2id_alg_argon2id13:wi,_randombytes:Ff,_crypto_aead_chacha20poly1305_ietf_abytes:Qi,_crypto_stream_salsa20_keygen:Oh,_crypto_generichash_bytes_max:Si,_crypto_pwhash_argon2i_passwd_min:Ui,_crypto_pwhash_opslimit_sensitive:Mi,_crypto_sign_init:Hh,_crypto_generichash_blake2b_personalbytes:Qi,_crypto_stream_chacha20_xor_ic:nf,_crypto_box_curve25519xchacha20poly1305_seedbytes:Ti,_crypto_onetimeauth_verify:fg,_crypto_sign_ed25519_detached:Of,_crypto_generichash_init:Ig,_i64Add:lg,_crypto_sign_bytes:Si,_crypto_generichash_update:xg,_crypto_scalarmult:gh,_crypto_sign_detached:Xf,_crypto_generichash_blake2b_update:ug,_crypto_box_curve25519xsalsa20poly1305_beforenm:Kd,_crypto_generichash_blake2b_bytes:Ti,_crypto_auth_hmacsha512256_bytes:Ti,_crypto_box_curve25519xchacha20poly1305_noncebytes:Ni,_randombytes_uniform:Pe,_crypto_shorthash_siphash24_keybytes:Qi,_crypto_shorthash_keygen:Lh,_crypto_onetimeauth_init:oh,_crypto_stream_aes128ctr_keybytes:Qi,_crypto_sign_ed25519_seed_keypair:_c,_crypto_stream_salsa20_xor:Vf,_crypto_auth_hmacsha512_verify:Sd,_crypto_generichash_blake2b_keybytes_min:Qi,_bitshift64Lshr:Cf,_crypto_kx_publickeybytes:Ti,_crypto_pwhash_bytes_max:Ii,_crypto_aead_chacha20poly1305_ietf_keybytes:Ti,_crypto_aead_chacha20poly1305_ietf_encrypt_detached:yb,_crypto_stream:Eg,_sbrk:qd,_crypto_box_curve25519xchacha20poly1305_beforenm:Jd,_memcpy:fb,_crypto_pwhash:Fd,_crypto_auth_hmacsha512256:re,_crypto_secretbox_xsalsa20poly1305:ad,_crypto_verify_16_bytes:Qi,_crypto_stream_salsa208_keygen:Oh,_emscripten_get_global_libc:qi,_crypto_shorthash_siphashx24_bytes:Qi,_crypto_generichash_blake2b_final:gf,_crypto_generichash_blake2b_init_salt_personal:Ac,_crypto_box_seal:zc,_crypto_aead_xchacha20poly1305_ietf_keygen:Oh,_crypto_kx_keypair:hh,runPostSets:_e,_crypto_pwhash_alg_default:Di,_crypto_box:Af,_crypto_stream_primitive:xi,_crypto_secretbox_xsalsa20poly1305_boxzerobytes:Qi,_crypto_pwhash_str_verify:td,_crypto_generichash_keybytes_min:Qi,_crypto_generichash_statebytes:pi,_crypto_onetimeauth_poly1305_statebytes:ni,_crypto_sign_final_verify:Xg,_crypto_pwhash_strprefix:yi,_crypto_secretbox_keygen:Oh,_crypto_secretbox_xchacha20poly1305_noncebytes:Ni,_crypto_hash_sha512:le,_crypto_shorthash_siphash24_bytes:Mi,_llvm_cttz_i32:ee,_crypto_pwhash_scryptsalsa208sha256_bytes_max:Ii,_crypto_box_curve25519xchacha20poly1305_detached:Uc,_sodium_library_version_major:vi,_crypto_aead_chacha20poly1305_ietf_encrypt:Oc,_crypto_generichash_blake2b_init:Jc,_randombytes_close:Ui,_crypto_pwhash_primitive:zi,_crypto_onetimeauth_keybytes:Ti,_crypto_pwhash_argon2i:hc,_crypto_pwhash_argon2id_strbytes:Hi,_crypto_stream_aes128ctr_afternm:fa,_crypto_pwhash_argon2id_opslimit_max:Ii,_crypto_kdf_keybytes:Ti,establishStackSpace:Fh,_crypto_aead_chacha20poly1305_encrypt:Tc,_crypto_core_salsa2012_inputbytes:Qi,_crypto_pwhash_scryptsalsa208sha256_memlimit_min:Ph,_crypto_core_salsa208:Sg,_crypto_pwhash_opslimit_max:Ii,_crypto_auth_verify:ng,_crypto_generichash_bytes:Ti,_crypto_auth_hmacsha512256_keygen:Oh,_randombytes_stir:Zh,_memset:Pb,_crypto_box_open_detached_afternm:qf,_crypto_pwhash_argon2i_memlimit_sensitive:ai,_crypto_kx_primitive:Li,_crypto_stream_salsa2012_keybytes:Ti,_crypto_aead_xchacha20poly1305_ietf_decrypt:Dc,_crypto_pwhash_scryptsalsa208sha256_strprefix:Vh,_crypto_core_salsa20_outputbytes:Si,_crypto_auth_keygen:Oh,_crypto_secretbox:_f,_crypto_aead_xchacha20poly1305_ietf_encrypt_detached:Yb,_crypto_pwhash_scryptsalsa208sha256_passwd_max:Ii,_crypto_auth_hmacsha256_bytes:Ti,_crypto_auth_hmacsha256_verify:Td,_crypto_sign_keypair:wh,_crypto_stream_xchacha20:be,_crypto_onetimeauth_statebytes:ni,_crypto_sign_ed25519ph_init:Eh,_crypto_stream_salsa20_noncebytes:Mi,_crypto_shorthash_keybytes:Qi,_crypto_aead_chacha20poly1305_keygen:Oh,_crypto_shorthash_siphashx24:ra,_memmove:Md,_crypto_hash_sha512_final:Je,_crypto_box_curve25519xsalsa20poly1305_zerobytes:Ti,_crypto_shorthash_siphashx24_keybytes:Qi,_crypto_pwhash_passwd_min:Ui,_crypto_kdf_bytes_max:Si,_crypto_box_curve25519xsalsa20poly1305_boxzerobytes:Qi,_crypto_generichash_bytes_min:Qi,_crypto_core_salsa2012_outputbytes:Si,_crypto_auth_hmacsha256_keybytes:Ti,_crypto_core_salsa208_inputbytes:Qi,_crypto_pwhash_scryptsalsa208sha256_opslimit_max:Ii,_crypto_sign_update:Lg,_crypto_secretbox_xchacha20poly1305_detached:Sa,_crypto_stream_chacha20_noncebytes:Mi,_crypto_secretbox_open_detached:$a,_crypto_box_curve25519xchacha20poly1305_seed_keypair:$c,_crypto_pwhash_argon2id_memlimit_max:di,_crypto_pwhash_argon2i_memlimit_min:ti,_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive:_h,_crypto_box_curve25519xsalsa20poly1305_secretkeybytes:Ti,_crypto_kdf_contextbytes:Mi,_crypto_hash_sha256_final:Ne,_crypto_stream_xchacha20_keybytes:Ti,_crypto_box_seal_open:cd,_crypto_shorthash_primitive:ri,_crypto_core_hsalsa20_inputbytes:Qi,_crypto_onetimeauth_final:lh,_crypto_secretbox_open_easy:ce,_crypto_core_salsa2012:Qg,_crypto_box_curve25519xchacha20poly1305_macbytes:Qi,_crypto_auth_hmacsha512256_statebytes:gi,_bitshift64Ashr:$e,_crypto_box_curve25519xchacha20poly1305_publickeybytes:Ti,_crypto_stream_chacha20_xor:Zf,_crypto_core_hsalsa20:Ha,stackAlloc:Zg,stackSave:Ri,stackRestore:ii,establishStackSpace:Fh,setThrew:qh,setTempRet0:ki,getTempRet0:Oi}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _crypto_onetimeauth_poly1305_init=Module["_crypto_onetimeauth_poly1305_init"]=asm["_crypto_onetimeauth_poly1305_init"];var _crypto_hash_sha512_init=Module["_crypto_hash_sha512_init"]=asm["_crypto_hash_sha512_init"];var _crypto_sign_ed25519_pk_to_curve25519=Module["_crypto_sign_ed25519_pk_to_curve25519"]=asm["_crypto_sign_ed25519_pk_to_curve25519"];var _crypto_pwhash_scryptsalsa208sha256=Module["_crypto_pwhash_scryptsalsa208sha256"]=asm["_crypto_pwhash_scryptsalsa208sha256"];var _crypto_scalarmult_primitive=Module["_crypto_scalarmult_primitive"]=asm["_crypto_scalarmult_primitive"];var _crypto_scalarmult_base=Module["_crypto_scalarmult_base"]=asm["_crypto_scalarmult_base"];var _crypto_auth_bytes=Module["_crypto_auth_bytes"]=asm["_crypto_auth_bytes"];var _crypto_stream_chacha20_keybytes=Module["_crypto_stream_chacha20_keybytes"]=asm["_crypto_stream_chacha20_keybytes"];var _crypto_aead_chacha20poly1305_decrypt_detached=Module["_crypto_aead_chacha20poly1305_decrypt_detached"]=asm["_crypto_aead_chacha20poly1305_decrypt_detached"];var _crypto_kdf_blake2b_bytes_min=Module["_crypto_kdf_blake2b_bytes_min"]=asm["_crypto_kdf_blake2b_bytes_min"];var _crypto_box_curve25519xchacha20poly1305_open_easy_afternm=Module["_crypto_box_curve25519xchacha20poly1305_open_easy_afternm"]=asm["_crypto_box_curve25519xchacha20poly1305_open_easy_afternm"];var _crypto_generichash_blake2b_keybytes_max=Module["_crypto_generichash_blake2b_keybytes_max"]=asm["_crypto_generichash_blake2b_keybytes_max"];var _crypto_box_beforenmbytes=Module["_crypto_box_beforenmbytes"]=asm["_crypto_box_beforenmbytes"];var _crypto_stream_salsa208=Module["_crypto_stream_salsa208"]=asm["_crypto_stream_salsa208"];var ___udivmoddi4=Module["___udivmoddi4"]=asm["___udivmoddi4"];var _crypto_sign_ed25519_sk_to_curve25519=Module["_crypto_sign_ed25519_sk_to_curve25519"]=asm["_crypto_sign_ed25519_sk_to_curve25519"];var _crypto_stream_chacha20_ietf_xor_ic=Module["_crypto_stream_chacha20_ietf_xor_ic"]=asm["_crypto_stream_chacha20_ietf_xor_ic"];var _crypto_secretbox_xsalsa20poly1305_open=Module["_crypto_secretbox_xsalsa20poly1305_open"]=asm["_crypto_secretbox_xsalsa20poly1305_open"];var _crypto_box_zerobytes=Module["_crypto_box_zerobytes"]=asm["_crypto_box_zerobytes"];var _crypto_secretbox_xchacha20poly1305_open_detached=Module["_crypto_secretbox_xchacha20poly1305_open_detached"]=asm["_crypto_secretbox_xchacha20poly1305_open_detached"];var _crypto_stream_salsa208_keybytes=Module["_crypto_stream_salsa208_keybytes"]=asm["_crypto_stream_salsa208_keybytes"];var _crypto_hash_sha512_bytes=Module["_crypto_hash_sha512_bytes"]=asm["_crypto_hash_sha512_bytes"];var _crypto_pwhash_argon2id_opslimit_interactive=Module["_crypto_pwhash_argon2id_opslimit_interactive"]=asm["_crypto_pwhash_argon2id_opslimit_interactive"];var _crypto_stream_xsalsa20_xor_ic=Module["_crypto_stream_xsalsa20_xor_ic"]=asm["_crypto_stream_xsalsa20_xor_ic"];var _crypto_core_hsalsa20_keybytes=Module["_crypto_core_hsalsa20_keybytes"]=asm["_crypto_core_hsalsa20_keybytes"];var _crypto_sign_primitive=Module["_crypto_sign_primitive"]=asm["_crypto_sign_primitive"];var _crypto_scalarmult_curve25519_bytes=Module["_crypto_scalarmult_curve25519_bytes"]=asm["_crypto_scalarmult_curve25519_bytes"];var _crypto_scalarmult_curve25519_scalarbytes=Module["_crypto_scalarmult_curve25519_scalarbytes"]=asm["_crypto_scalarmult_curve25519_scalarbytes"];var _crypto_sign_ed25519_bytes=Module["_crypto_sign_ed25519_bytes"]=asm["_crypto_sign_ed25519_bytes"];var _crypto_pwhash_argon2i_str_verify=Module["_crypto_pwhash_argon2i_str_verify"]=asm["_crypto_pwhash_argon2i_str_verify"];var _crypto_box_curve25519xchacha20poly1305_secretkeybytes=Module["_crypto_box_curve25519xchacha20poly1305_secretkeybytes"]=asm["_crypto_box_curve25519xchacha20poly1305_secretkeybytes"];var _crypto_auth_hmacsha512_keygen=Module["_crypto_auth_hmacsha512_keygen"]=asm["_crypto_auth_hmacsha512_keygen"];var _crypto_box_curve25519xchacha20poly1305_sealbytes=Module["_crypto_box_curve25519xchacha20poly1305_sealbytes"]=asm["_crypto_box_curve25519xchacha20poly1305_sealbytes"];var _crypto_box_detached_afternm=Module["_crypto_box_detached_afternm"]=asm["_crypto_box_detached_afternm"];var _crypto_stream_salsa20_xor_ic=Module["_crypto_stream_salsa20_xor_ic"]=asm["_crypto_stream_salsa20_xor_ic"];var _crypto_auth_hmacsha256_init=Module["_crypto_auth_hmacsha256_init"]=asm["_crypto_auth_hmacsha256_init"];var _crypto_stream_chacha20_ietf_xor=Module["_crypto_stream_chacha20_ietf_xor"]=asm["_crypto_stream_chacha20_ietf_xor"];var _crypto_auth_hmacsha512256_final=Module["_crypto_auth_hmacsha512256_final"]=asm["_crypto_auth_hmacsha512256_final"];var _crypto_pwhash_argon2id_opslimit_sensitive=Module["_crypto_pwhash_argon2id_opslimit_sensitive"]=asm["_crypto_pwhash_argon2id_opslimit_sensitive"];var _crypto_stream_aes128ctr_xor_afternm=Module["_crypto_stream_aes128ctr_xor_afternm"]=asm["_crypto_stream_aes128ctr_xor_afternm"];var setThrew=Module["setThrew"]=asm["setThrew"];var _crypto_pwhash_argon2id_passwd_min=Module["_crypto_pwhash_argon2id_passwd_min"]=asm["_crypto_pwhash_argon2id_passwd_min"];var _crypto_aead_chacha20poly1305_ietf_nsecbytes=Module["_crypto_aead_chacha20poly1305_ietf_nsecbytes"]=asm["_crypto_aead_chacha20poly1305_ietf_nsecbytes"];var _crypto_kdf_blake2b_derive_from_key=Module["_crypto_kdf_blake2b_derive_from_key"]=asm["_crypto_kdf_blake2b_derive_from_key"];var _crypto_box_curve25519xsalsa20poly1305_keypair=Module["_crypto_box_curve25519xsalsa20poly1305_keypair"]=asm["_crypto_box_curve25519xsalsa20poly1305_keypair"];var _crypto_hash_sha256_init=Module["_crypto_hash_sha256_init"]=asm["_crypto_hash_sha256_init"];var _crypto_stream_xsalsa20_noncebytes=Module["_crypto_stream_xsalsa20_noncebytes"]=asm["_crypto_stream_xsalsa20_noncebytes"];var _crypto_generichash_keybytes_max=Module["_crypto_generichash_keybytes_max"]=asm["_crypto_generichash_keybytes_max"];var _crypto_verify_64=Module["_crypto_verify_64"]=asm["_crypto_verify_64"];var stackAlloc=Module["stackAlloc"]=asm["stackAlloc"];var _crypto_box_curve25519xchacha20poly1305_keypair=Module["_crypto_box_curve25519xchacha20poly1305_keypair"]=asm["_crypto_box_curve25519xchacha20poly1305_keypair"];var _crypto_box_curve25519xsalsa20poly1305_open=Module["_crypto_box_curve25519xsalsa20poly1305_open"]=asm["_crypto_box_curve25519xsalsa20poly1305_open"];var _crypto_pwhash_memlimit_sensitive=Module["_crypto_pwhash_memlimit_sensitive"]=asm["_crypto_pwhash_memlimit_sensitive"];var _crypto_pwhash_argon2i_opslimit_interactive=Module["_crypto_pwhash_argon2i_opslimit_interactive"]=asm["_crypto_pwhash_argon2i_opslimit_interactive"];var _crypto_kdf_blake2b_keybytes=Module["_crypto_kdf_blake2b_keybytes"]=asm["_crypto_kdf_blake2b_keybytes"];var _crypto_pwhash_argon2id_str=Module["_crypto_pwhash_argon2id_str"]=asm["_crypto_pwhash_argon2id_str"];var _crypto_hash_sha512_update=Module["_crypto_hash_sha512_update"]=asm["_crypto_hash_sha512_update"];var _crypto_core_hchacha20=Module["_crypto_core_hchacha20"]=asm["_crypto_core_hchacha20"];var _crypto_pwhash_bytes_min=Module["_crypto_pwhash_bytes_min"]=asm["_crypto_pwhash_bytes_min"];var _crypto_secretbox_open=Module["_crypto_secretbox_open"]=asm["_crypto_secretbox_open"];var _crypto_auth_hmacsha256_final=Module["_crypto_auth_hmacsha256_final"]=asm["_crypto_auth_hmacsha256_final"];var _crypto_verify_16=Module["_crypto_verify_16"]=asm["_crypto_verify_16"];var _crypto_pwhash_argon2id=Module["_crypto_pwhash_argon2id"]=asm["_crypto_pwhash_argon2id"];var _crypto_stream_aes128ctr_xor=Module["_crypto_stream_aes128ctr_xor"]=asm["_crypto_stream_aes128ctr_xor"];var _crypto_pwhash_scryptsalsa208sha256_memlimit_max=Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_max"]=asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_max"];var _crypto_pwhash_scryptsalsa208sha256_ll=Module["_crypto_pwhash_scryptsalsa208sha256_ll"]=asm["_crypto_pwhash_scryptsalsa208sha256_ll"];var _crypto_pwhash_argon2id_memlimit_interactive=Module["_crypto_pwhash_argon2id_memlimit_interactive"]=asm["_crypto_pwhash_argon2id_memlimit_interactive"];var _crypto_stream_salsa208_xor=Module["_crypto_stream_salsa208_xor"]=asm["_crypto_stream_salsa208_xor"];var _crypto_secretbox_xsalsa20poly1305_keygen=Module["_crypto_secretbox_xsalsa20poly1305_keygen"]=asm["_crypto_secretbox_xsalsa20poly1305_keygen"];var _crypto_aead_chacha20poly1305_abytes=Module["_crypto_aead_chacha20poly1305_abytes"]=asm["_crypto_aead_chacha20poly1305_abytes"];var _crypto_pwhash_argon2i_bytes_max=Module["_crypto_pwhash_argon2i_bytes_max"]=asm["_crypto_pwhash_argon2i_bytes_max"];var _crypto_box_curve25519xchacha20poly1305_easy_afternm=Module["_crypto_box_curve25519xchacha20poly1305_easy_afternm"]=asm["_crypto_box_curve25519xchacha20poly1305_easy_afternm"];var _crypto_onetimeauth_poly1305_update=Module["_crypto_onetimeauth_poly1305_update"]=asm["_crypto_onetimeauth_poly1305_update"];var _crypto_pwhash_memlimit_max=Module["_crypto_pwhash_memlimit_max"]=asm["_crypto_pwhash_memlimit_max"];var _crypto_verify_64_bytes=Module["_crypto_verify_64_bytes"]=asm["_crypto_verify_64_bytes"];var _crypto_onetimeauth_poly1305_keygen=Module["_crypto_onetimeauth_poly1305_keygen"]=asm["_crypto_onetimeauth_poly1305_keygen"];var _crypto_generichash_blake2b_keygen=Module["_crypto_generichash_blake2b_keygen"]=asm["_crypto_generichash_blake2b_keygen"];var _crypto_pwhash_argon2i_strprefix=Module["_crypto_pwhash_argon2i_strprefix"]=asm["_crypto_pwhash_argon2i_strprefix"];var _crypto_auth_hmacsha256_update=Module["_crypto_auth_hmacsha256_update"]=asm["_crypto_auth_hmacsha256_update"];var _crypto_aead_xchacha20poly1305_ietf_encrypt=Module["_crypto_aead_xchacha20poly1305_ietf_encrypt"]=asm["_crypto_aead_xchacha20poly1305_ietf_encrypt"];var _crypto_pwhash_scryptsalsa208sha256_strbytes=Module["_crypto_pwhash_scryptsalsa208sha256_strbytes"]=asm["_crypto_pwhash_scryptsalsa208sha256_strbytes"];var _crypto_stream_xsalsa20_keybytes=Module["_crypto_stream_xsalsa20_keybytes"]=asm["_crypto_stream_xsalsa20_keybytes"];var _crypto_generichash_keygen=Module["_crypto_generichash_keygen"]=asm["_crypto_generichash_keygen"];var _crypto_pwhash_argon2i_str=Module["_crypto_pwhash_argon2i_str"]=asm["_crypto_pwhash_argon2i_str"];var _crypto_pwhash_argon2id_bytes_max=Module["_crypto_pwhash_argon2id_bytes_max"]=asm["_crypto_pwhash_argon2id_bytes_max"];var _crypto_box_sealbytes=Module["_crypto_box_sealbytes"]=asm["_crypto_box_sealbytes"];var _crypto_onetimeauth=Module["_crypto_onetimeauth"]=asm["_crypto_onetimeauth"];var _crypto_secretbox_boxzerobytes=Module["_crypto_secretbox_boxzerobytes"]=asm["_crypto_secretbox_boxzerobytes"];var _crypto_aead_chacha20poly1305_ietf_keygen=Module["_crypto_aead_chacha20poly1305_ietf_keygen"]=asm["_crypto_aead_chacha20poly1305_ietf_keygen"];var _crypto_stream_chacha20=Module["_crypto_stream_chacha20"]=asm["_crypto_stream_chacha20"];var _crypto_box_open_afternm=Module["_crypto_box_open_afternm"]=asm["_crypto_box_open_afternm"];var _crypto_pwhash_opslimit_moderate=Module["_crypto_pwhash_opslimit_moderate"]=asm["_crypto_pwhash_opslimit_moderate"];var _crypto_box_macbytes=Module["_crypto_box_macbytes"]=asm["_crypto_box_macbytes"];var _crypto_shorthash_bytes=Module["_crypto_shorthash_bytes"]=asm["_crypto_shorthash_bytes"];var _crypto_pwhash_argon2id_saltbytes=Module["_crypto_pwhash_argon2id_saltbytes"]=asm["_crypto_pwhash_argon2id_saltbytes"];var _crypto_generichash_primitive=Module["_crypto_generichash_primitive"]=asm["_crypto_generichash_primitive"];var _crypto_sign_ed25519_keypair=Module["_crypto_sign_ed25519_keypair"]=asm["_crypto_sign_ed25519_keypair"];var _crypto_sign_ed25519ph_statebytes=Module["_crypto_sign_ed25519ph_statebytes"]=asm["_crypto_sign_ed25519ph_statebytes"];var _crypto_aead_xchacha20poly1305_ietf_keybytes=Module["_crypto_aead_xchacha20poly1305_ietf_keybytes"]=asm["_crypto_aead_xchacha20poly1305_ietf_keybytes"];var _crypto_auth_primitive=Module["_crypto_auth_primitive"]=asm["_crypto_auth_primitive"];var _crypto_core_salsa2012_keybytes=Module["_crypto_core_salsa2012_keybytes"]=asm["_crypto_core_salsa2012_keybytes"];var _malloc=Module["_malloc"]=asm["_malloc"];var _crypto_stream_noncebytes=Module["_crypto_stream_noncebytes"]=asm["_crypto_stream_noncebytes"];var _crypto_secretbox_xchacha20poly1305_keybytes=Module["_crypto_secretbox_xchacha20poly1305_keybytes"]=asm["_crypto_secretbox_xchacha20poly1305_keybytes"];var _crypto_secretbox_xsalsa20poly1305_keybytes=Module["_crypto_secretbox_xsalsa20poly1305_keybytes"]=asm["_crypto_secretbox_xsalsa20poly1305_keybytes"];var _crypto_pwhash_saltbytes=Module["_crypto_pwhash_saltbytes"]=asm["_crypto_pwhash_saltbytes"];var _crypto_secretbox_noncebytes=Module["_crypto_secretbox_noncebytes"]=asm["_crypto_secretbox_noncebytes"];var _crypto_secretbox_xsalsa20poly1305_macbytes=Module["_crypto_secretbox_xsalsa20poly1305_macbytes"]=asm["_crypto_secretbox_xsalsa20poly1305_macbytes"];var _crypto_pwhash_argon2i_opslimit_max=Module["_crypto_pwhash_argon2i_opslimit_max"]=asm["_crypto_pwhash_argon2i_opslimit_max"];var _crypto_auth_hmacsha512_bytes=Module["_crypto_auth_hmacsha512_bytes"]=asm["_crypto_auth_hmacsha512_bytes"];var _crypto_generichash_keybytes=Module["_crypto_generichash_keybytes"]=asm["_crypto_generichash_keybytes"];var _crypto_hash_bytes=Module["_crypto_hash_bytes"]=asm["_crypto_hash_bytes"];var _crypto_sign_publickeybytes=Module["_crypto_sign_publickeybytes"]=asm["_crypto_sign_publickeybytes"];var _crypto_pwhash_argon2i_memlimit_moderate=Module["_crypto_pwhash_argon2i_memlimit_moderate"]=asm["_crypto_pwhash_argon2i_memlimit_moderate"];var _crypto_generichash_blake2b=Module["_crypto_generichash_blake2b"]=asm["_crypto_generichash_blake2b"];var _crypto_core_hchacha20_keybytes=Module["_crypto_core_hchacha20_keybytes"]=asm["_crypto_core_hchacha20_keybytes"];var ___uremdi3=Module["___uremdi3"]=asm["___uremdi3"];var _crypto_pwhash_argon2i_opslimit_moderate=Module["_crypto_pwhash_argon2i_opslimit_moderate"]=asm["_crypto_pwhash_argon2i_opslimit_moderate"];var _randombytes_implementation_name=Module["_randombytes_implementation_name"]=asm["_randombytes_implementation_name"];var _crypto_stream_xchacha20_noncebytes=Module["_crypto_stream_xchacha20_noncebytes"]=asm["_crypto_stream_xchacha20_noncebytes"];var _crypto_sign_ed25519_verify_detached=Module["_crypto_sign_ed25519_verify_detached"]=asm["_crypto_sign_ed25519_verify_detached"];var _crypto_hash_sha512_statebytes=Module["_crypto_hash_sha512_statebytes"]=asm["_crypto_hash_sha512_statebytes"];var _crypto_secretbox_primitive=Module["_crypto_secretbox_primitive"]=asm["_crypto_secretbox_primitive"];var _crypto_verify_32_bytes=Module["_crypto_verify_32_bytes"]=asm["_crypto_verify_32_bytes"];var stackRestore=Module["stackRestore"]=asm["stackRestore"];var _crypto_kdf_keygen=Module["_crypto_kdf_keygen"]=asm["_crypto_kdf_keygen"];var _crypto_stream_xsalsa20_xor=Module["_crypto_stream_xsalsa20_xor"]=asm["_crypto_stream_xsalsa20_xor"];var _crypto_stream_chacha20_ietf_keygen=Module["_crypto_stream_chacha20_ietf_keygen"]=asm["_crypto_stream_chacha20_ietf_keygen"];var _crypto_stream_chacha20_keygen=Module["_crypto_stream_chacha20_keygen"]=asm["_crypto_stream_chacha20_keygen"];var _crypto_box_easy=Module["_crypto_box_easy"]=asm["_crypto_box_easy"];var _crypto_hash_sha256=Module["_crypto_hash_sha256"]=asm["_crypto_hash_sha256"];var _crypto_sign_ed25519_seedbytes=Module["_crypto_sign_ed25519_seedbytes"]=asm["_crypto_sign_ed25519_seedbytes"];var _crypto_pwhash_alg_argon2i13=Module["_crypto_pwhash_alg_argon2i13"]=asm["_crypto_pwhash_alg_argon2i13"];var _crypto_box_curve25519xchacha20poly1305_seal_open=Module["_crypto_box_curve25519xchacha20poly1305_seal_open"]=asm["_crypto_box_curve25519xchacha20poly1305_seal_open"];var _crypto_pwhash_opslimit_min=Module["_crypto_pwhash_opslimit_min"]=asm["_crypto_pwhash_opslimit_min"];var _crypto_box_curve25519xsalsa20poly1305_publickeybytes=Module["_crypto_box_curve25519xsalsa20poly1305_publickeybytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_publickeybytes"];var _crypto_kdf_blake2b_bytes_max=Module["_crypto_kdf_blake2b_bytes_max"]=asm["_crypto_kdf_blake2b_bytes_max"];var _crypto_hash_sha256_statebytes=Module["_crypto_hash_sha256_statebytes"]=asm["_crypto_hash_sha256_statebytes"];var _crypto_stream_chacha20_ietf_noncebytes=Module["_crypto_stream_chacha20_ietf_noncebytes"]=asm["_crypto_stream_chacha20_ietf_noncebytes"];var _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive=Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive"]=asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive"];var _crypto_box_curve25519xchacha20poly1305_open_easy=Module["_crypto_box_curve25519xchacha20poly1305_open_easy"]=asm["_crypto_box_curve25519xchacha20poly1305_open_easy"];var _crypto_box_beforenm=Module["_crypto_box_beforenm"]=asm["_crypto_box_beforenm"];var _crypto_box_curve25519xsalsa20poly1305_afternm=Module["_crypto_box_curve25519xsalsa20poly1305_afternm"]=asm["_crypto_box_curve25519xsalsa20poly1305_afternm"];var _crypto_sign_statebytes=Module["_crypto_sign_statebytes"]=asm["_crypto_sign_statebytes"];var _crypto_sign_open=Module["_crypto_sign_open"]=asm["_crypto_sign_open"];var stackSave=Module["stackSave"]=asm["stackSave"];var _crypto_box_seed_keypair=Module["_crypto_box_seed_keypair"]=asm["_crypto_box_seed_keypair"];var _crypto_auth_hmacsha512_init=Module["_crypto_auth_hmacsha512_init"]=asm["_crypto_auth_hmacsha512_init"];var _crypto_sign_ed25519_sk_to_pk=Module["_crypto_sign_ed25519_sk_to_pk"]=asm["_crypto_sign_ed25519_sk_to_pk"];var _crypto_scalarmult_curve25519=Module["_crypto_scalarmult_curve25519"]=asm["_crypto_scalarmult_curve25519"];var _crypto_box_open_easy=Module["_crypto_box_open_easy"]=asm["_crypto_box_open_easy"];var _crypto_auth_hmacsha512=Module["_crypto_auth_hmacsha512"]=asm["_crypto_auth_hmacsha512"];var _crypto_stream_keygen=Module["_crypto_stream_keygen"]=asm["_crypto_stream_keygen"];var _crypto_secretbox_xsalsa20poly1305_zerobytes=Module["_crypto_secretbox_xsalsa20poly1305_zerobytes"]=asm["_crypto_secretbox_xsalsa20poly1305_zerobytes"];var _crypto_auth_hmacsha512256_keybytes=Module["_crypto_auth_hmacsha512256_keybytes"]=asm["_crypto_auth_hmacsha512256_keybytes"];var _crypto_aead_chacha20poly1305_keybytes=Module["_crypto_aead_chacha20poly1305_keybytes"]=asm["_crypto_aead_chacha20poly1305_keybytes"];var _free=Module["_free"]=asm["_free"];var _crypto_kx_client_session_keys=Module["_crypto_kx_client_session_keys"]=asm["_crypto_kx_client_session_keys"];var _crypto_sign_verify_detached=Module["_crypto_sign_verify_detached"]=asm["_crypto_sign_verify_detached"];var _crypto_onetimeauth_poly1305_keybytes=Module["_crypto_onetimeauth_poly1305_keybytes"]=asm["_crypto_onetimeauth_poly1305_keybytes"];var _crypto_sign_ed25519_secretkeybytes=Module["_crypto_sign_ed25519_secretkeybytes"]=asm["_crypto_sign_ed25519_secretkeybytes"];var _crypto_kdf_blake2b_contextbytes=Module["_crypto_kdf_blake2b_contextbytes"]=asm["_crypto_kdf_blake2b_contextbytes"];var _crypto_stream_salsa2012=Module["_crypto_stream_salsa2012"]=asm["_crypto_stream_salsa2012"];var _crypto_sign_seedbytes=Module["_crypto_sign_seedbytes"]=asm["_crypto_sign_seedbytes"];var _crypto_box_curve25519xchacha20poly1305_beforenmbytes=Module["_crypto_box_curve25519xchacha20poly1305_beforenmbytes"]=asm["_crypto_box_curve25519xchacha20poly1305_beforenmbytes"];var _randombytes_random=Module["_randombytes_random"]=asm["_randombytes_random"];var _crypto_sign_ed25519ph_update=Module["_crypto_sign_ed25519ph_update"]=asm["_crypto_sign_ed25519ph_update"];var _crypto_auth_hmacsha256_keygen=Module["_crypto_auth_hmacsha256_keygen"]=asm["_crypto_auth_hmacsha256_keygen"];var _crypto_auth_hmacsha256_statebytes=Module["_crypto_auth_hmacsha256_statebytes"]=asm["_crypto_auth_hmacsha256_statebytes"];var _randombytes_buf_deterministic=Module["_randombytes_buf_deterministic"]=asm["_randombytes_buf_deterministic"];var _crypto_aead_chacha20poly1305_encrypt_detached=Module["_crypto_aead_chacha20poly1305_encrypt_detached"]=asm["_crypto_aead_chacha20poly1305_encrypt_detached"];var _crypto_stream_xsalsa20_keygen=Module["_crypto_stream_xsalsa20_keygen"]=asm["_crypto_stream_xsalsa20_keygen"];var _crypto_hash_primitive=Module["_crypto_hash_primitive"]=asm["_crypto_hash_primitive"];var _crypto_pwhash_argon2id_passwd_max=Module["_crypto_pwhash_argon2id_passwd_max"]=asm["_crypto_pwhash_argon2id_passwd_max"];var _crypto_shorthash_siphash24=Module["_crypto_shorthash_siphash24"]=asm["_crypto_shorthash_siphash24"];var _crypto_box_curve25519xsalsa20poly1305_macbytes=Module["_crypto_box_curve25519xsalsa20poly1305_macbytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_macbytes"];var _crypto_pwhash_scryptsalsa208sha256_saltbytes=Module["_crypto_pwhash_scryptsalsa208sha256_saltbytes"]=asm["_crypto_pwhash_scryptsalsa208sha256_saltbytes"];var _crypto_sign_ed25519=Module["_crypto_sign_ed25519"]=asm["_crypto_sign_ed25519"];var _crypto_box_curve25519xchacha20poly1305_seal=Module["_crypto_box_curve25519xchacha20poly1305_seal"]=asm["_crypto_box_curve25519xchacha20poly1305_seal"];var _crypto_core_salsa20_constbytes=Module["_crypto_core_salsa20_constbytes"]=asm["_crypto_core_salsa20_constbytes"];var _crypto_pwhash_argon2id_str_verify=Module["_crypto_pwhash_argon2id_str_verify"]=asm["_crypto_pwhash_argon2id_str_verify"];var _crypto_box_boxzerobytes=Module["_crypto_box_boxzerobytes"]=asm["_crypto_box_boxzerobytes"];var _crypto_pwhash_argon2i_saltbytes=Module["_crypto_pwhash_argon2i_saltbytes"]=asm["_crypto_pwhash_argon2i_saltbytes"];var _crypto_box_curve25519xchacha20poly1305_open_detached_afternm=Module["_crypto_box_curve25519xchacha20poly1305_open_detached_afternm"]=asm["_crypto_box_curve25519xchacha20poly1305_open_detached_afternm"];var _crypto_box_curve25519xsalsa20poly1305_beforenmbytes=Module["_crypto_box_curve25519xsalsa20poly1305_beforenmbytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_beforenmbytes"];var _crypto_stream_xchacha20_keygen=Module["_crypto_stream_xchacha20_keygen"]=asm["_crypto_stream_xchacha20_keygen"];var _crypto_core_hchacha20_constbytes=Module["_crypto_core_hchacha20_constbytes"]=asm["_crypto_core_hchacha20_constbytes"];var _crypto_stream_xchacha20_xor=Module["_crypto_stream_xchacha20_xor"]=asm["_crypto_stream_xchacha20_xor"];var _randombytes_seedbytes=Module["_randombytes_seedbytes"]=asm["_randombytes_seedbytes"];var _crypto_sign_final_create=Module["_crypto_sign_final_create"]=asm["_crypto_sign_final_create"];var _crypto_kx_secretkeybytes=Module["_crypto_kx_secretkeybytes"]=asm["_crypto_kx_secretkeybytes"];var _crypto_box_detached=Module["_crypto_box_detached"]=asm["_crypto_box_detached"];var _randombytes_buf=Module["_randombytes_buf"]=asm["_randombytes_buf"];var _crypto_generichash_blake2b_saltbytes=Module["_crypto_generichash_blake2b_saltbytes"]=asm["_crypto_generichash_blake2b_saltbytes"];var _crypto_box_open_detached=Module["_crypto_box_open_detached"]=asm["_crypto_box_open_detached"];var _crypto_kx_seedbytes=Module["_crypto_kx_seedbytes"]=asm["_crypto_kx_seedbytes"];var _crypto_pwhash_argon2id_strprefix=Module["_crypto_pwhash_argon2id_strprefix"]=asm["_crypto_pwhash_argon2id_strprefix"];var _crypto_box_curve25519xchacha20poly1305_open_detached=Module["_crypto_box_curve25519xchacha20poly1305_open_detached"]=asm["_crypto_box_curve25519xchacha20poly1305_open_detached"];var _crypto_generichash_blake2b_keybytes=Module["_crypto_generichash_blake2b_keybytes"]=asm["_crypto_generichash_blake2b_keybytes"];var _crypto_box_curve25519xchacha20poly1305_easy=Module["_crypto_box_curve25519xchacha20poly1305_easy"]=asm["_crypto_box_curve25519xchacha20poly1305_easy"];var _crypto_pwhash_argon2i_bytes_min=Module["_crypto_pwhash_argon2i_bytes_min"]=asm["_crypto_pwhash_argon2i_bytes_min"];var _crypto_pwhash_scryptsalsa208sha256_str=Module["_crypto_pwhash_scryptsalsa208sha256_str"]=asm["_crypto_pwhash_scryptsalsa208sha256_str"];var _crypto_pwhash_argon2id_bytes_min=Module["_crypto_pwhash_argon2id_bytes_min"]=asm["_crypto_pwhash_argon2id_bytes_min"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _crypto_box_seedbytes=Module["_crypto_box_seedbytes"]=asm["_crypto_box_seedbytes"];var _crypto_generichash_blake2b_bytes_min=Module["_crypto_generichash_blake2b_bytes_min"]=asm["_crypto_generichash_blake2b_bytes_min"];var _crypto_hash=Module["_crypto_hash"]=asm["_crypto_hash"];var _crypto_generichash_blake2b_statebytes=Module["_crypto_generichash_blake2b_statebytes"]=asm["_crypto_generichash_blake2b_statebytes"];var _crypto_sign_ed25519ph_final_create=Module["_crypto_sign_ed25519ph_final_create"]=asm["_crypto_sign_ed25519ph_final_create"];var _crypto_aead_chacha20poly1305_ietf_decrypt_detached=Module["_crypto_aead_chacha20poly1305_ietf_decrypt_detached"]=asm["_crypto_aead_chacha20poly1305_ietf_decrypt_detached"];var _crypto_generichash_final=Module["_crypto_generichash_final"]=asm["_crypto_generichash_final"];var _crypto_auth_hmacsha512_update=Module["_crypto_auth_hmacsha512_update"]=asm["_crypto_auth_hmacsha512_update"];var _crypto_auth_hmacsha256=Module["_crypto_auth_hmacsha256"]=asm["_crypto_auth_hmacsha256"];var _crypto_box_keypair=Module["_crypto_box_keypair"]=asm["_crypto_box_keypair"];var _crypto_hash_sha256_bytes=Module["_crypto_hash_sha256_bytes"]=asm["_crypto_hash_sha256_bytes"];var ___udivdi3=Module["___udivdi3"]=asm["___udivdi3"];var _crypto_pwhash_argon2i_passwd_max=Module["_crypto_pwhash_argon2i_passwd_max"]=asm["_crypto_pwhash_argon2i_passwd_max"];var _sodium_init=Module["_sodium_init"]=asm["_sodium_init"];var _crypto_secretbox_macbytes=Module["_crypto_secretbox_macbytes"]=asm["_crypto_secretbox_macbytes"];var _crypto_aead_xchacha20poly1305_ietf_npubbytes=Module["_crypto_aead_xchacha20poly1305_ietf_npubbytes"]=asm["_crypto_aead_xchacha20poly1305_ietf_npubbytes"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _crypto_pwhash_argon2i_opslimit_min=Module["_crypto_pwhash_argon2i_opslimit_min"]=asm["_crypto_pwhash_argon2i_opslimit_min"];var setTempRet0=Module["setTempRet0"]=asm["setTempRet0"];var _crypto_sign_seed_keypair=Module["_crypto_sign_seed_keypair"]=asm["_crypto_sign_seed_keypair"];var _crypto_core_hchacha20_inputbytes=Module["_crypto_core_hchacha20_inputbytes"]=asm["_crypto_core_hchacha20_inputbytes"];var ___muldi3=Module["___muldi3"]=asm["___muldi3"];var _crypto_core_salsa2012_constbytes=Module["_crypto_core_salsa2012_constbytes"]=asm["_crypto_core_salsa2012_constbytes"];var _crypto_kx_seed_keypair=Module["_crypto_kx_seed_keypair"]=asm["_crypto_kx_seed_keypair"];var _crypto_box_curve25519xchacha20poly1305_detached_afternm=Module["_crypto_box_curve25519xchacha20poly1305_detached_afternm"]=asm["_crypto_box_curve25519xchacha20poly1305_detached_afternm"];var _crypto_box_curve25519xsalsa20poly1305=Module["_crypto_box_curve25519xsalsa20poly1305"]=asm["_crypto_box_curve25519xsalsa20poly1305"];var _crypto_aead_chacha20poly1305_nsecbytes=Module["_crypto_aead_chacha20poly1305_nsecbytes"]=asm["_crypto_aead_chacha20poly1305_nsecbytes"];var _sodium_library_minimal=Module["_sodium_library_minimal"]=asm["_sodium_library_minimal"];var _crypto_aead_xchacha20poly1305_ietf_nsecbytes=Module["_crypto_aead_xchacha20poly1305_ietf_nsecbytes"]=asm["_crypto_aead_xchacha20poly1305_ietf_nsecbytes"];var _crypto_pwhash_argon2i_strbytes=Module["_crypto_pwhash_argon2i_strbytes"]=asm["_crypto_pwhash_argon2i_strbytes"];var _crypto_pwhash_argon2i_memlimit_max=Module["_crypto_pwhash_argon2i_memlimit_max"]=asm["_crypto_pwhash_argon2i_memlimit_max"];var _crypto_generichash_blake2b_salt_personal=Module["_crypto_generichash_blake2b_salt_personal"]=asm["_crypto_generichash_blake2b_salt_personal"];var _crypto_stream_aes128ctr_beforenmbytes=Module["_crypto_stream_aes128ctr_beforenmbytes"]=asm["_crypto_stream_aes128ctr_beforenmbytes"];var _crypto_kdf_derive_from_key=Module["_crypto_kdf_derive_from_key"]=asm["_crypto_kdf_derive_from_key"];var _crypto_secretbox_xsalsa20poly1305_noncebytes=Module["_crypto_secretbox_xsalsa20poly1305_noncebytes"]=asm["_crypto_secretbox_xsalsa20poly1305_noncebytes"];var _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive=Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive"]=asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive"];var _crypto_pwhash_argon2i_memlimit_interactive=Module["_crypto_pwhash_argon2i_memlimit_interactive"]=asm["_crypto_pwhash_argon2i_memlimit_interactive"];var _crypto_pwhash_alg_argon2id13=Module["_crypto_pwhash_alg_argon2id13"]=asm["_crypto_pwhash_alg_argon2id13"];var _crypto_stream_keybytes=Module["_crypto_stream_keybytes"]=asm["_crypto_stream_keybytes"];var _crypto_pwhash_memlimit_min=Module["_crypto_pwhash_memlimit_min"]=asm["_crypto_pwhash_memlimit_min"];var _crypto_aead_chacha20poly1305_ietf_npubbytes=Module["_crypto_aead_chacha20poly1305_ietf_npubbytes"]=asm["_crypto_aead_chacha20poly1305_ietf_npubbytes"];var _crypto_stream_salsa208_noncebytes=Module["_crypto_stream_salsa208_noncebytes"]=asm["_crypto_stream_salsa208_noncebytes"];var _sodium_library_version_minor=Module["_sodium_library_version_minor"]=asm["_sodium_library_version_minor"];var _crypto_onetimeauth_bytes=Module["_crypto_onetimeauth_bytes"]=asm["_crypto_onetimeauth_bytes"];var _crypto_box_open=Module["_crypto_box_open"]=asm["_crypto_box_open"];var _crypto_secretbox_xchacha20poly1305_open_easy=Module["_crypto_secretbox_xchacha20poly1305_open_easy"]=asm["_crypto_secretbox_xchacha20poly1305_open_easy"];var _crypto_scalarmult_curve25519_base=Module["_crypto_scalarmult_curve25519_base"]=asm["_crypto_scalarmult_curve25519_base"];var _crypto_sign_ed25519_open=Module["_crypto_sign_ed25519_open"]=asm["_crypto_sign_ed25519_open"];var _crypto_stream_chacha20_ietf_keybytes=Module["_crypto_stream_chacha20_ietf_keybytes"]=asm["_crypto_stream_chacha20_ietf_keybytes"];var _crypto_box_noncebytes=Module["_crypto_box_noncebytes"]=asm["_crypto_box_noncebytes"];var _crypto_core_hchacha20_outputbytes=Module["_crypto_core_hchacha20_outputbytes"]=asm["_crypto_core_hchacha20_outputbytes"];var _crypto_stream_salsa2012_xor=Module["_crypto_stream_salsa2012_xor"]=asm["_crypto_stream_salsa2012_xor"];var _crypto_onetimeauth_keygen=Module["_crypto_onetimeauth_keygen"]=asm["_crypto_onetimeauth_keygen"];var _crypto_pwhash_strbytes=Module["_crypto_pwhash_strbytes"]=asm["_crypto_pwhash_strbytes"];var _crypto_auth_hmacsha512256_update=Module["_crypto_auth_hmacsha512256_update"]=asm["_crypto_auth_hmacsha512256_update"];var _crypto_core_salsa208_outputbytes=Module["_crypto_core_salsa208_outputbytes"]=asm["_crypto_core_salsa208_outputbytes"];var _crypto_onetimeauth_poly1305=Module["_crypto_onetimeauth_poly1305"]=asm["_crypto_onetimeauth_poly1305"];var _crypto_secretbox_xchacha20poly1305_macbytes=Module["_crypto_secretbox_xchacha20poly1305_macbytes"]=asm["_crypto_secretbox_xchacha20poly1305_macbytes"];var _crypto_kdf_bytes_min=Module["_crypto_kdf_bytes_min"]=asm["_crypto_kdf_bytes_min"];var _crypto_sign_ed25519_sk_to_seed=Module["_crypto_sign_ed25519_sk_to_seed"]=asm["_crypto_sign_ed25519_sk_to_seed"];var _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive=Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive"]=asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive"];var _crypto_stream_xsalsa20=Module["_crypto_stream_xsalsa20"]=asm["_crypto_stream_xsalsa20"];var _crypto_box_open_easy_afternm=Module["_crypto_box_open_easy_afternm"]=asm["_crypto_box_open_easy_afternm"];var _crypto_box_curve25519xsalsa20poly1305_seedbytes=Module["_crypto_box_curve25519xsalsa20poly1305_seedbytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_seedbytes"];var _crypto_stream_salsa20_keybytes=Module["_crypto_stream_salsa20_keybytes"]=asm["_crypto_stream_salsa20_keybytes"];var _crypto_kdf_primitive=Module["_crypto_kdf_primitive"]=asm["_crypto_kdf_primitive"];var _crypto_sign_ed25519ph_final_verify=Module["_crypto_sign_ed25519ph_final_verify"]=asm["_crypto_sign_ed25519ph_final_verify"];var _crypto_sign_ed25519_publickeybytes=Module["_crypto_sign_ed25519_publickeybytes"]=asm["_crypto_sign_ed25519_publickeybytes"];var _crypto_stream_aes128ctr=Module["_crypto_stream_aes128ctr"]=asm["_crypto_stream_aes128ctr"];var _crypto_shorthash=Module["_crypto_shorthash"]=asm["_crypto_shorthash"];var _crypto_auth_keybytes=Module["_crypto_auth_keybytes"]=asm["_crypto_auth_keybytes"];var _crypto_box_curve25519xsalsa20poly1305_open_afternm=Module["_crypto_box_curve25519xsalsa20poly1305_open_afternm"]=asm["_crypto_box_curve25519xsalsa20poly1305_open_afternm"];var _crypto_aead_chacha20poly1305_npubbytes=Module["_crypto_aead_chacha20poly1305_npubbytes"]=asm["_crypto_aead_chacha20poly1305_npubbytes"];var _crypto_aead_xchacha20poly1305_ietf_abytes=Module["_crypto_aead_xchacha20poly1305_ietf_abytes"]=asm["_crypto_aead_xchacha20poly1305_ietf_abytes"];var _crypto_onetimeauth_poly1305_final=Module["_crypto_onetimeauth_poly1305_final"]=asm["_crypto_onetimeauth_poly1305_final"];var _crypto_onetimeauth_poly1305_bytes=Module["_crypto_onetimeauth_poly1305_bytes"]=asm["_crypto_onetimeauth_poly1305_bytes"];var _crypto_box_curve25519xsalsa20poly1305_seed_keypair=Module["_crypto_box_curve25519xsalsa20poly1305_seed_keypair"]=asm["_crypto_box_curve25519xsalsa20poly1305_seed_keypair"];var _crypto_box_primitive=Module["_crypto_box_primitive"]=asm["_crypto_box_primitive"];var _crypto_pwhash_str=Module["_crypto_pwhash_str"]=asm["_crypto_pwhash_str"];var _crypto_auth_hmacsha512_keybytes=Module["_crypto_auth_hmacsha512_keybytes"]=asm["_crypto_auth_hmacsha512_keybytes"];var _crypto_auth=Module["_crypto_auth"]=asm["_crypto_auth"];var _crypto_pwhash_scryptsalsa208sha256_bytes_min=Module["_crypto_pwhash_scryptsalsa208sha256_bytes_min"]=asm["_crypto_pwhash_scryptsalsa208sha256_bytes_min"];var _crypto_core_salsa20_keybytes=Module["_crypto_core_salsa20_keybytes"]=asm["_crypto_core_salsa20_keybytes"];var _crypto_box_afternm=Module["_crypto_box_afternm"]=asm["_crypto_box_afternm"];var _crypto_core_salsa208_constbytes=Module["_crypto_core_salsa208_constbytes"]=asm["_crypto_core_salsa208_constbytes"];var _crypto_pwhash_argon2id_memlimit_sensitive=Module["_crypto_pwhash_argon2id_memlimit_sensitive"]=asm["_crypto_pwhash_argon2id_memlimit_sensitive"];var _crypto_onetimeauth_primitive=Module["_crypto_onetimeauth_primitive"]=asm["_crypto_onetimeauth_primitive"];var _crypto_pwhash_scryptsalsa208sha256_str_verify=Module["_crypto_pwhash_scryptsalsa208sha256_str_verify"]=asm["_crypto_pwhash_scryptsalsa208sha256_str_verify"];var _sodium_version_string=Module["_sodium_version_string"]=asm["_sodium_version_string"];var _crypto_stream_xchacha20_xor_ic=Module["_crypto_stream_xchacha20_xor_ic"]=asm["_crypto_stream_xchacha20_xor_ic"];var _crypto_pwhash_scryptsalsa208sha256_passwd_min=Module["_crypto_pwhash_scryptsalsa208sha256_passwd_min"]=asm["_crypto_pwhash_scryptsalsa208sha256_passwd_min"];var _crypto_stream_chacha20_ietf=Module["_crypto_stream_chacha20_ietf"]=asm["_crypto_stream_chacha20_ietf"];var _crypto_generichash=Module["_crypto_generichash"]=asm["_crypto_generichash"];var _crypto_core_hsalsa20_outputbytes=Module["_crypto_core_hsalsa20_outputbytes"]=asm["_crypto_core_hsalsa20_outputbytes"];var _crypto_pwhash_opslimit_interactive=Module["_crypto_pwhash_opslimit_interactive"]=asm["_crypto_pwhash_opslimit_interactive"];var _crypto_stream_aes128ctr_beforenm=Module["_crypto_stream_aes128ctr_beforenm"]=asm["_crypto_stream_aes128ctr_beforenm"];var getTempRet0=Module["getTempRet0"]=asm["getTempRet0"];var _crypto_box_curve25519xsalsa20poly1305_noncebytes=Module["_crypto_box_curve25519xsalsa20poly1305_noncebytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_noncebytes"];var _crypto_stream_salsa2012_noncebytes=Module["_crypto_stream_salsa2012_noncebytes"]=asm["_crypto_stream_salsa2012_noncebytes"];var _crypto_core_salsa208_keybytes=Module["_crypto_core_salsa208_keybytes"]=asm["_crypto_core_salsa208_keybytes"];var _crypto_aead_chacha20poly1305_ietf_decrypt=Module["_crypto_aead_chacha20poly1305_ietf_decrypt"]=asm["_crypto_aead_chacha20poly1305_ietf_decrypt"];var _crypto_auth_hmacsha512256_init=Module["_crypto_auth_hmacsha512256_init"]=asm["_crypto_auth_hmacsha512256_init"];var _crypto_kx_server_session_keys=Module["_crypto_kx_server_session_keys"]=asm["_crypto_kx_server_session_keys"];var _crypto_onetimeauth_poly1305_verify=Module["_crypto_onetimeauth_poly1305_verify"]=asm["_crypto_onetimeauth_poly1305_verify"];var _crypto_auth_hmacsha512_final=Module["_crypto_auth_hmacsha512_final"]=asm["_crypto_auth_hmacsha512_final"];var _crypto_stream_aes128ctr_noncebytes=Module["_crypto_stream_aes128ctr_noncebytes"]=asm["_crypto_stream_aes128ctr_noncebytes"];var _crypto_box_secretkeybytes=Module["_crypto_box_secretkeybytes"]=asm["_crypto_box_secretkeybytes"];var _crypto_stream_salsa2012_keygen=Module["_crypto_stream_salsa2012_keygen"]=asm["_crypto_stream_salsa2012_keygen"];var _crypto_onetimeauth_update=Module["_crypto_onetimeauth_update"]=asm["_crypto_onetimeauth_update"];var _crypto_core_salsa20=Module["_crypto_core_salsa20"]=asm["_crypto_core_salsa20"];var _crypto_pwhash_memlimit_interactive=Module["_crypto_pwhash_memlimit_interactive"]=asm["_crypto_pwhash_memlimit_interactive"];var _crypto_scalarmult_bytes=Module["_crypto_scalarmult_bytes"]=asm["_crypto_scalarmult_bytes"];var _crypto_secretbox_zerobytes=Module["_crypto_secretbox_zerobytes"]=asm["_crypto_secretbox_zerobytes"];var _crypto_pwhash_argon2id_memlimit_moderate=Module["_crypto_pwhash_argon2id_memlimit_moderate"]=asm["_crypto_pwhash_argon2id_memlimit_moderate"];var _crypto_secretbox_detached=Module["_crypto_secretbox_detached"]=asm["_crypto_secretbox_detached"];var _crypto_stream_xor=Module["_crypto_stream_xor"]=asm["_crypto_stream_xor"];var _crypto_secretbox_xchacha20poly1305_easy=Module["_crypto_secretbox_xchacha20poly1305_easy"]=asm["_crypto_secretbox_xchacha20poly1305_easy"];var _crypto_secretbox_easy=Module["_crypto_secretbox_easy"]=asm["_crypto_secretbox_easy"];var _crypto_aead_xchacha20poly1305_ietf_decrypt_detached=Module["_crypto_aead_xchacha20poly1305_ietf_decrypt_detached"]=asm["_crypto_aead_xchacha20poly1305_ietf_decrypt_detached"];var _crypto_stream_salsa20=Module["_crypto_stream_salsa20"]=asm["_crypto_stream_salsa20"];var _sodium_bin2hex=Module["_sodium_bin2hex"]=asm["_sodium_bin2hex"];var _crypto_auth_hmacsha512_statebytes=Module["_crypto_auth_hmacsha512_statebytes"]=asm["_crypto_auth_hmacsha512_statebytes"];var _crypto_pwhash_argon2i_opslimit_sensitive=Module["_crypto_pwhash_argon2i_opslimit_sensitive"]=asm["_crypto_pwhash_argon2i_opslimit_sensitive"];var _crypto_generichash_blake2b_bytes_max=Module["_crypto_generichash_blake2b_bytes_max"]=asm["_crypto_generichash_blake2b_bytes_max"];var _crypto_hash_sha256_update=Module["_crypto_hash_sha256_update"]=asm["_crypto_hash_sha256_update"];var _crypto_core_hsalsa20_constbytes=Module["_crypto_core_hsalsa20_constbytes"]=asm["_crypto_core_hsalsa20_constbytes"];var _crypto_box_easy_afternm=Module["_crypto_box_easy_afternm"]=asm["_crypto_box_easy_afternm"];var _crypto_auth_hmacsha512256_verify=Module["_crypto_auth_hmacsha512256_verify"]=asm["_crypto_auth_hmacsha512256_verify"];var _crypto_pwhash_memlimit_moderate=Module["_crypto_pwhash_memlimit_moderate"]=asm["_crypto_pwhash_memlimit_moderate"];var _crypto_core_salsa20_inputbytes=Module["_crypto_core_salsa20_inputbytes"]=asm["_crypto_core_salsa20_inputbytes"];var _crypto_box_publickeybytes=Module["_crypto_box_publickeybytes"]=asm["_crypto_box_publickeybytes"];var _crypto_sign_secretkeybytes=Module["_crypto_sign_secretkeybytes"]=asm["_crypto_sign_secretkeybytes"];var ___muldsi3=Module["___muldsi3"]=asm["___muldsi3"];var _crypto_scalarmult_scalarbytes=Module["_crypto_scalarmult_scalarbytes"]=asm["_crypto_scalarmult_scalarbytes"];var _crypto_verify_32=Module["_crypto_verify_32"]=asm["_crypto_verify_32"];var _crypto_kx_sessionkeybytes=Module["_crypto_kx_sessionkeybytes"]=asm["_crypto_kx_sessionkeybytes"];var _crypto_aead_chacha20poly1305_decrypt=Module["_crypto_aead_chacha20poly1305_decrypt"]=asm["_crypto_aead_chacha20poly1305_decrypt"];var _crypto_pwhash_argon2id_opslimit_moderate=Module["_crypto_pwhash_argon2id_opslimit_moderate"]=asm["_crypto_pwhash_argon2id_opslimit_moderate"];var _crypto_pwhash_argon2id_opslimit_min=Module["_crypto_pwhash_argon2id_opslimit_min"]=asm["_crypto_pwhash_argon2id_opslimit_min"];var _crypto_sign=Module["_crypto_sign"]=asm["_crypto_sign"];var _crypto_pwhash_argon2id_memlimit_min=Module["_crypto_pwhash_argon2id_memlimit_min"]=asm["_crypto_pwhash_argon2id_memlimit_min"];var _crypto_pwhash_passwd_max=Module["_crypto_pwhash_passwd_max"]=asm["_crypto_pwhash_passwd_max"];var _crypto_pwhash_scryptsalsa208sha256_opslimit_min=Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_min"]=asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_min"];var _sodium_hex2bin=Module["_sodium_hex2bin"]=asm["_sodium_hex2bin"];var _crypto_pwhash_argon2i_alg_argon2i13=Module["_crypto_pwhash_argon2i_alg_argon2i13"]=asm["_crypto_pwhash_argon2i_alg_argon2i13"];var _crypto_secretbox_keybytes=Module["_crypto_secretbox_keybytes"]=asm["_crypto_secretbox_keybytes"];var _crypto_pwhash_argon2id_alg_argon2id13=Module["_crypto_pwhash_argon2id_alg_argon2id13"]=asm["_crypto_pwhash_argon2id_alg_argon2id13"];var _randombytes=Module["_randombytes"]=asm["_randombytes"];var _crypto_aead_chacha20poly1305_ietf_abytes=Module["_crypto_aead_chacha20poly1305_ietf_abytes"]=asm["_crypto_aead_chacha20poly1305_ietf_abytes"];var _crypto_stream_salsa20_keygen=Module["_crypto_stream_salsa20_keygen"]=asm["_crypto_stream_salsa20_keygen"];var _crypto_generichash_bytes_max=Module["_crypto_generichash_bytes_max"]=asm["_crypto_generichash_bytes_max"];var _crypto_pwhash_argon2i_passwd_min=Module["_crypto_pwhash_argon2i_passwd_min"]=asm["_crypto_pwhash_argon2i_passwd_min"];var _crypto_pwhash_opslimit_sensitive=Module["_crypto_pwhash_opslimit_sensitive"]=asm["_crypto_pwhash_opslimit_sensitive"];var _crypto_sign_init=Module["_crypto_sign_init"]=asm["_crypto_sign_init"];var _crypto_generichash_blake2b_personalbytes=Module["_crypto_generichash_blake2b_personalbytes"]=asm["_crypto_generichash_blake2b_personalbytes"];var _crypto_stream_chacha20_xor_ic=Module["_crypto_stream_chacha20_xor_ic"]=asm["_crypto_stream_chacha20_xor_ic"];var _crypto_box_curve25519xchacha20poly1305_seedbytes=Module["_crypto_box_curve25519xchacha20poly1305_seedbytes"]=asm["_crypto_box_curve25519xchacha20poly1305_seedbytes"];var _crypto_onetimeauth_verify=Module["_crypto_onetimeauth_verify"]=asm["_crypto_onetimeauth_verify"];var _crypto_sign_ed25519_detached=Module["_crypto_sign_ed25519_detached"]=asm["_crypto_sign_ed25519_detached"];var _crypto_generichash_init=Module["_crypto_generichash_init"]=asm["_crypto_generichash_init"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _crypto_sign_bytes=Module["_crypto_sign_bytes"]=asm["_crypto_sign_bytes"];var _crypto_generichash_update=Module["_crypto_generichash_update"]=asm["_crypto_generichash_update"];var _crypto_scalarmult=Module["_crypto_scalarmult"]=asm["_crypto_scalarmult"];var _crypto_sign_detached=Module["_crypto_sign_detached"]=asm["_crypto_sign_detached"];var _crypto_generichash_blake2b_update=Module["_crypto_generichash_blake2b_update"]=asm["_crypto_generichash_blake2b_update"];var _crypto_box_curve25519xsalsa20poly1305_beforenm=Module["_crypto_box_curve25519xsalsa20poly1305_beforenm"]=asm["_crypto_box_curve25519xsalsa20poly1305_beforenm"];var _crypto_generichash_blake2b_bytes=Module["_crypto_generichash_blake2b_bytes"]=asm["_crypto_generichash_blake2b_bytes"];var _crypto_auth_hmacsha512256_bytes=Module["_crypto_auth_hmacsha512256_bytes"]=asm["_crypto_auth_hmacsha512256_bytes"];var _crypto_box_curve25519xchacha20poly1305_noncebytes=Module["_crypto_box_curve25519xchacha20poly1305_noncebytes"]=asm["_crypto_box_curve25519xchacha20poly1305_noncebytes"];var _randombytes_uniform=Module["_randombytes_uniform"]=asm["_randombytes_uniform"];var _crypto_shorthash_siphash24_keybytes=Module["_crypto_shorthash_siphash24_keybytes"]=asm["_crypto_shorthash_siphash24_keybytes"];var _crypto_shorthash_keygen=Module["_crypto_shorthash_keygen"]=asm["_crypto_shorthash_keygen"];var _crypto_onetimeauth_init=Module["_crypto_onetimeauth_init"]=asm["_crypto_onetimeauth_init"];var _crypto_stream_aes128ctr_keybytes=Module["_crypto_stream_aes128ctr_keybytes"]=asm["_crypto_stream_aes128ctr_keybytes"];var _crypto_sign_ed25519_seed_keypair=Module["_crypto_sign_ed25519_seed_keypair"]=asm["_crypto_sign_ed25519_seed_keypair"];var _crypto_stream_salsa20_xor=Module["_crypto_stream_salsa20_xor"]=asm["_crypto_stream_salsa20_xor"];var _crypto_auth_hmacsha512_verify=Module["_crypto_auth_hmacsha512_verify"]=asm["_crypto_auth_hmacsha512_verify"];var _crypto_generichash_blake2b_keybytes_min=Module["_crypto_generichash_blake2b_keybytes_min"]=asm["_crypto_generichash_blake2b_keybytes_min"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _crypto_kx_publickeybytes=Module["_crypto_kx_publickeybytes"]=asm["_crypto_kx_publickeybytes"];var _crypto_pwhash_bytes_max=Module["_crypto_pwhash_bytes_max"]=asm["_crypto_pwhash_bytes_max"];var _crypto_aead_chacha20poly1305_ietf_keybytes=Module["_crypto_aead_chacha20poly1305_ietf_keybytes"]=asm["_crypto_aead_chacha20poly1305_ietf_keybytes"];var _crypto_aead_chacha20poly1305_ietf_encrypt_detached=Module["_crypto_aead_chacha20poly1305_ietf_encrypt_detached"]=asm["_crypto_aead_chacha20poly1305_ietf_encrypt_detached"];var _crypto_stream=Module["_crypto_stream"]=asm["_crypto_stream"];var _sbrk=Module["_sbrk"]=asm["_sbrk"];var _crypto_box_curve25519xchacha20poly1305_beforenm=Module["_crypto_box_curve25519xchacha20poly1305_beforenm"]=asm["_crypto_box_curve25519xchacha20poly1305_beforenm"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _crypto_pwhash=Module["_crypto_pwhash"]=asm["_crypto_pwhash"];var _crypto_auth_hmacsha512256=Module["_crypto_auth_hmacsha512256"]=asm["_crypto_auth_hmacsha512256"];var _crypto_secretbox_xsalsa20poly1305=Module["_crypto_secretbox_xsalsa20poly1305"]=asm["_crypto_secretbox_xsalsa20poly1305"];var _crypto_verify_16_bytes=Module["_crypto_verify_16_bytes"]=asm["_crypto_verify_16_bytes"];var _crypto_stream_salsa208_keygen=Module["_crypto_stream_salsa208_keygen"]=asm["_crypto_stream_salsa208_keygen"];var _emscripten_get_global_libc=Module["_emscripten_get_global_libc"]=asm["_emscripten_get_global_libc"];var _crypto_shorthash_siphashx24_bytes=Module["_crypto_shorthash_siphashx24_bytes"]=asm["_crypto_shorthash_siphashx24_bytes"];var _crypto_generichash_blake2b_final=Module["_crypto_generichash_blake2b_final"]=asm["_crypto_generichash_blake2b_final"];var _crypto_generichash_blake2b_init_salt_personal=Module["_crypto_generichash_blake2b_init_salt_personal"]=asm["_crypto_generichash_blake2b_init_salt_personal"];var _crypto_box_seal=Module["_crypto_box_seal"]=asm["_crypto_box_seal"];var _crypto_aead_xchacha20poly1305_ietf_keygen=Module["_crypto_aead_xchacha20poly1305_ietf_keygen"]=asm["_crypto_aead_xchacha20poly1305_ietf_keygen"];var _crypto_kx_keypair=Module["_crypto_kx_keypair"]=asm["_crypto_kx_keypair"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var _crypto_pwhash_alg_default=Module["_crypto_pwhash_alg_default"]=asm["_crypto_pwhash_alg_default"];var _crypto_box=Module["_crypto_box"]=asm["_crypto_box"];var _crypto_stream_primitive=Module["_crypto_stream_primitive"]=asm["_crypto_stream_primitive"];var _crypto_secretbox_xsalsa20poly1305_boxzerobytes=Module["_crypto_secretbox_xsalsa20poly1305_boxzerobytes"]=asm["_crypto_secretbox_xsalsa20poly1305_boxzerobytes"];var _crypto_pwhash_str_verify=Module["_crypto_pwhash_str_verify"]=asm["_crypto_pwhash_str_verify"];var _crypto_generichash_keybytes_min=Module["_crypto_generichash_keybytes_min"]=asm["_crypto_generichash_keybytes_min"];var _crypto_generichash_statebytes=Module["_crypto_generichash_statebytes"]=asm["_crypto_generichash_statebytes"];var _crypto_onetimeauth_poly1305_statebytes=Module["_crypto_onetimeauth_poly1305_statebytes"]=asm["_crypto_onetimeauth_poly1305_statebytes"];var _crypto_sign_final_verify=Module["_crypto_sign_final_verify"]=asm["_crypto_sign_final_verify"];var _crypto_pwhash_strprefix=Module["_crypto_pwhash_strprefix"]=asm["_crypto_pwhash_strprefix"];var _crypto_secretbox_keygen=Module["_crypto_secretbox_keygen"]=asm["_crypto_secretbox_keygen"];var _crypto_secretbox_xchacha20poly1305_noncebytes=Module["_crypto_secretbox_xchacha20poly1305_noncebytes"]=asm["_crypto_secretbox_xchacha20poly1305_noncebytes"];var _crypto_hash_sha512=Module["_crypto_hash_sha512"]=asm["_crypto_hash_sha512"];var _crypto_shorthash_siphash24_bytes=Module["_crypto_shorthash_siphash24_bytes"]=asm["_crypto_shorthash_siphash24_bytes"];var _llvm_cttz_i32=Module["_llvm_cttz_i32"]=asm["_llvm_cttz_i32"];var _crypto_pwhash_scryptsalsa208sha256_bytes_max=Module["_crypto_pwhash_scryptsalsa208sha256_bytes_max"]=asm["_crypto_pwhash_scryptsalsa208sha256_bytes_max"];var _crypto_box_curve25519xchacha20poly1305_detached=Module["_crypto_box_curve25519xchacha20poly1305_detached"]=asm["_crypto_box_curve25519xchacha20poly1305_detached"];var _sodium_library_version_major=Module["_sodium_library_version_major"]=asm["_sodium_library_version_major"];var _crypto_aead_chacha20poly1305_ietf_encrypt=Module["_crypto_aead_chacha20poly1305_ietf_encrypt"]=asm["_crypto_aead_chacha20poly1305_ietf_encrypt"];var _crypto_generichash_blake2b_init=Module["_crypto_generichash_blake2b_init"]=asm["_crypto_generichash_blake2b_init"];var _randombytes_close=Module["_randombytes_close"]=asm["_randombytes_close"];var _crypto_pwhash_primitive=Module["_crypto_pwhash_primitive"]=asm["_crypto_pwhash_primitive"];var _crypto_onetimeauth_keybytes=Module["_crypto_onetimeauth_keybytes"]=asm["_crypto_onetimeauth_keybytes"];var _crypto_pwhash_argon2i=Module["_crypto_pwhash_argon2i"]=asm["_crypto_pwhash_argon2i"];var _crypto_pwhash_argon2id_strbytes=Module["_crypto_pwhash_argon2id_strbytes"]=asm["_crypto_pwhash_argon2id_strbytes"];var _crypto_stream_aes128ctr_afternm=Module["_crypto_stream_aes128ctr_afternm"]=asm["_crypto_stream_aes128ctr_afternm"];var _crypto_pwhash_argon2id_opslimit_max=Module["_crypto_pwhash_argon2id_opslimit_max"]=asm["_crypto_pwhash_argon2id_opslimit_max"];var _crypto_kdf_keybytes=Module["_crypto_kdf_keybytes"]=asm["_crypto_kdf_keybytes"];var establishStackSpace=Module["establishStackSpace"]=asm["establishStackSpace"];var _crypto_aead_chacha20poly1305_encrypt=Module["_crypto_aead_chacha20poly1305_encrypt"]=asm["_crypto_aead_chacha20poly1305_encrypt"];var _crypto_core_salsa2012_inputbytes=Module["_crypto_core_salsa2012_inputbytes"]=asm["_crypto_core_salsa2012_inputbytes"];var _crypto_pwhash_scryptsalsa208sha256_memlimit_min=Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_min"]=asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_min"];var _crypto_core_salsa208=Module["_crypto_core_salsa208"]=asm["_crypto_core_salsa208"];var _crypto_pwhash_opslimit_max=Module["_crypto_pwhash_opslimit_max"]=asm["_crypto_pwhash_opslimit_max"];var _crypto_auth_verify=Module["_crypto_auth_verify"]=asm["_crypto_auth_verify"];var _crypto_generichash_bytes=Module["_crypto_generichash_bytes"]=asm["_crypto_generichash_bytes"];var _crypto_auth_hmacsha512256_keygen=Module["_crypto_auth_hmacsha512256_keygen"]=asm["_crypto_auth_hmacsha512256_keygen"];var _randombytes_stir=Module["_randombytes_stir"]=asm["_randombytes_stir"];var _memset=Module["_memset"]=asm["_memset"];var _crypto_box_open_detached_afternm=Module["_crypto_box_open_detached_afternm"]=asm["_crypto_box_open_detached_afternm"];var _crypto_pwhash_argon2i_memlimit_sensitive=Module["_crypto_pwhash_argon2i_memlimit_sensitive"]=asm["_crypto_pwhash_argon2i_memlimit_sensitive"];var _crypto_kx_primitive=Module["_crypto_kx_primitive"]=asm["_crypto_kx_primitive"];var _crypto_stream_salsa2012_keybytes=Module["_crypto_stream_salsa2012_keybytes"]=asm["_crypto_stream_salsa2012_keybytes"];var _crypto_aead_xchacha20poly1305_ietf_decrypt=Module["_crypto_aead_xchacha20poly1305_ietf_decrypt"]=asm["_crypto_aead_xchacha20poly1305_ietf_decrypt"];var _crypto_pwhash_scryptsalsa208sha256_strprefix=Module["_crypto_pwhash_scryptsalsa208sha256_strprefix"]=asm["_crypto_pwhash_scryptsalsa208sha256_strprefix"];var _crypto_core_salsa20_outputbytes=Module["_crypto_core_salsa20_outputbytes"]=asm["_crypto_core_salsa20_outputbytes"];var _crypto_auth_keygen=Module["_crypto_auth_keygen"]=asm["_crypto_auth_keygen"];var _crypto_secretbox=Module["_crypto_secretbox"]=asm["_crypto_secretbox"];var _crypto_aead_xchacha20poly1305_ietf_encrypt_detached=Module["_crypto_aead_xchacha20poly1305_ietf_encrypt_detached"]=asm["_crypto_aead_xchacha20poly1305_ietf_encrypt_detached"];var _crypto_pwhash_scryptsalsa208sha256_passwd_max=Module["_crypto_pwhash_scryptsalsa208sha256_passwd_max"]=asm["_crypto_pwhash_scryptsalsa208sha256_passwd_max"];var _crypto_auth_hmacsha256_bytes=Module["_crypto_auth_hmacsha256_bytes"]=asm["_crypto_auth_hmacsha256_bytes"];var _crypto_auth_hmacsha256_verify=Module["_crypto_auth_hmacsha256_verify"]=asm["_crypto_auth_hmacsha256_verify"];var _crypto_sign_keypair=Module["_crypto_sign_keypair"]=asm["_crypto_sign_keypair"];var _crypto_stream_xchacha20=Module["_crypto_stream_xchacha20"]=asm["_crypto_stream_xchacha20"];var _crypto_onetimeauth_statebytes=Module["_crypto_onetimeauth_statebytes"]=asm["_crypto_onetimeauth_statebytes"];var _crypto_sign_ed25519ph_init=Module["_crypto_sign_ed25519ph_init"]=asm["_crypto_sign_ed25519ph_init"];var _crypto_stream_salsa20_noncebytes=Module["_crypto_stream_salsa20_noncebytes"]=asm["_crypto_stream_salsa20_noncebytes"];var _crypto_shorthash_keybytes=Module["_crypto_shorthash_keybytes"]=asm["_crypto_shorthash_keybytes"];var _crypto_aead_chacha20poly1305_keygen=Module["_crypto_aead_chacha20poly1305_keygen"]=asm["_crypto_aead_chacha20poly1305_keygen"];var _crypto_shorthash_siphashx24=Module["_crypto_shorthash_siphashx24"]=asm["_crypto_shorthash_siphashx24"];var _memmove=Module["_memmove"]=asm["_memmove"];var _crypto_hash_sha512_final=Module["_crypto_hash_sha512_final"]=asm["_crypto_hash_sha512_final"];var _crypto_box_curve25519xsalsa20poly1305_zerobytes=Module["_crypto_box_curve25519xsalsa20poly1305_zerobytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_zerobytes"];var _crypto_shorthash_siphashx24_keybytes=Module["_crypto_shorthash_siphashx24_keybytes"]=asm["_crypto_shorthash_siphashx24_keybytes"];var _crypto_pwhash_passwd_min=Module["_crypto_pwhash_passwd_min"]=asm["_crypto_pwhash_passwd_min"];var _crypto_kdf_bytes_max=Module["_crypto_kdf_bytes_max"]=asm["_crypto_kdf_bytes_max"];var _crypto_box_curve25519xsalsa20poly1305_boxzerobytes=Module["_crypto_box_curve25519xsalsa20poly1305_boxzerobytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_boxzerobytes"];var _crypto_generichash_bytes_min=Module["_crypto_generichash_bytes_min"]=asm["_crypto_generichash_bytes_min"];var _crypto_core_salsa2012_outputbytes=Module["_crypto_core_salsa2012_outputbytes"]=asm["_crypto_core_salsa2012_outputbytes"];var _crypto_auth_hmacsha256_keybytes=Module["_crypto_auth_hmacsha256_keybytes"]=asm["_crypto_auth_hmacsha256_keybytes"];var _crypto_core_salsa208_inputbytes=Module["_crypto_core_salsa208_inputbytes"]=asm["_crypto_core_salsa208_inputbytes"];var _crypto_pwhash_scryptsalsa208sha256_opslimit_max=Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_max"]=asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_max"];var _crypto_sign_update=Module["_crypto_sign_update"]=asm["_crypto_sign_update"];var _crypto_secretbox_xchacha20poly1305_detached=Module["_crypto_secretbox_xchacha20poly1305_detached"]=asm["_crypto_secretbox_xchacha20poly1305_detached"];var _crypto_stream_chacha20_noncebytes=Module["_crypto_stream_chacha20_noncebytes"]=asm["_crypto_stream_chacha20_noncebytes"];var _crypto_secretbox_open_detached=Module["_crypto_secretbox_open_detached"]=asm["_crypto_secretbox_open_detached"];var _crypto_box_curve25519xchacha20poly1305_seed_keypair=Module["_crypto_box_curve25519xchacha20poly1305_seed_keypair"]=asm["_crypto_box_curve25519xchacha20poly1305_seed_keypair"];var _crypto_pwhash_argon2id_memlimit_max=Module["_crypto_pwhash_argon2id_memlimit_max"]=asm["_crypto_pwhash_argon2id_memlimit_max"];var _crypto_pwhash_argon2i_memlimit_min=Module["_crypto_pwhash_argon2i_memlimit_min"]=asm["_crypto_pwhash_argon2i_memlimit_min"];var _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive=Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive"]=asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive"];var _crypto_box_curve25519xsalsa20poly1305_secretkeybytes=Module["_crypto_box_curve25519xsalsa20poly1305_secretkeybytes"]=asm["_crypto_box_curve25519xsalsa20poly1305_secretkeybytes"];var _crypto_kdf_contextbytes=Module["_crypto_kdf_contextbytes"]=asm["_crypto_kdf_contextbytes"];var _crypto_hash_sha256_final=Module["_crypto_hash_sha256_final"]=asm["_crypto_hash_sha256_final"];var _crypto_stream_xchacha20_keybytes=Module["_crypto_stream_xchacha20_keybytes"]=asm["_crypto_stream_xchacha20_keybytes"];var _crypto_box_seal_open=Module["_crypto_box_seal_open"]=asm["_crypto_box_seal_open"];var _crypto_shorthash_primitive=Module["_crypto_shorthash_primitive"]=asm["_crypto_shorthash_primitive"];var _crypto_core_hsalsa20_inputbytes=Module["_crypto_core_hsalsa20_inputbytes"]=asm["_crypto_core_hsalsa20_inputbytes"];var _crypto_onetimeauth_final=Module["_crypto_onetimeauth_final"]=asm["_crypto_onetimeauth_final"];var _crypto_secretbox_open_easy=Module["_crypto_secretbox_open_easy"]=asm["_crypto_secretbox_open_easy"];var _crypto_core_salsa2012=Module["_crypto_core_salsa2012"]=asm["_crypto_core_salsa2012"];var _crypto_box_curve25519xchacha20poly1305_macbytes=Module["_crypto_box_curve25519xchacha20poly1305_macbytes"]=asm["_crypto_box_curve25519xchacha20poly1305_macbytes"];var _crypto_auth_hmacsha512256_statebytes=Module["_crypto_auth_hmacsha512256_statebytes"]=asm["_crypto_auth_hmacsha512256_statebytes"];var _bitshift64Ashr=Module["_bitshift64Ashr"]=asm["_bitshift64Ashr"];var _crypto_box_curve25519xchacha20poly1305_publickeybytes=Module["_crypto_box_curve25519xchacha20poly1305_publickeybytes"]=asm["_crypto_box_curve25519xchacha20poly1305_publickeybytes"];var _crypto_stream_chacha20_xor=Module["_crypto_stream_chacha20_xor"]=asm["_crypto_stream_chacha20_xor"];var _crypto_core_hsalsa20=Module["_crypto_core_hsalsa20"]=asm["_crypto_core_hsalsa20"];Runtime.stackAlloc=Module["stackAlloc"];Runtime.stackSave=Module["stackSave"];Runtime.stackRestore=Module["stackRestore"];Runtime.establishStackSpace=Module["establishStackSpace"];Runtime.setTempRet0=Module["setTempRet0"];Runtime.getTempRet0=Module["getTempRet0"];Module["asm"]=asm;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{var toLog=e;if(e&&typeof e==="object"&&e.stack){toLog=[e,e.stack]}Module.printErr("exception thrown: "+toLog);Module["quit"](1,e)}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}Module["quit"](status,new ExitStatus(status))}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run()




    ENVIRONMENT_IS_NODE && !process.removeAllListeners("uncaughtException");
    return Module;
}));

}).call(this,require('_process'))
},{"_process":147,"crypto":78,"fs":66,"path":139}],129:[function(require,module,exports){
(function (process){
(function (root, factory) {
    if (typeof process === "object" && typeof process.stdout === "undefined") {
        process.stderr = process.stdout = { write: function() { } };
    }
    if (typeof define === "function" && define.amd) {
        define(["exports", "libsodium-sumo"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("libsodium-sumo"));
    } else {
        var cb = root.sodium && root.sodium.onload;
        factory((root.sodium = {}), root.libsodium);
        if (typeof cb === "function") {
            cb(root.sodium);
        }
    }
}(this, (function (exports, libsodium) {
    "use strict";

    var output_format = "uint8array";

    if (libsodium._sodium_init() !== 0) {
        throw new Error("libsodium was not correctly initialized.");
    }

    // List of functions and constants defined in the wrapped libsodium
    function symbols() {
        return Object.keys(exports).sort();
    }

    function increment(bytes) {
        if (! bytes instanceof Uint8Array) {
            throw new TypeError("Only Uint8Array instances can be incremented");
        }
        var c = 1 << 8;
        for (var i = 0 | 0, j = bytes.length; i < j; i++) {
            c >>= 8;
            c += bytes[i];
            bytes[i] = c & 0xff;
        }
    }

    function add(a, b) {
        if (! a instanceof Uint8Array || ! b instanceof Uint8Array) {
            throw new TypeError("Only Uint8Array instances can added");
        }
        var j = a.length, c = 0 | 0, i = 0 | 0;
        if (b.length != a.length) {
            throw new TypeError("Arguments must have the same length");
        }
        for (i = 0; i < j; i++) {
            c >>= 8;
            c += (a[i] + b[j]);
            a[i] = c & 0xff;
        }
    }

    function is_zero(bytes) {
        if (! bytes instanceof Uint8Array) {
            throw new TypeError("Only Uint8Array instances can be checked");
        }
        var d = 0 | 0;
        for (var i = 0 | 0, j = bytes.length; i < j; i++) {
            d |= bytes[i];
        }
        return d === 0;
    }

    function memzero(bytes) {
        if (! bytes instanceof Uint8Array) {
            throw new TypeError("Only Uint8Array instances can be wiped");
        }
        for (var i = 0 | 0, j = bytes.length; i < j; i++) {
            bytes[i] = 0;
        }
    }

    function memcmp(b1, b2) {
        if (!(b1 instanceof Uint8Array && b2 instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be compared");
        }
        if (b1.length !== b2.length) {
            throw new TypeError("Only instances of identical length can be compared");
        }
        for (var d = 0 | 0, i = 0 | 0, j = b1.length; i < j; i++) {
            d |= b1[i] ^ b2[i];
        }
        return d === 0;
    }

    function compare(b1, b2) {
        if (!(b1 instanceof Uint8Array && b2 instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be compared");
        }
        if (b1.length !== b2.length) {
            throw new TypeError("Only instances of identical length can be compared");
        }
        for (var gt = 0 | 0, eq = 1 | 1, i = b1.length; i-- > 0;) {
            gt |= ((b2[i] - b1[i]) >> 8) & eq;
            eq &= ((b2[i] ^ b1[i]) - 1) >> 8;
        }
        return (gt + gt + eq) - 1;
    }

    //---------------------------------------------------------------------------
    // Codecs
    //
    function from_string(str) {
        if (typeof TextEncoder === "function") {
            return new TextEncoder("utf-8").encode(str);
        }
        str = unescape(encodeURIComponent(str));
        var bytes = new Uint8Array(str.length);
        for (var i = 0; i < str.length; i++) {
            bytes[i] = str.charCodeAt(i);
        }
        return bytes;
    }

    function to_string(bytes) {
        if (typeof TextDecoder === "function") {
            return new TextDecoder("utf-8", {fatal: true}).decode(bytes);
        }

        var toStringChunkSize = 8192,
            numChunks = Math.ceil(bytes.length / toStringChunkSize);
        if (numChunks <= 1) {
            try {
                return decodeURIComponent(escape(String.fromCharCode.apply(null, bytes)));
            }
            catch (_) {
                throw new TypeError("The encoded data was not valid.");
            }
        }
        var totalString = '';
        var sequenceReadOffset = 0;
        for (var i = 0; i < numChunks; i++) {
            var currentChunk =
                Array.prototype.slice.call(bytes,
                                           i * toStringChunkSize + sequenceReadOffset,
                                           (i + 1) * toStringChunkSize + sequenceReadOffset);
            //Depending on how much we have shifted
            if (currentChunk.length == 0) {
                continue;
            }

            //Checking that we didn't cut the buffer in the middle of a UTF8 sequence.
            //If we did, remove the bytes of the "cut" sequence and
            //decrement sequenceReadOffset for each removed byte
            var sequenceDetectionComplete,
                sequenceIndex = currentChunk.length,
                sequenceLength = 0;

            //This loop will read the chunk from its end, looking for sequence start bytes
            do {
                sequenceIndex--;
                var currentByte = currentChunk[sequenceIndex];

                if (currentByte >= 240) { //Beginning of a 4-byte UTF-8 sequence
                    sequenceLength = 4;
                    sequenceDetectionComplete = true;
                } else if (currentByte >= 224) { //Beginning of a 3-byte UTF-8 sequence
                    sequenceLength = 3;
                    sequenceDetectionComplete = true;
                } else if (currentByte >= 192) { //Beginning of a 2-byte UTF-8 sequence
                    sequenceLength = 2;
                    sequenceDetectionComplete = true;
                } else if (currentByte < 128) { //A one byte UTF-8 char
                    sequenceLength = 1;
                    sequenceDetectionComplete = true;
                }
                //The values between [128, 192[ are part of a UTF-8 sequence.
                //The loop will not exit in that case, and will iterate one byte backwards instead
            } while (!sequenceDetectionComplete);

            var extraBytes = sequenceLength - (currentChunk.length - sequenceIndex);
            for (var j = 0; j < extraBytes; j++) {
                sequenceReadOffset--;
                currentChunk.pop();
            }

            totalString += to_string(currentChunk);
        }
        return totalString;
    }

    /* not constant-time */
    function from_hex(str) {
        if (!is_hex(str)) {
            throw new TypeError("The provided string doesn't look like hex data");
        }
        var result = new Uint8Array(str.length / 2);
        for (var i = 0; i < str.length; i += 2) {
            result[i >>> 1] = parseInt(str.substr(i, 2), 16);
        }
        return result;
    }

    function to_hex(bytes) {
        var str = "", b, c, x;
        for (var i = 0; i < bytes.length; i++) {
            c = bytes[i] & 0xf;
            b = bytes[i] >>> 4;
            x = (87 + c + (((c - 10) >> 8) & ~38)) << 8 |
                (87 + b + (((b - 10) >> 8) & ~38));
            str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);
        }
        return str;
    }

    function is_hex(str) {
        return (typeof str === "string" && /^[0-9a-f]+$/i.test(str) && str.length % 2 === 0);
    }

    function from_base64(sBase64, nBlocksSize) {
        function _b64ToUint6(nChr) {
            return nChr > 64 && nChr < 91 ?
                nChr - 65 : nChr > 96 && nChr < 123 ?
                nChr - 71 : nChr > 47 && nChr < 58 ?
                nChr + 4 : nChr === 43 ?
                62 : nChr === 47 ?
                63 :
                0;
        }

        var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
            nInLen = sB64Enc.length,
            nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
            taBytes = new Uint8Array(nOutLen);

        for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
            nMod4 = nInIdx & 3;
            nUint24 |= _b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
            if (nMod4 === 3 || nInLen - nInIdx === 1) {
                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                    taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                }
                nUint24 = 0;
            }
        }
        return taBytes;
    }

    function to_base64(aBytes, noNewLine) {
        if (typeof noNewLine === "undefined") {
            noNewLine = true;
        }
        function _uint6ToB64(nUint6) {
            return nUint6 < 26 ?
                nUint6 + 65 : nUint6 < 52 ?
                nUint6 + 71 : nUint6 < 62 ?
                nUint6 - 4 : nUint6 === 62 ?
                43 : nUint6 === 63 ?
                47 :
                65;
        }
        if (typeof aBytes === "string") {
            throw new Error("input has to be an array");
        }
        var nMod3 = 2,
            sB64Enc = "";
        for (var nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
            nMod3 = nIdx % 3;
            if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0 && !noNewLine) {
                sB64Enc += "\r\n";
            }
            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
            if (nMod3 === 2 || aBytes.length - nIdx === 1) {
                sB64Enc += String.fromCharCode(_uint6ToB64(nUint24 >>> 18 & 63),
                                               _uint6ToB64(nUint24 >>> 12 & 63),
                                               _uint6ToB64(nUint24 >>> 6 & 63),
                                               _uint6ToB64(nUint24 & 63));
                nUint24 = 0;
            }
        }
        return sB64Enc.substr(0, sB64Enc.length - 2 + nMod3) +
            (nMod3 === 2 ? "" : nMod3 === 1 ? "=" : "==");
    }

    function output_formats() {
        return ["uint8array", "text", "hex", "base64"];
    }

    function _format_output(output, optionalOutputFormat) {
        var selectedOutputFormat = optionalOutputFormat || output_format;
        if (!_is_output_format(selectedOutputFormat)) {
            throw new Error(selectedOutputFormat + " output format is not available");
        }
        if (output instanceof AllocatedBuf) {
            if (selectedOutputFormat === "uint8array") {
                return output.to_Uint8Array();
            } else if (selectedOutputFormat === "text") {
                return to_string(output.to_Uint8Array());
            } else if (selectedOutputFormat === "hex") {
                return to_hex(output.to_Uint8Array());
            } else if (selectedOutputFormat === "base64") {
                return to_base64(output.to_Uint8Array());
            } else {
                throw new Error("What is output format \"" + selectedOutputFormat + "\"?");
            }
        } else if (typeof output === "object") { //Composed output. Example : key pairs
            var props = Object.keys(output);
            var formattedOutput = {};
            for (var i = 0; i < props.length; i++) {
                formattedOutput[props[i]] = _format_output(output[props[i]], selectedOutputFormat);
            }
            return formattedOutput;
        } else if (typeof output === "string") {
            return output;
        } else {
            throw new TypeError("Cannot format output");
        }
    }

    function _is_output_format(format) {
        var formats = output_formats();
        for (var i = 0; i < formats.length; i++) {
            if (formats[i] === format) {
                return true;
            }
        }
        return false;
    }

    function _check_output_format(format) {
        if (!format) {
            return;
        } else if (typeof format !== "string") {
            throw new TypeError("When defined, the output format must be a string");
        } else if (!_is_output_format(format)) {
            throw new Error(format + " is not a supported output format");
        }
    }

    //---------------------------------------------------------------------------
    // Memory management
    //
    // AllocatedBuf: address allocated using _malloc() + length
    function AllocatedBuf(length) {
        this.length = length;
        this.address = _malloc(length);
    }

    // Copy the content of a AllocatedBuf (_malloc()'d memory) into a Uint8Array
    AllocatedBuf.prototype.to_Uint8Array = function () {
        var result = new Uint8Array(this.length);
        result.set(libsodium.HEAPU8.subarray(this.address, this.address + this.length));
        return result;
    };

    // _malloc() a region and initialize it with the content of a Uint8Array
    function _to_allocated_buf_address(bytes) {
        var address = _malloc(bytes.length);
        libsodium.HEAPU8.set(bytes, address);
        return address;
    }

    function _malloc(length) {
        var result = libsodium._malloc(length);
        if (result === 0) {
            throw {
                message: "_malloc() failed",
                length: length
            };
        }
        return result;
    }

    function _free(address) {
        libsodium._free(address);
    }

    function _free_all(addresses) {
        for (var i = 0; i < addresses.length; i++) {
            _free(addresses[i]);
        }
    }

    function _free_and_throw_error(address_pool, err) {
        _free_all(address_pool);
        throw new Error(err);
    }

    function _free_and_throw_type_error(address_pool, err) {
        _free_all(address_pool);
        throw new TypeError(err);
    }

    function _require_defined(address_pool, varValue, varName) {
        if (varValue == undefined) {
            _free_and_throw_type_error(address_pool, varName + " cannot be null or undefined");
        }
    }

    function _any_to_Uint8Array(address_pool, varValue, varName) {
        _require_defined(address_pool, varValue, varName);
        if (varValue instanceof Uint8Array) {
            return varValue;
        } else if (typeof varValue === "string") {
            return from_string(varValue);
        }
        _free_and_throw_type_error(address_pool, "unsupported input type for " + varName);
    }

    
	function crypto_aead_chacha20poly1305_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_decrypt_detached(secret_nonce, ciphertext, mac, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_decrypt_detached(message_address, secret_nonce_address, ciphertext_address, ciphertext_length, 0, mac_address, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_encrypt_detached(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_encrypt_detached(ciphertext_address, mac_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_ietf_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_chacha20poly1305_ietf_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_ietf_decrypt_detached(secret_nonce, ciphertext, mac, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_decrypt_detached(message_address, secret_nonce_address, ciphertext_address, ciphertext_length, 0, mac_address, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_ietf_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_chacha20poly1305_ietf_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_ietf_encrypt_detached(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_aead_chacha20poly1305_ietf_abytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_encrypt_detached(ciphertext_address, mac_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_ietf_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_aead_chacha20poly1305_ietf_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_aead_chacha20poly1305_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_aead_chacha20poly1305_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_aead_xchacha20poly1305_ietf_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_xchacha20poly1305_ietf_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_xchacha20poly1305_ietf_decrypt_detached(secret_nonce, ciphertext, mac, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_decrypt_detached(message_address, secret_nonce_address, ciphertext_address, ciphertext_length, 0, mac_address, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_xchacha20poly1305_ietf_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_xchacha20poly1305_ietf_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_xchacha20poly1305_ietf_encrypt_detached(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_abytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_encrypt_detached(ciphertext_address, mac_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_xchacha20poly1305_ietf_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_aead_xchacha20poly1305_ietf_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output tag (buf)
		
		var tag_length = (libsodium._crypto_auth_bytes()) | 0,
		    tag = new AllocatedBuf(tag_length),
		    tag_address = tag.address;
		
		address_pool.push(tag_address);
		
		if ((libsodium._crypto_auth(tag_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(tag, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth_hmacsha256(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_auth_hmacsha256_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_auth_hmacsha256(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth_hmacsha256_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_auth_hmacsha256_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha256_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_hmacsha256_bytes()) | 0;
		if (tag.length !== tag_length) {
		        _free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_hmacsha256_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha512(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_auth_hmacsha512_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_auth_hmacsha512(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth_hmacsha512_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_auth_hmacsha512_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha512_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_hmacsha512_bytes()) | 0;
		if (tag.length !== tag_length) {
		        _free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_hmacsha512_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_auth_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_auth_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_bytes()) | 0;
		if (tag.length !== tag_length) {
		        _free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_box_beforenm(publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output sharedKey (buf)
		
		var sharedKey_length = (libsodium._crypto_box_beforenmbytes()) | 0,
		    sharedKey = new AllocatedBuf(sharedKey_length),
		    sharedKey_address = sharedKey.address;
		
		address_pool.push(sharedKey_address);
		
		if ((libsodium._crypto_box_beforenm(sharedKey_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(sharedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_detached(message, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_box_macbytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_box_detached(ciphertext_address, mac_address, message_address, message_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_easy(message, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_macbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_easy(ciphertext_address, message_address, message_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_easy_afternm(message, nonce, sharedKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: sharedKey (buf)
		
		sharedKey = _any_to_Uint8Array(address_pool, sharedKey, "sharedKey");
		var sharedKey_address, sharedKey_length = (libsodium._crypto_box_beforenmbytes()) | 0;
		if (sharedKey.length !== sharedKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid sharedKey length");
		}
		sharedKey_address = _to_allocated_buf_address(sharedKey);
		address_pool.push(sharedKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_macbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_easy_afternm(ciphertext_address, message_address, message_length, 0, nonce_address, sharedKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output secretKey (buf)
		
		var secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0,
		    secretKey = new AllocatedBuf(secretKey_length),
		    secretKey_address = secretKey.address;
		
		address_pool.push(secretKey_address);
		
		if ((libsodium._crypto_box_keypair(publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: secretKey, keyType: "curve25519"}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_open_detached(ciphertext, mac, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_detached(plaintext_address, ciphertext_address, mac_address, ciphertext_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_open_easy(ciphertext, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_macbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_easy(plaintext_address, ciphertext_address, ciphertext_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_open_easy_afternm(ciphertext, nonce, sharedKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: sharedKey (buf)
		
		sharedKey = _any_to_Uint8Array(address_pool, sharedKey, "sharedKey");
		var sharedKey_address, sharedKey_length = (libsodium._crypto_box_beforenmbytes()) | 0;
		if (sharedKey.length !== sharedKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid sharedKey length");
		}
		sharedKey_address = _to_allocated_buf_address(sharedKey);
		address_pool.push(sharedKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_macbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_easy_afternm(plaintext_address, ciphertext_address, ciphertext_length, 0, nonce_address, sharedKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_seal(message, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_sealbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_seal(ciphertext_address, message_address, message_length, 0, publicKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_seal_open(ciphertext, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_sealbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_seal_open(plaintext_address, ciphertext_address, ciphertext_length, 0, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_box_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_box_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_box_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash(hash_length, message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) && (hash_length | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
		        key = _any_to_Uint8Array(address_pool, key, "key");
		        key_address = _to_allocated_buf_address(key);
		        key_length = key.length;
		        address_pool.push(key_address);
		}
		
		// ---------- output hash (buf)
		
		var hash_length = (hash_length) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_generichash(hash_address, hash_length, message_address, message_length, 0, key_address, key_length) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash_final(state_address, hash_length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (generichash_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) && (hash_length | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- output hash (buf)
		
		var hash_length = (hash_length) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_generichash_final(state_address, hash_address, hash_length) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(hash, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash_init(key, hash_length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
		        key = _any_to_Uint8Array(address_pool, key, "key");
		        key_address = _to_allocated_buf_address(key);
		        key_length = key.length;
		        address_pool.push(key_address);
		}
		
		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) && (hash_length | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- output state (generichash_state)
		
		var state_address = new AllocatedBuf(357).address;
		
		if ((libsodium._crypto_generichash_init(state_address, key_address, key_length, hash_length) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_generichash_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_generichash_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_generichash_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (generichash_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_generichash_update(state_address, message_chunk_address, message_chunk_length) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_hash(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_hash_sha256(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_sha256_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash_sha256(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_hash_sha512(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_sha512_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash_sha512(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_kdf_derive_from_key(subkey_len, subkey_id, ctx, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: subkey_len (uint)
		
		_require_defined(address_pool, subkey_len, "subkey_len");
		
		if (!(typeof subkey_len === "number" && (subkey_len | 0) === subkey_len) && (subkey_len | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "subkey_len must be an unsigned integer");
		}
		
		// ---------- input: subkey_id (uint)
		
		_require_defined(address_pool, subkey_id, "subkey_id");
		
		if (!(typeof subkey_id === "number" && (subkey_id | 0) === subkey_id) && (subkey_id | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "subkey_id must be an unsigned integer");
		}
		
		// ---------- input: ctx (string)
		
		ctx = from_string(ctx + "\0");
		var ctx_address = _to_allocated_buf_address(ctx),
		    ctx_length = ctx.length - 1;
		address_pool.push(ctx_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_kdf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output subkey (buf)
		
		var subkey_length = (subkey_len) | 0,
		    subkey = new AllocatedBuf(subkey_length),
		    subkey_address = subkey.address;
		
		address_pool.push(subkey_address);
		
		libsodium._crypto_kdf_derive_from_key(subkey_address, subkey_len, subkey_id, 0, ctx_address, key_address);
		var ret = (_format_output(subkey, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_kdf_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_kdf_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_kdf_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: clientPublicKey (buf)
		
		clientPublicKey = _any_to_Uint8Array(address_pool, clientPublicKey, "clientPublicKey");
		var clientPublicKey_address, clientPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (clientPublicKey.length !== clientPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid clientPublicKey length");
		}
		clientPublicKey_address = _to_allocated_buf_address(clientPublicKey);
		address_pool.push(clientPublicKey_address);
		
		// ---------- input: clientSecretKey (buf)
		
		clientSecretKey = _any_to_Uint8Array(address_pool, clientSecretKey, "clientSecretKey");
		var clientSecretKey_address, clientSecretKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0;
		if (clientSecretKey.length !== clientSecretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid clientSecretKey length");
		}
		clientSecretKey_address = _to_allocated_buf_address(clientSecretKey);
		address_pool.push(clientSecretKey_address);
		
		// ---------- input: serverPublicKey (buf)
		
		serverPublicKey = _any_to_Uint8Array(address_pool, serverPublicKey, "serverPublicKey");
		var serverPublicKey_address, serverPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (serverPublicKey.length !== serverPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid serverPublicKey length");
		}
		serverPublicKey_address = _to_allocated_buf_address(serverPublicKey);
		address_pool.push(serverPublicKey_address);
		
		// ---------- output sharedRx (buf)
		
		var sharedRx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedRx = new AllocatedBuf(sharedRx_length),
		    sharedRx_address = sharedRx.address;
		
		address_pool.push(sharedRx_address);
		
		// ---------- output sharedTx (buf)
		
		var sharedTx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedTx = new AllocatedBuf(sharedTx_length),
		    sharedTx_address = sharedTx.address;
		
		address_pool.push(sharedTx_address);
		
		if ((libsodium._crypto_kx_client_session_keys(sharedRx_address, sharedTx_address, clientPublicKey_address, clientSecretKey_address, serverPublicKey_address) | 0) === 0) {
			var ret = _format_output({sharedRx: sharedRx, sharedTx: sharedTx}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_kx_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_kx_keypair(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_kx_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_kx_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_kx_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: serverPublicKey (buf)
		
		serverPublicKey = _any_to_Uint8Array(address_pool, serverPublicKey, "serverPublicKey");
		var serverPublicKey_address, serverPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (serverPublicKey.length !== serverPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid serverPublicKey length");
		}
		serverPublicKey_address = _to_allocated_buf_address(serverPublicKey);
		address_pool.push(serverPublicKey_address);
		
		// ---------- input: serverSecretKey (buf)
		
		serverSecretKey = _any_to_Uint8Array(address_pool, serverSecretKey, "serverSecretKey");
		var serverSecretKey_address, serverSecretKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0;
		if (serverSecretKey.length !== serverSecretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid serverSecretKey length");
		}
		serverSecretKey_address = _to_allocated_buf_address(serverSecretKey);
		address_pool.push(serverSecretKey_address);
		
		// ---------- input: clientPublicKey (buf)
		
		clientPublicKey = _any_to_Uint8Array(address_pool, clientPublicKey, "clientPublicKey");
		var clientPublicKey_address, clientPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (clientPublicKey.length !== clientPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid clientPublicKey length");
		}
		clientPublicKey_address = _to_allocated_buf_address(clientPublicKey);
		address_pool.push(clientPublicKey_address);
		
		// ---------- output sharedRx (buf)
		
		var sharedRx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedRx = new AllocatedBuf(sharedRx_length),
		    sharedRx_address = sharedRx.address;
		
		address_pool.push(sharedRx_address);
		
		// ---------- output sharedTx (buf)
		
		var sharedTx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedTx = new AllocatedBuf(sharedTx_length),
		    sharedTx_address = sharedTx.address;
		
		address_pool.push(sharedTx_address);
		
		if ((libsodium._crypto_kx_server_session_keys(sharedRx_address, sharedTx_address, serverPublicKey_address, serverSecretKey_address, clientPublicKey_address) | 0) === 0) {
			var ret = _format_output({sharedRx: sharedRx, sharedTx: sharedTx}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_onetimeauth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_onetimeauth(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth_final(state_address, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (onetimeauth_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_onetimeauth_final(state_address, hash_address) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(hash, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth_init(key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
		        key = _any_to_Uint8Array(address_pool, key, "key");
		        key_address = _to_allocated_buf_address(key);
		        key_length = key.length;
		        address_pool.push(key_address);
		}
		
		// ---------- output state (onetimeauth_state)
		
		var state_address = new AllocatedBuf(144).address;
		
		if ((libsodium._crypto_onetimeauth_init(state_address, key_address) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_onetimeauth_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_onetimeauth_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_onetimeauth_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (onetimeauth_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_onetimeauth_update(state_address, message_chunk_address, message_chunk_length) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth_verify(hash, message, key) {
		var address_pool = [];

		// ---------- input: hash (buf)
		
		hash = _any_to_Uint8Array(address_pool, hash, "hash");
		var hash_address, hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0;
		if (hash.length !== hash_length) {
		        _free_and_throw_type_error(address_pool, "invalid hash length");
		}
		hash_address = _to_allocated_buf_address(hash);
		address_pool.push(hash_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_onetimeauth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_onetimeauth_verify(hash_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_pwhash(keyLength, password, salt, opsLimit, memLimit, algorithm, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) && (keyLength | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address, salt_length = (libsodium._crypto_pwhash_saltbytes()) | 0;
		if (salt.length !== salt_length) {
		        _free_and_throw_type_error(address_pool, "invalid salt length");
		}
		salt_address = _to_allocated_buf_address(salt);
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) && (memLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- input: algorithm (uint)
		
		_require_defined(address_pool, algorithm, "algorithm");
		
		if (!(typeof algorithm === "number" && (algorithm | 0) === algorithm) && (algorithm | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "algorithm must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash(derivedKey_address, keyLength, 0, password_address, password_length, 0, salt_address, opsLimit, 0, memLimit, algorithm) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256(keyLength, password, salt, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) && (keyLength | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address, salt_length = (libsodium._crypto_pwhash_scryptsalsa208sha256_saltbytes()) | 0;
		if (salt.length !== salt_length) {
		        _free_and_throw_type_error(address_pool, "invalid salt length");
		}
		salt_address = _to_allocated_buf_address(salt);
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) && (memLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256(derivedKey_address, keyLength, 0, password_address, password_length, 0, salt_address, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256_ll(password, salt, opsLimit, r, p, keyLength, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (unsized_buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address = _to_allocated_buf_address(salt),
		    salt_length = salt.length;
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: r (uint)
		
		_require_defined(address_pool, r, "r");
		
		if (!(typeof r === "number" && (r | 0) === r) && (r | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "r must be an unsigned integer");
		}
		
		// ---------- input: p (uint)
		
		_require_defined(address_pool, p, "p");
		
		if (!(typeof p === "number" && (p | 0) === p) && (p | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "p must be an unsigned integer");
		}
		
		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) && (keyLength | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256_ll(password_address, password_length, salt_address, salt_length, opsLimit, 0, r, p, derivedKey_address, keyLength) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256_str(password, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) && (memLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output hashed_password (buf)
		
		var hashed_password_length = (libsodium._crypto_pwhash_scryptsalsa208sha256_strbytes()) | 0,
		    hashed_password = new AllocatedBuf(hashed_password_length),
		    hashed_password_address = hashed_password.address;
		
		address_pool.push(hashed_password_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256_str(hashed_password_address, password_address, password_length, 0, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = libsodium.Pointer_stringify(hashed_password_address);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256_str_verify(hashed_password, password, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hashed_password (string)
		
		hashed_password = from_string(hashed_password + "\0");
		var hashed_password_address = _to_allocated_buf_address(hashed_password),
		    hashed_password_length = hashed_password.length - 1;
		address_pool.push(hashed_password_address);
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		var result = libsodium._crypto_pwhash_scryptsalsa208sha256_str_verify(hashed_password_address, password_address, password_length, 0) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_pwhash_str(password, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) && (memLimit | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output hashed_password (buf)
		
		var hashed_password_length = (libsodium._crypto_pwhash_strbytes()) | 0,
		    hashed_password = new AllocatedBuf(hashed_password_length),
		    hashed_password_address = hashed_password.address;
		
		address_pool.push(hashed_password_address);
		
		if ((libsodium._crypto_pwhash_str(hashed_password_address, password_address, password_length, 0, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = libsodium.Pointer_stringify(hashed_password_address);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_str_verify(hashed_password, password, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hashed_password (string)
		
		hashed_password = from_string(hashed_password + "\0");
		var hashed_password_address = _to_allocated_buf_address(hashed_password),
		    hashed_password_length = hashed_password.length - 1;
		address_pool.push(hashed_password_address);
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		var result = libsodium._crypto_pwhash_str_verify(hashed_password_address, password_address, password_length, 0) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_scalarmult(privateKey, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output sharedSecret (buf)
		
		var sharedSecret_length = (libsodium._crypto_scalarmult_bytes()) | 0,
		    sharedSecret = new AllocatedBuf(sharedSecret_length),
		    sharedSecret_address = sharedSecret.address;
		
		address_pool.push(sharedSecret_address);
		
		if ((libsodium._crypto_scalarmult(sharedSecret_address, privateKey_address, publicKey_address) | 0) === 0) {
			var ret = _format_output(sharedSecret, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_scalarmult_base(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		if ((libsodium._crypto_scalarmult_base(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(publicKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_detached(message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output cipher (buf)
		
		var cipher_length = (message_length) | 0,
		    cipher = new AllocatedBuf(cipher_length),
		    cipher_address = cipher.address;
		
		address_pool.push(cipher_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_secretbox_macbytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_secretbox_detached(cipher_address, mac_address, message_address, message_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output({mac: mac, cipher: cipher}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_easy(message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output cipher (buf)
		
		var cipher_length = (message_length + libsodium._crypto_secretbox_macbytes()) | 0,
		    cipher = new AllocatedBuf(cipher_length),
		    cipher_address = cipher.address;
		
		address_pool.push(cipher_address);
		
		if ((libsodium._crypto_secretbox_easy(cipher_address, message_address, message_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(cipher, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_secretbox_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_secretbox_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_secretbox_open_detached(ciphertext, mac, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_secretbox_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_secretbox_open_detached(message_address, ciphertext_address, mac_address, ciphertext_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_open_easy(ciphertext, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_secretbox_macbytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_secretbox_open_easy(message_address, ciphertext_address, ciphertext_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_shorthash(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_shorthash_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_shorthash_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_shorthash(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_shorthash_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_shorthash_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_shorthash_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_shorthash_siphashx24(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_shorthash_siphashx24_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_shorthash_siphashx24_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_shorthash_siphashx24(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign(message, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (message.length + libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign(signature_address, null, message_address, message_length, 0, privateKey_address) | 0) === 0) {
			var ret = _format_output(signature, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_detached(message, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign_detached(signature_address, null, message_address, message_length, 0, privateKey_address) | 0) === 0) {
			var ret = _format_output(signature, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_pk_to_curve25519(edPk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: edPk (buf)
		
		edPk = _any_to_Uint8Array(address_pool, edPk, "edPk");
		var edPk_address, edPk_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (edPk.length !== edPk_length) {
		        _free_and_throw_type_error(address_pool, "invalid edPk length");
		}
		edPk_address = _to_allocated_buf_address(edPk);
		address_pool.push(edPk_address);
		
		// ---------- output cPk (buf)
		
		var cPk_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    cPk = new AllocatedBuf(cPk_length),
		    cPk_address = cPk.address;
		
		address_pool.push(cPk_address);
		
		if ((libsodium._crypto_sign_ed25519_pk_to_curve25519(cPk_address, edPk_address) | 0) === 0) {
			var ret = _format_output(cPk, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_sk_to_curve25519(edSk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: edSk (buf)
		
		edSk = _any_to_Uint8Array(address_pool, edSk, "edSk");
		var edSk_address, edSk_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (edSk.length !== edSk_length) {
		        _free_and_throw_type_error(address_pool, "invalid edSk length");
		}
		edSk_address = _to_allocated_buf_address(edSk);
		address_pool.push(edSk_address);
		
		// ---------- output cSk (buf)
		
		var cSk_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    cSk = new AllocatedBuf(cSk_length),
		    cSk_address = cSk.address;
		
		address_pool.push(cSk_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_curve25519(cSk_address, edSk_address) | 0) === 0) {
			var ret = _format_output(cSk, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_sk_to_pk(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_pk(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(publicKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_sk_to_seed(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output seed (buf)
		
		var seed_length = (libsodium._crypto_sign_seedbytes()) | 0,
		    seed = new AllocatedBuf(seed_length),
		    seed_address = seed.address;
		
		address_pool.push(seed_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_seed(seed_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(seed, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_final_create(state_address, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (sign_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign_final_create(state_address, signature_address, null, privateKey_address) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(signature, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_final_verify(state_address, signature, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (sign_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: signature (buf)
		
		signature = _any_to_Uint8Array(address_pool, signature, "signature");
		var signature_address, signature_length = (libsodium._crypto_sign_bytes()) | 0;
		if (signature.length !== signature_length) {
		        _free_and_throw_type_error(address_pool, "invalid signature length");
		}
		signature_address = _to_allocated_buf_address(signature);
		address_pool.push(signature_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		var verificationResult = libsodium._crypto_sign_final_verify(state_address, signature_address, publicKey_address) | 0;
		var ret = (verificationResult === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_sign_init(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output state (sign_state)
		
		var state_address = new AllocatedBuf(208).address;
		
		if ((libsodium._crypto_sign_init(state_address) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_sign_keypair(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey, keyType: 'ed25519'}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_open(signedMessage, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: signedMessage (unsized_buf)
		
		signedMessage = _any_to_Uint8Array(address_pool, signedMessage, "signedMessage");
		var signedMessage_address = _to_allocated_buf_address(signedMessage),
		    signedMessage_length = signedMessage.length;
		address_pool.push(signedMessage_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output message (buf)
		
		var message_length = (signedMessage_length - libsodium._crypto_sign_bytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_sign_open(message_address, null, signedMessage_address, signedMessage_length, 0, publicKey_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_sign_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_sign_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey, keyType: "ed25519"}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (sign_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_sign_update(state_address, message_chunk_address, message_chunk_length) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_verify_detached(signature, message, publicKey) {
		var address_pool = [];

		// ---------- input: signature (buf)
		
		signature = _any_to_Uint8Array(address_pool, signature, "signature");
		var signature_address, signature_length = (libsodium._crypto_sign_bytes()) | 0;
		if (signature.length !== signature_length) {
		        _free_and_throw_type_error(address_pool, "invalid signature length");
		}
		signature_address = _to_allocated_buf_address(signature);
		address_pool.push(signature_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		var verificationResult = libsodium._crypto_sign_verify_detached(signature_address, message_address, message_length, 0, publicKey_address) | 0;
		var ret = (verificationResult === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_chacha20_ietf_xor(input_message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_ietf_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_ietf_xor(output_message_address, input_message_address, input_message_length, 0, nonce_address, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_stream_chacha20_ietf_xor_ic(input_message, nonce, nonce_increment, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_ietf_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: nonce_increment (uint)
		
		_require_defined(address_pool, nonce_increment, "nonce_increment");
		
		if (!(typeof nonce_increment === "number" && (nonce_increment | 0) === nonce_increment) && (nonce_increment | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "nonce_increment must be an unsigned integer");
		}
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_ietf_xor_ic(output_message_address, input_message_address, input_message_length, 0, nonce_address, nonce_increment, 0, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_stream_chacha20_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_stream_chacha20_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_stream_chacha20_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_chacha20_xor(input_message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_xor(output_message_address, input_message_address, input_message_length, 0, nonce_address, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_stream_chacha20_xor_ic(input_message, nonce, nonce_increment, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: nonce_increment (uint)
		
		_require_defined(address_pool, nonce_increment, "nonce_increment");
		
		if (!(typeof nonce_increment === "number" && (nonce_increment | 0) === nonce_increment) && (nonce_increment | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "nonce_increment must be an unsigned integer");
		}
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_xor_ic(output_message_address, input_message_address, input_message_length, 0, nonce_address, nonce_increment, 0, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_stream_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_stream_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_stream_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_xchacha20_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_stream_xchacha20_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_stream_xchacha20_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_xchacha20_xor(input_message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_xchacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_xchacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_xchacha20_xor(output_message_address, input_message_address, input_message_length, 0, nonce_address, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_stream_xchacha20_xor_ic(input_message, nonce, nonce_increment, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_xchacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: nonce_increment (uint)
		
		_require_defined(address_pool, nonce_increment, "nonce_increment");
		
		if (!(typeof nonce_increment === "number" && (nonce_increment | 0) === nonce_increment) && (nonce_increment | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "nonce_increment must be an unsigned integer");
		}
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_xchacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_xchacha20_xor_ic(output_message_address, input_message_address, input_message_length, 0, nonce_address, nonce_increment, 0, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function randombytes_buf(length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: length (uint)
		
		_require_defined(address_pool, length, "length");
		
		if (!(typeof length === "number" && (length | 0) === length) && (length | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "length must be an unsigned integer");
		}
		
		// ---------- output output (buf)
		
		var output_length = (length) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._randombytes_buf(output_address, length);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_buf_deterministic(length, seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: length (uint)
		
		_require_defined(address_pool, length, "length");
		
		if (!(typeof length === "number" && (length | 0) === length) && (length | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "length must be an unsigned integer");
		}
		
		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._randombytes_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output output (buf)
		
		var output_length = (length) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._randombytes_buf_deterministic(output_address, length, 0, seed);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_close(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		libsodium._randombytes_close();
		
	}

	function randombytes_random(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		var random_value = libsodium._randombytes_random() >>> 0;
		var ret = (random_value);
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_set_implementation(implementation, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: implementation (randombytes_implementation)
		
		var implementation_address = libsodium._malloc(6 * 4);
		for (var i = 0; i < 6; i++) {
		        libsodium.setValue(implementation_address + i * 4,
		            libsodium.Runtime.addFunction(implementation
		            [["implementation_name", "random", "stir", "uniform", "buf", "close"][i]]),
		            "i32");
		}
		
		if ((libsodium._randombytes_set_implementation(implementation_address) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool);
		
	}

	function randombytes_stir(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		libsodium._randombytes_stir();
		
	}

	function randombytes_uniform(upper_bound, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: upper_bound (uint)
		
		_require_defined(address_pool, upper_bound, "upper_bound");
		
		if (!(typeof upper_bound === "number" && (upper_bound | 0) === upper_bound) && (upper_bound | 0) > 0) {
		        _free_and_throw_type_error(address_pool, "upper_bound must be an unsigned integer");
		}
		
		var random_value = libsodium._randombytes_uniform(upper_bound) >>> 0;
		var ret = (random_value);
		_free_all(address_pool);
		return ret;
		
	}

	function sodium_version_string() {
		var address_pool = [];

		var version = libsodium._sodium_version_string();
		var ret = (libsodium.Pointer_stringify(version));
		_free_all(address_pool);
		return ret;
		
	}


    exports.add = add;
    exports.compare = compare;
    exports.from_base64 = from_base64;
    exports.from_hex = from_hex;
    exports.from_string = from_string;
    exports.increment = increment;
    exports.is_zero = is_zero;
    exports.libsodium = libsodium;
    exports.memcmp = memcmp;
    exports.memzero = memzero;
    exports.output_formats = output_formats;
    exports.symbols = symbols;
    exports.to_base64 = to_base64;
    exports.to_hex = to_hex;
    exports.to_string = to_string;

    
	var exported_functions = ["crypto_aead_chacha20poly1305_decrypt", "crypto_aead_chacha20poly1305_decrypt_detached", "crypto_aead_chacha20poly1305_encrypt", "crypto_aead_chacha20poly1305_encrypt_detached", "crypto_aead_chacha20poly1305_ietf_decrypt", "crypto_aead_chacha20poly1305_ietf_decrypt_detached", "crypto_aead_chacha20poly1305_ietf_encrypt", "crypto_aead_chacha20poly1305_ietf_encrypt_detached", "crypto_aead_chacha20poly1305_ietf_keygen", "crypto_aead_chacha20poly1305_keygen", "crypto_aead_xchacha20poly1305_ietf_decrypt", "crypto_aead_xchacha20poly1305_ietf_decrypt_detached", "crypto_aead_xchacha20poly1305_ietf_encrypt", "crypto_aead_xchacha20poly1305_ietf_encrypt_detached", "crypto_aead_xchacha20poly1305_ietf_keygen", "crypto_auth", "crypto_auth_hmacsha256", "crypto_auth_hmacsha256_keygen", "crypto_auth_hmacsha256_verify", "crypto_auth_hmacsha512", "crypto_auth_hmacsha512_keygen", "crypto_auth_hmacsha512_verify", "crypto_auth_keygen", "crypto_auth_verify", "crypto_box_beforenm", "crypto_box_detached", "crypto_box_easy", "crypto_box_easy_afternm", "crypto_box_keypair", "crypto_box_open_detached", "crypto_box_open_easy", "crypto_box_open_easy_afternm", "crypto_box_seal", "crypto_box_seal_open", "crypto_box_seed_keypair", "crypto_generichash", "crypto_generichash_final", "crypto_generichash_init", "crypto_generichash_keygen", "crypto_generichash_update", "crypto_hash", "crypto_hash_sha256", "crypto_hash_sha512", "crypto_kdf_derive_from_key", "crypto_kdf_keygen", "crypto_kx_client_session_keys", "crypto_kx_keypair", "crypto_kx_seed_keypair", "crypto_kx_server_session_keys", "crypto_onetimeauth", "crypto_onetimeauth_final", "crypto_onetimeauth_init", "crypto_onetimeauth_keygen", "crypto_onetimeauth_update", "crypto_onetimeauth_verify", "crypto_pwhash", "crypto_pwhash_scryptsalsa208sha256", "crypto_pwhash_scryptsalsa208sha256_ll", "crypto_pwhash_scryptsalsa208sha256_str", "crypto_pwhash_scryptsalsa208sha256_str_verify", "crypto_pwhash_str", "crypto_pwhash_str_verify", "crypto_scalarmult", "crypto_scalarmult_base", "crypto_secretbox_detached", "crypto_secretbox_easy", "crypto_secretbox_keygen", "crypto_secretbox_open_detached", "crypto_secretbox_open_easy", "crypto_shorthash", "crypto_shorthash_keygen", "crypto_shorthash_siphashx24", "crypto_sign", "crypto_sign_detached", "crypto_sign_ed25519_pk_to_curve25519", "crypto_sign_ed25519_sk_to_curve25519", "crypto_sign_ed25519_sk_to_pk", "crypto_sign_ed25519_sk_to_seed", "crypto_sign_final_create", "crypto_sign_final_verify", "crypto_sign_init", "crypto_sign_keypair", "crypto_sign_open", "crypto_sign_seed_keypair", "crypto_sign_update", "crypto_sign_verify_detached", "crypto_stream_chacha20_ietf_xor", "crypto_stream_chacha20_ietf_xor_ic", "crypto_stream_chacha20_keygen", "crypto_stream_chacha20_xor", "crypto_stream_chacha20_xor_ic", "crypto_stream_keygen", "crypto_stream_xchacha20_keygen", "crypto_stream_xchacha20_xor", "crypto_stream_xchacha20_xor_ic", "randombytes_buf", "randombytes_buf_deterministic", "randombytes_close", "randombytes_random", "randombytes_set_implementation", "randombytes_stir", "randombytes_uniform", "sodium_version_string"],
	      functions = [crypto_aead_chacha20poly1305_decrypt, crypto_aead_chacha20poly1305_decrypt_detached, crypto_aead_chacha20poly1305_encrypt, crypto_aead_chacha20poly1305_encrypt_detached, crypto_aead_chacha20poly1305_ietf_decrypt, crypto_aead_chacha20poly1305_ietf_decrypt_detached, crypto_aead_chacha20poly1305_ietf_encrypt, crypto_aead_chacha20poly1305_ietf_encrypt_detached, crypto_aead_chacha20poly1305_ietf_keygen, crypto_aead_chacha20poly1305_keygen, crypto_aead_xchacha20poly1305_ietf_decrypt, crypto_aead_xchacha20poly1305_ietf_decrypt_detached, crypto_aead_xchacha20poly1305_ietf_encrypt, crypto_aead_xchacha20poly1305_ietf_encrypt_detached, crypto_aead_xchacha20poly1305_ietf_keygen, crypto_auth, crypto_auth_hmacsha256, crypto_auth_hmacsha256_keygen, crypto_auth_hmacsha256_verify, crypto_auth_hmacsha512, crypto_auth_hmacsha512_keygen, crypto_auth_hmacsha512_verify, crypto_auth_keygen, crypto_auth_verify, crypto_box_beforenm, crypto_box_detached, crypto_box_easy, crypto_box_easy_afternm, crypto_box_keypair, crypto_box_open_detached, crypto_box_open_easy, crypto_box_open_easy_afternm, crypto_box_seal, crypto_box_seal_open, crypto_box_seed_keypair, crypto_generichash, crypto_generichash_final, crypto_generichash_init, crypto_generichash_keygen, crypto_generichash_update, crypto_hash, crypto_hash_sha256, crypto_hash_sha512, crypto_kdf_derive_from_key, crypto_kdf_keygen, crypto_kx_client_session_keys, crypto_kx_keypair, crypto_kx_seed_keypair, crypto_kx_server_session_keys, crypto_onetimeauth, crypto_onetimeauth_final, crypto_onetimeauth_init, crypto_onetimeauth_keygen, crypto_onetimeauth_update, crypto_onetimeauth_verify, crypto_pwhash, crypto_pwhash_scryptsalsa208sha256, crypto_pwhash_scryptsalsa208sha256_ll, crypto_pwhash_scryptsalsa208sha256_str, crypto_pwhash_scryptsalsa208sha256_str_verify, crypto_pwhash_str, crypto_pwhash_str_verify, crypto_scalarmult, crypto_scalarmult_base, crypto_secretbox_detached, crypto_secretbox_easy, crypto_secretbox_keygen, crypto_secretbox_open_detached, crypto_secretbox_open_easy, crypto_shorthash, crypto_shorthash_keygen, crypto_shorthash_siphashx24, crypto_sign, crypto_sign_detached, crypto_sign_ed25519_pk_to_curve25519, crypto_sign_ed25519_sk_to_curve25519, crypto_sign_ed25519_sk_to_pk, crypto_sign_ed25519_sk_to_seed, crypto_sign_final_create, crypto_sign_final_verify, crypto_sign_init, crypto_sign_keypair, crypto_sign_open, crypto_sign_seed_keypair, crypto_sign_update, crypto_sign_verify_detached, crypto_stream_chacha20_ietf_xor, crypto_stream_chacha20_ietf_xor_ic, crypto_stream_chacha20_keygen, crypto_stream_chacha20_xor, crypto_stream_chacha20_xor_ic, crypto_stream_keygen, crypto_stream_xchacha20_keygen, crypto_stream_xchacha20_xor, crypto_stream_xchacha20_xor_ic, randombytes_buf, randombytes_buf_deterministic, randombytes_close, randombytes_random, randombytes_set_implementation, randombytes_stir, randombytes_uniform, sodium_version_string];
	for (var i = 0; i < functions.length; i++) {
		if (typeof libsodium["_" + exported_functions[i]] === "function") {
			exports[exported_functions[i]] = functions[i];
		}
	}
	var constants = ["SODIUM_LIBRARY_VERSION_MAJOR", "SODIUM_LIBRARY_VERSION_MINOR", "crypto_aead_chacha20poly1305_ABYTES", "crypto_aead_chacha20poly1305_KEYBYTES", "crypto_aead_chacha20poly1305_NPUBBYTES", "crypto_aead_chacha20poly1305_NSECBYTES", "crypto_aead_chacha20poly1305_ietf_ABYTES", "crypto_aead_chacha20poly1305_ietf_KEYBYTES", "crypto_aead_chacha20poly1305_ietf_NPUBBYTES", "crypto_aead_chacha20poly1305_ietf_NSECBYTES", "crypto_aead_xchacha20poly1305_ietf_ABYTES", "crypto_aead_xchacha20poly1305_ietf_KEYBYTES", "crypto_aead_xchacha20poly1305_ietf_NPUBBYTES", "crypto_aead_xchacha20poly1305_ietf_NSECBYTES", "crypto_auth_BYTES", "crypto_auth_KEYBYTES", "crypto_auth_hmacsha256_BYTES", "crypto_auth_hmacsha256_KEYBYTES", "crypto_auth_hmacsha512_BYTES", "crypto_auth_hmacsha512_KEYBYTES", "crypto_box_BEFORENMBYTES", "crypto_box_MACBYTES", "crypto_box_NONCEBYTES", "crypto_box_PUBLICKEYBYTES", "crypto_box_SEALBYTES", "crypto_box_SECRETKEYBYTES", "crypto_box_SEEDBYTES", "crypto_generichash_BYTES", "crypto_generichash_BYTES_MAX", "crypto_generichash_BYTES_MIN", "crypto_generichash_KEYBYTES", "crypto_generichash_KEYBYTES_MAX", "crypto_generichash_KEYBYTES_MIN", "crypto_hash_BYTES", "crypto_kdf_BYTES_MAX", "crypto_kdf_BYTES_MIN", "crypto_kdf_CONTEXTBYTES", "crypto_kdf_KEYBYTES", "crypto_kx_PUBLICKEYBYTES", "crypto_kx_SECRETKEYBYTES", "crypto_kx_SEEDBYTES", "crypto_kx_SESSSIONKEYBYTES", "crypto_onetimeauth_BYTES", "crypto_onetimeauth_KEYBYTES", "crypto_pwhash_ALG_ARGON2I13", "crypto_pwhash_ALG_DEFAULT", "crypto_pwhash_BYTES_MAX", "crypto_pwhash_BYTES_MIN", "crypto_pwhash_MEMLIMIT_INTERACTIVE", "crypto_pwhash_MEMLIMIT_MAX", "crypto_pwhash_MEMLIMIT_MIN", "crypto_pwhash_MEMLIMIT_MODERATE", "crypto_pwhash_MEMLIMIT_SENSITIVE", "crypto_pwhash_OPSLIMIT_INTERACTIVE", "crypto_pwhash_OPSLIMIT_MAX", "crypto_pwhash_OPSLIMIT_MIN", "crypto_pwhash_OPSLIMIT_MODERATE", "crypto_pwhash_OPSLIMIT_SENSITIVE", "crypto_pwhash_PASSWD_MAX", "crypto_pwhash_PASSWD_MIN", "crypto_pwhash_SALTBYTES", "crypto_pwhash_STRBYTES", "crypto_pwhash_STR_VERIFY", "crypto_pwhash_scryptsalsa208sha256_BYTES_MAX", "crypto_pwhash_scryptsalsa208sha256_BYTES_MIN", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE", "crypto_pwhash_scryptsalsa208sha256_SALTBYTES", "crypto_pwhash_scryptsalsa208sha256_STRBYTES", "crypto_pwhash_scryptsalsa208sha256_STR_VERIFY", "crypto_scalarmult_BYTES", "crypto_scalarmult_SCALARBYTES", "crypto_secretbox_KEYBYTES", "crypto_secretbox_MACBYTES", "crypto_secretbox_NONCEBYTES", "crypto_shorthash_BYTES", "crypto_shorthash_KEYBYTES", "crypto_shorthash_siphashx24_BYTES", "crypto_shorthash_siphashx24_KEYBYTES", "crypto_sign_BYTES", "crypto_sign_PUBLICKEYBYTES", "crypto_sign_SECRETKEYBYTES", "crypto_sign_SEEDBYTES", "crypto_stream_chacha20_KEYBYTES", "crypto_stream_chacha20_NONCEBYTES", "crypto_stream_chacha20_ietf_KEYBYTES", "crypto_stream_chacha20_ietf_NONCEBYTES", "crypto_stream_xchacha20_ietf_KEYBYTES", "crypto_stream_xchacha20_ietf_NONCEBYTES", "randombytes_SEEDBYTES"];
	for (var i = 0; i < constants.length; i++) {
		var raw = libsodium["_" + constants[i].toLowerCase()];
		if (typeof raw === "function") exports[constants[i]] = raw()|0;
	}
	var constants_str = ["SODIUM_VERSION_STRING", "crypto_pwhash_STRPREFIX", "crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];
	for (var i = 0; i < constants_str.length; i++) {
		var raw = libsodium["_" + constants_str[i].toLowerCase()];
		if (typeof raw === "function") exports[constants_str[i]] = libsodium.Pointer_stringify(raw());
	}

    return exports;
})));

}).call(this,require('_process'))
},{"_process":147,"libsodium-sumo":128}],130:[function(require,module,exports){
(function (Buffer){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = new Buffer(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

}).call(this,require("buffer").Buffer)
},{"buffer":71,"hash-base":109,"inherits":124}],131:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":34,"brorand":35}],132:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],133:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],134:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],135:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":136,"asn1.js":12}],136:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":12}],137:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
},{"browserify-aes":39,"buffer":71,"evp_bytestokey":108}],138:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":134,"./asn1":135,"./fixProc":137,"browserify-aes":39,"buffer":71,"pbkdf2":140}],139:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":147}],140:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":141,"./lib/sync":144}],141:[function(require,module,exports){
(function (process,global){
var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var Buffer = require('safe-buffer').Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":142,"./precondition":143,"./sync":144,"_process":147,"safe-buffer":172}],142:[function(require,module,exports){
(function (process){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

}).call(this,require('_process'))
},{"_process":147}],143:[function(require,module,exports){
(function (Buffer){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":126}],144:[function(require,module,exports){
var md5 = require('create-hash/md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var Buffer = require('safe-buffer').Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":142,"./precondition":143,"create-hash/md5":77,"ripemd160":145,"safe-buffer":172,"sha.js":180}],145:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":71,"hash-base":109,"inherits":124}],146:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":147}],147:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],148:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":150,"./publicEncrypt":151}],149:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":71,"create-hash":75}],150:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":149,"./withPublic":152,"./xor":153,"bn.js":34,"browserify-rsa":57,"buffer":71,"create-hash":75,"parse-asn1":138}],151:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":149,"./withPublic":152,"./xor":153,"bn.js":34,"browserify-rsa":57,"buffer":71,"create-hash":75,"parse-asn1":138,"randombytes":154}],152:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":34,"buffer":71}],153:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],154:[function(require,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }

  // XXX: phantomjs doesn't like a buffer being passed here
  var bytes = Buffer.from(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":147,"safe-buffer":172}],155:[function(require,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":147,"randombytes":154,"safe-buffer":172}],156:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":157}],157:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":159,"./_stream_writable":161,"core-util-is":73,"inherits":124,"process-nextick-args":146}],158:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":160,"core-util-is":73,"inherits":124}],159:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":157,"./internal/streams/BufferList":162,"./internal/streams/destroy":163,"./internal/streams/stream":164,"_process":147,"core-util-is":73,"events":107,"inherits":124,"isarray":127,"process-nextick-args":146,"safe-buffer":172,"string_decoder/":165,"util":36}],160:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":157,"core-util-is":73,"inherits":124}],161:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":157,"./internal/streams/destroy":163,"./internal/streams/stream":164,"_process":147,"core-util-is":73,"inherits":124,"process-nextick-args":146,"safe-buffer":172,"util-deprecate":189}],162:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":172}],163:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":146}],164:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":107}],165:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":172}],166:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":167}],167:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":157,"./lib/_stream_passthrough.js":158,"./lib/_stream_readable.js":159,"./lib/_stream_transform.js":160,"./lib/_stream_writable.js":161}],168:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":167}],169:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":161}],170:[function(require,module,exports){
(function (Buffer){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var m = new Array(16)
  for (var i = 0; i < 16; ++i) m[i] = this._block.readInt32LE(i * 4)

  var al = this._a
  var bl = this._b
  var cl = this._c
  var dl = this._d
  var el = this._e

  // Mj = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
  // K = 0x00000000
  // Sj = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
  al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11); cl = rotl(cl, 10)
  el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14); bl = rotl(bl, 10)
  dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15); al = rotl(al, 10)
  cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12); el = rotl(el, 10)
  bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5); dl = rotl(dl, 10)
  al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8); cl = rotl(cl, 10)
  el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7); bl = rotl(bl, 10)
  dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9); al = rotl(al, 10)
  cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11); el = rotl(el, 10)
  bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13); dl = rotl(dl, 10)
  al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14); cl = rotl(cl, 10)
  el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15); bl = rotl(bl, 10)
  dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6); al = rotl(al, 10)
  cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7); el = rotl(el, 10)
  bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9); dl = rotl(dl, 10)
  al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8); cl = rotl(cl, 10)

  // Mj = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
  // K = 0x5a827999
  // Sj = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
  el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7); bl = rotl(bl, 10)
  dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6); al = rotl(al, 10)
  cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8); el = rotl(el, 10)
  bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13); dl = rotl(dl, 10)
  al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11); cl = rotl(cl, 10)
  el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9); bl = rotl(bl, 10)
  dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7); al = rotl(al, 10)
  cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15); el = rotl(el, 10)
  bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7); dl = rotl(dl, 10)
  al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12); cl = rotl(cl, 10)
  el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15); bl = rotl(bl, 10)
  dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9); al = rotl(al, 10)
  cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11); el = rotl(el, 10)
  bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7); dl = rotl(dl, 10)
  al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13); cl = rotl(cl, 10)
  el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12); bl = rotl(bl, 10)

  // Mj = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
  // K = 0x6ed9eba1
  // Sj = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
  dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11); al = rotl(al, 10)
  cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13); el = rotl(el, 10)
  bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6); dl = rotl(dl, 10)
  al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7); cl = rotl(cl, 10)
  el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14); bl = rotl(bl, 10)
  dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9); al = rotl(al, 10)
  cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13); el = rotl(el, 10)
  bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15); dl = rotl(dl, 10)
  al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14); cl = rotl(cl, 10)
  el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8); bl = rotl(bl, 10)
  dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13); al = rotl(al, 10)
  cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6); el = rotl(el, 10)
  bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5); dl = rotl(dl, 10)
  al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12); cl = rotl(cl, 10)
  el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7); bl = rotl(bl, 10)
  dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5); al = rotl(al, 10)

  // Mj = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
  // K = 0x8f1bbcdc
  // Sj = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
  cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11); el = rotl(el, 10)
  bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12); dl = rotl(dl, 10)
  al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14); cl = rotl(cl, 10)
  el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15); bl = rotl(bl, 10)
  dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14); al = rotl(al, 10)
  cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15); el = rotl(el, 10)
  bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9); dl = rotl(dl, 10)
  al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8); cl = rotl(cl, 10)
  el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9); bl = rotl(bl, 10)
  dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14); al = rotl(al, 10)
  cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5); el = rotl(el, 10)
  bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6); dl = rotl(dl, 10)
  al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8); cl = rotl(cl, 10)
  el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6); bl = rotl(bl, 10)
  dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5); al = rotl(al, 10)
  cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12); el = rotl(el, 10)

  // Mj = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  // K = 0xa953fd4e
  // Sj = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9); dl = rotl(dl, 10)
  al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15); cl = rotl(cl, 10)
  el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5); bl = rotl(bl, 10)
  dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11); al = rotl(al, 10)
  cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6); el = rotl(el, 10)
  bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8); dl = rotl(dl, 10)
  al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13); cl = rotl(cl, 10)
  el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12); bl = rotl(bl, 10)
  dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5); al = rotl(al, 10)
  cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12); el = rotl(el, 10)
  bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13); dl = rotl(dl, 10)
  al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14); cl = rotl(cl, 10)
  el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11); bl = rotl(bl, 10)
  dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8); al = rotl(al, 10)
  cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5); el = rotl(el, 10)
  bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6); dl = rotl(dl, 10)

  var ar = this._a
  var br = this._b
  var cr = this._c
  var dr = this._d
  var er = this._e

  // M'j = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
  // K' = 0x50a28be6
  // S'j = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
  ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8); cr = rotl(cr, 10)
  er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9); br = rotl(br, 10)
  dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9); ar = rotl(ar, 10)
  cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11); er = rotl(er, 10)
  br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13); dr = rotl(dr, 10)
  ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15); cr = rotl(cr, 10)
  er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15); br = rotl(br, 10)
  dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5); ar = rotl(ar, 10)
  cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7); er = rotl(er, 10)
  br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7); dr = rotl(dr, 10)
  ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8); cr = rotl(cr, 10)
  er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11); br = rotl(br, 10)
  dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14); ar = rotl(ar, 10)
  cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14); er = rotl(er, 10)
  br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12); dr = rotl(dr, 10)
  ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6); cr = rotl(cr, 10)

  // M'j = 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
  // K' = 0x5c4dd124
  // S'j = 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
  er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9); br = rotl(br, 10)
  dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13); ar = rotl(ar, 10)
  cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15); er = rotl(er, 10)
  br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7); dr = rotl(dr, 10)
  ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12); cr = rotl(cr, 10)
  er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8); br = rotl(br, 10)
  dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9); ar = rotl(ar, 10)
  cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11); er = rotl(er, 10)
  br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7); dr = rotl(dr, 10)
  ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7); cr = rotl(cr, 10)
  er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12); br = rotl(br, 10)
  dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7); ar = rotl(ar, 10)
  cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6); er = rotl(er, 10)
  br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15); dr = rotl(dr, 10)
  ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13); cr = rotl(cr, 10)
  er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11); br = rotl(br, 10)

  // M'j = 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
  // K' = 0x6d703ef3
  // S'j = 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
  dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9); ar = rotl(ar, 10)
  cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7); er = rotl(er, 10)
  br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15); dr = rotl(dr, 10)
  ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11); cr = rotl(cr, 10)
  er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8); br = rotl(br, 10)
  dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6); ar = rotl(ar, 10)
  cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6); er = rotl(er, 10)
  br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14); dr = rotl(dr, 10)
  ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12); cr = rotl(cr, 10)
  er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13); br = rotl(br, 10)
  dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5); ar = rotl(ar, 10)
  cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14); er = rotl(er, 10)
  br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13); dr = rotl(dr, 10)
  ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13); cr = rotl(cr, 10)
  er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7); br = rotl(br, 10)
  dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5); ar = rotl(ar, 10)

  // M'j = 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
  // K' = 0x7a6d76e9
  // S'j = 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
  cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15); er = rotl(er, 10)
  br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5); dr = rotl(dr, 10)
  ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8); cr = rotl(cr, 10)
  er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11); br = rotl(br, 10)
  dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14); ar = rotl(ar, 10)
  cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14); er = rotl(er, 10)
  br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6); dr = rotl(dr, 10)
  ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14); cr = rotl(cr, 10)
  er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6); br = rotl(br, 10)
  dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9); ar = rotl(ar, 10)
  cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12); er = rotl(er, 10)
  br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9); dr = rotl(dr, 10)
  ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12); cr = rotl(cr, 10)
  er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5); br = rotl(br, 10)
  dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15); ar = rotl(ar, 10)
  cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8); er = rotl(er, 10)

  // M'j = 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  // K' = 0x00000000
  // S'j = 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8); dr = rotl(dr, 10)
  ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5); cr = rotl(cr, 10)
  er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12); br = rotl(br, 10)
  dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9); ar = rotl(ar, 10)
  cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12); er = rotl(er, 10)
  br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5); dr = rotl(dr, 10)
  ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14); cr = rotl(cr, 10)
  er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6); br = rotl(br, 10)
  dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8); ar = rotl(ar, 10)
  cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13); er = rotl(er, 10)
  br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6); dr = rotl(dr, 10)
  ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5); cr = rotl(cr, 10)
  er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15); br = rotl(br, 10)
  dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13); ar = rotl(ar, 10)
  cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11); er = rotl(er, 10)
  br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11); dr = rotl(dr, 10)

  // change state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

}).call(this,require("buffer").Buffer)
},{"buffer":71,"hash-base":171,"inherits":124}],171:[function(require,module,exports){
(function (Buffer){
'use strict'
var Transform = require('stream').Transform
var inherits = require('inherits')

function HashBase (blockSize) {
  Transform.call(this)

  this._block = new Buffer(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding)
    this.update(chunk)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this._digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary')

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function (data) {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)
  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

}).call(this,require("buffer").Buffer)
},{"buffer":71,"inherits":124,"stream":187}],172:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":71}],173:[function(require,module,exports){
'use strict'
module.exports = require('./lib')(require('./lib/elliptic'))

},{"./lib":177,"./lib/elliptic":176}],174:[function(require,module,exports){
(function (Buffer){
'use strict'
var toString = Object.prototype.toString

// TypeError
exports.isArray = function (value, message) {
  if (!Array.isArray(value)) throw TypeError(message)
}

exports.isBoolean = function (value, message) {
  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
}

exports.isBuffer = function (value, message) {
  if (!Buffer.isBuffer(value)) throw TypeError(message)
}

exports.isFunction = function (value, message) {
  if (toString.call(value) !== '[object Function]') throw TypeError(message)
}

exports.isNumber = function (value, message) {
  if (toString.call(value) !== '[object Number]') throw TypeError(message)
}

exports.isObject = function (value, message) {
  if (toString.call(value) !== '[object Object]') throw TypeError(message)
}

// RangeError
exports.isBufferLength = function (buffer, length, message) {
  if (buffer.length !== length) throw RangeError(message)
}

exports.isBufferLength2 = function (buffer, length1, length2, message) {
  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
}

exports.isLengthGTZero = function (value, message) {
  if (value.length === 0) throw RangeError(message)
}

exports.isNumberInInterval = function (number, x, y, message) {
  if (number <= x || number >= y) throw RangeError(message)
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":126}],175:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var bip66 = require('bip66')

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
  // begin
  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
  // private key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // middle
  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
  // public key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00
])

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
  // begin
  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
  // private key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // middle
  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
  // public key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00
])

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)
  privateKey.copy(result, compressed ? 8 : 9)
  publicKey.copy(result, compressed ? 181 : 214)
  return result
}

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length

  // sequence header
  var index = 0
  if (length < index + 1 || privateKey[index] !== 0x30) return
  index += 1

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return

  var lenb = privateKey[index] & 0x7f
  index += 1
  if (lenb < 1 || lenb > 2) return
  if (length < index + lenb) return

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)
  index += lenb
  if (length < index + len) return

  // sequence element 0: version number (=1)
  if (length < index + 3 ||
      privateKey[index] !== 0x02 ||
      privateKey[index + 1] !== 0x01 ||
      privateKey[index + 2] !== 0x01) {
    return
  }
  index += 3

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 ||
      privateKey[index] !== 0x04 ||
      privateKey[index + 1] > 0x20 ||
      length < index + 2 + privateKey[index + 1]) {
    return
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
}

exports.signatureExport = function (sigObj) {
  var r = Buffer.concat([Buffer.from([0]), sigObj.r])
  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

  var s = Buffer.concat([Buffer.from([0]), sigObj.s])
  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

  return bip66.encode(r.slice(posR), s.slice(posS))
}

exports.signatureImport = function (sig) {
  var r = Buffer.alloc(32, 0)
  var s = Buffer.alloc(32, 0)

  try {
    var sigObj = bip66.decode(sig)
    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)
    if (sigObj.r.length > 32) throw new Error('R length is too long')
    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)
    if (sigObj.s.length > 32) throw new Error('S length is too long')
  } catch (err) {
    return
  }

  sigObj.r.copy(r, 32 - sigObj.r.length)
  sigObj.s.copy(s, 32 - sigObj.s.length)

  return { r: r, s: s }
}

exports.signatureImportLax = function (sig) {
  var r = Buffer.alloc(32, 0)
  var s = Buffer.alloc(32, 0)

  var length = sig.length
  var index = 0

  // sequence tag byte
  if (sig[index++] !== 0x30) return

  // sequence length byte
  var lenbyte = sig[index++]
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80
    if (index > length) return
  }

  // sequence tag byte for r
  if (sig[index++] !== 0x02) return

  // length for r
  var rlen = sig[index++]
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80
    if (index + lenbyte > length) return
    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]
  }
  if (rlen > length - index) return
  var rindex = index
  index += rlen

  // sequence tag byte for s
  if (sig[index++] !== 0x02) return

  // length for s
  var slen = sig[index++]
  if (slen & 0x80) {
    lenbyte = slen - 0x80
    if (index + lenbyte > length) return
    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]
  }
  if (slen > length - index) return
  var sindex = index
  index += slen

  // ignore leading zeros in r
  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
  // copy r value
  if (rlen > 32) return
  var rvalue = sig.slice(rindex, rindex + rlen)
  rvalue.copy(r, 32 - rvalue.length)

  // ignore leading zeros in s
  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
  // copy s value
  if (slen > 32) return
  var svalue = sig.slice(sindex, sindex + slen)
  svalue.copy(s, 32 - svalue.length)

  return { r: r, s: s }
}

},{"bip66":33,"safe-buffer":172}],176:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var BN = require('bn.js')
var EC = require('elliptic').ec

var messages = require('../messages.json')

var ec = new EC('secp256k1')
var ecparams = ec.curve

function loadCompressedPublicKey (first, xBuffer) {
  var x = new BN(xBuffer)

  // overflow
  if (x.cmp(ecparams.p) >= 0) return null
  x = x.toRed(ecparams.red)

  // compute corresponding Y
  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadUncompressedPublicKey (first, xBuffer, yBuffer) {
  var x = new BN(xBuffer)
  var y = new BN(yBuffer)

  // overflow
  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

  x = x.toRed(ecparams.red)
  y = y.toRed(ecparams.red)

  // is odd flag
  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

  // x*x*x + b = y*y
  var x3 = x.redSqr().redIMul(x)
  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

  return ec.keyPair({ pub: { x: x, y: y } })
}

function loadPublicKey (publicKey) {
  var first = publicKey[0]
  switch (first) {
    case 0x02:
    case 0x03:
      if (publicKey.length !== 33) return null
      return loadCompressedPublicKey(first, publicKey.slice(1, 33))
    case 0x04:
    case 0x06:
    case 0x07:
      if (publicKey.length !== 65) return null
      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
    default:
      return null
  }
}

exports.privateKeyVerify = function (privateKey) {
  var bn = new BN(privateKey)
  return bn.cmp(ecparams.n) < 0 && !bn.isZero()
}

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey)
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
}

exports.privateKeyTweakAdd = function (privateKey, tweak) {
  var bn = new BN(tweak)
  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

  bn.iadd(new BN(privateKey))
  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

  return bn.toArrayLike(Buffer, 'be', 32)
}

exports.privateKeyTweakMul = function (privateKey, tweak) {
  var bn = new BN(tweak)
  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

  bn.imul(new BN(privateKey))
  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)

  return bn.toArrayLike(Buffer, 'be', 32)
}

exports.publicKeyCreate = function (privateKey, compressed) {
  var d = new BN(privateKey)
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)

  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
}

exports.publicKeyConvert = function (publicKey, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  return Buffer.from(pair.getPublic(compressed, true))
}

exports.publicKeyVerify = function (publicKey) {
  return loadPublicKey(publicKey) !== null
}

exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  tweak = new BN(tweak)
  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

  return Buffer.from(ecparams.g.mul(tweak).add(pair.pub).encode(true, compressed))
}

exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  tweak = new BN(tweak)
  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
}

exports.publicKeyCombine = function (publicKeys, compressed) {
  var pairs = new Array(publicKeys.length)
  for (var i = 0; i < publicKeys.length; ++i) {
    pairs[i] = loadPublicKey(publicKeys[i])
    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  }

  var point = pairs[0].pub
  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)
  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)

  return Buffer.from(point.encode(true, compressed))
}

exports.signatureNormalize = function (signature) {
  var r = new BN(signature.slice(0, 32))
  var s = new BN(signature.slice(32, 64))
  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

  var result = Buffer.from(signature)
  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)

  return result
}

exports.signatureExport = function (signature) {
  var r = signature.slice(0, 32)
  var s = signature.slice(32, 64)
  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

  return { r: r, s: s }
}

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r)
  if (r.cmp(ecparams.n) >= 0) r = new BN(0)

  var s = new BN(sigObj.s)
  if (s.cmp(ecparams.n) >= 0) s = new BN(0)

  return Buffer.concat([
    r.toArrayLike(Buffer, 'be', 32),
    s.toArrayLike(Buffer, 'be', 32)
  ])
}

exports.sign = function (message, privateKey, noncefn, data) {
  if (typeof noncefn === 'function') {
    var getNonce = noncefn
    noncefn = function (counter) {
      var nonce = getNonce(message, privateKey, null, data, counter)
      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)

      return new BN(nonce)
    }
  }

  var d = new BN(privateKey)
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)

  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })
  return {
    signature: Buffer.concat([
      result.r.toArrayLike(Buffer, 'be', 32),
      result.s.toArrayLike(Buffer, 'be', 32)
    ]),
    recovery: result.recoveryParam
  }
}

exports.verify = function (message, signature, publicKey) {
  var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}

  var sigr = new BN(sigObj.r)
  var sigs = new BN(sigObj.s)
  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  return ec.verify(message, sigObj, {x: pair.pub.x, y: pair.pub.y})
}

exports.recover = function (message, signature, recovery, compressed) {
  var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}

  var sigr = new BN(sigObj.r)
  var sigs = new BN(sigObj.s)
  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

  try {
    if (sigr.isZero() || sigs.isZero()) throw new Error()

    var point = ec.recoverPubKey(message, sigObj, recovery)
    return Buffer.from(point.encode(true, compressed))
  } catch (err) {
    throw new Error(messages.ECDSA_RECOVER_FAIL)
  }
}

exports.ecdh = function (publicKey, privateKey) {
  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)
  return createHash('sha256').update(shared).digest()
}

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var pair = loadPublicKey(publicKey)
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

  var scalar = new BN(privateKey)
  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)

  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
}

},{"../messages.json":178,"bn.js":34,"create-hash":75,"elliptic":91,"safe-buffer":172}],177:[function(require,module,exports){
'use strict'
var assert = require('./assert')
var der = require('./der')
var messages = require('./messages.json')

function initCompressedValue (value, defaultValue) {
  if (value === undefined) return defaultValue

  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)
  return value
}

module.exports = function (secp256k1) {
  return {
    privateKeyVerify: function (privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
    },

    privateKeyExport: function (privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)
      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)

      return der.privateKeyExport(privateKey, publicKey, compressed)
    },

    privateKeyImport: function (privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)

      privateKey = der.privateKeyImport(privateKey)
      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
    },

    privateKeyTweakAdd: function (privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      return secp256k1.privateKeyTweakAdd(privateKey, tweak)
    },

    privateKeyTweakMul: function (privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      return secp256k1.privateKeyTweakMul(privateKey, tweak)
    },

    publicKeyCreate: function (privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyCreate(privateKey, compressed)
    },

    publicKeyConvert: function (publicKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyConvert(publicKey, compressed)
    },

    publicKeyVerify: function (publicKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      return secp256k1.publicKeyVerify(publicKey)
    },

    publicKeyTweakAdd: function (publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
    },

    publicKeyTweakMul: function (publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
    },

    publicKeyCombine: function (publicKeys, compressed) {
      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)
      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)
      for (var i = 0; i < publicKeys.length; ++i) {
        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
      }

      compressed = initCompressedValue(compressed, true)

      return secp256k1.publicKeyCombine(publicKeys, compressed)
    },

    signatureNormalize: function (signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      return secp256k1.signatureNormalize(signature)
    },

    signatureExport: function (signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      var sigObj = secp256k1.signatureExport(signature)
      return der.signatureExport(sigObj)
    },

    signatureImport: function (sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      var sigObj = der.signatureImport(sig)
      if (sigObj) return secp256k1.signatureImport(sigObj)

      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
    },

    signatureImportLax: function (sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      var sigObj = der.signatureImportLax(sig)
      if (sigObj) return secp256k1.signatureImport(sigObj)

      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
    },

    sign: function (message, privateKey, options) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      var data = null
      var noncefn = null
      if (options !== undefined) {
        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)

        if (options.data !== undefined) {
          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)
          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)
          data = options.data
        }

        if (options.noncefn !== undefined) {
          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)
          noncefn = options.noncefn
        }
      }

      return secp256k1.sign(message, privateKey, noncefn, data)
    },

    verify: function (message, signature, publicKey) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      return secp256k1.verify(message, signature, publicKey)
    },

    recover: function (message, signature, recovery, compressed) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)
      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.recover(message, signature, recovery, compressed)
    },

    ecdh: function (publicKey, privateKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      return secp256k1.ecdh(publicKey, privateKey)
    },

    ecdhUnsafe: function (publicKey, privateKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

      compressed = initCompressedValue(compressed, true)

      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
    }
  }
}

},{"./assert":174,"./der":175,"./messages.json":178}],178:[function(require,module,exports){
module.exports={
  "COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
  "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
  "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
  "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
  "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
  "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
  "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
  "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
  "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
  "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
  "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
  "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
  "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
  "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
  "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
  "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
  "ECDH_FAIL": "scalar was invalid (zero or overflow)",
  "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
  "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
  "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
  "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
  "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
  "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
  "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
  "MSG32_TYPE_INVALID": "message should be a Buffer",
  "MSG32_LENGTH_INVALID": "message length is invalid",
  "OPTIONS_TYPE_INVALID": "options should be an Object",
  "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
  "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
  "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
  "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
  "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
  "TWEAK_TYPE_INVALID": "tweak should be a Buffer",
  "TWEAK_LENGTH_INVALID": "tweak length is invalid"
}

},{}],179:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = bits & 0xffffffff
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":172}],180:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":181,"./sha1":182,"./sha224":183,"./sha256":184,"./sha384":185,"./sha512":186}],181:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":179,"inherits":124,"safe-buffer":172}],182:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":179,"inherits":124,"safe-buffer":172}],183:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":179,"./sha256":184,"inherits":124,"safe-buffer":172}],184:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":179,"inherits":124,"safe-buffer":172}],185:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":179,"./sha512":186,"inherits":124,"safe-buffer":172}],186:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":179,"inherits":124,"safe-buffer":172}],187:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":107,"inherits":124,"readable-stream/duplex.js":156,"readable-stream/passthrough.js":166,"readable-stream/readable.js":167,"readable-stream/transform.js":168,"readable-stream/writable.js":169}],188:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":172}],189:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],190:[function(require,module,exports){
arguments[4][124][0].apply(exports,arguments)
},{"dup":124}],191:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],192:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":191,"_process":147,"inherits":190}],193:[function(require,module,exports){
(function (Buffer){
'use strict'

// Number.MAX_SAFE_INTEGER
var MAX_SAFE_INTEGER = 9007199254740991

function checkUInt53 (n) {
  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range')
}

function encode (number, buffer, offset) {
  checkUInt53(number)

  if (!buffer) buffer = new Buffer(encodingLength(number))
  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')
  if (!offset) offset = 0

  // 8 bit
  if (number < 0xfd) {
    buffer.writeUInt8(number, offset)
    encode.bytes = 1

  // 16 bit
  } else if (number <= 0xffff) {
    buffer.writeUInt8(0xfd, offset)
    buffer.writeUInt16LE(number, offset + 1)
    encode.bytes = 3

  // 32 bit
  } else if (number <= 0xffffffff) {
    buffer.writeUInt8(0xfe, offset)
    buffer.writeUInt32LE(number, offset + 1)
    encode.bytes = 5

  // 64 bit
  } else {
    buffer.writeUInt8(0xff, offset)
    buffer.writeUInt32LE(number >>> 0, offset + 1)
    buffer.writeUInt32LE((number / 0x100000000) | 0, offset + 5)
    encode.bytes = 9
  }

  return buffer
}

function decode (buffer, offset) {
  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')
  if (!offset) offset = 0

  var first = buffer.readUInt8(offset)

  // 8 bit
  if (first < 0xfd) {
    decode.bytes = 1
    return first

  // 16 bit
  } else if (first === 0xfd) {
    decode.bytes = 3
    return buffer.readUInt16LE(offset + 1)

  // 32 bit
  } else if (first === 0xfe) {
    decode.bytes = 5
    return buffer.readUInt32LE(offset + 1)

  // 64 bit
  } else {
    decode.bytes = 9
    var lo = buffer.readUInt32LE(offset + 1)
    var hi = buffer.readUInt32LE(offset + 5)
    var number = hi * 0x0100000000 + lo
    checkUInt53(number)

    return number
  }
}

function encodingLength (number) {
  checkUInt53(number)

  return (
    number < 0xfd ? 1
  : number <= 0xffff ? 3
  : number <= 0xffffffff ? 5
  : 9
  )
}

module.exports = { encode: encode, decode: decode, encodingLength: encodingLength }

}).call(this,require("buffer").Buffer)
},{"buffer":71}],194:[function(require,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}]},{},[6])(6)
});
